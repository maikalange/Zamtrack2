if (typeof dojo == "undefined") { (function () { if (typeof this["djConfig"] == "undefined") { this.djConfig = {}; } if ((!this["console"]) || (!console["firebug"])) { this.console = {}; } var cn = ["assert", "count", "debug", "dir", "dirxml", "error", "group", "groupEnd", "info", "log", "profile", "profileEnd", "time", "timeEnd", "trace", "warn"]; var i = 0, tn; while ((tn = cn[i++])) { if (!console[tn]) { console[tn] = function () { }; } } if (typeof this["dojo"] == "undefined") { this.dojo = {}; } var d = dojo; dojo.global = this; var _5 = { isDebug: false, libraryScriptUri: "", preventBackButtonFix: true, delayMozLoadingFix: false }; for (var _6 in _5) { if (typeof djConfig[_6] == "undefined") { djConfig[_6] = _5[_6]; } } var _7 = ["Browser", "Rhino", "Spidermonkey", "Mobile"]; var t; while (t = _7.shift()) { d["is" + t] = false; } dojo.locale = djConfig.locale; dojo.version = { major: 0, minor: 0, patch: 0, flag: "dev", revision: Number("$Rev: 11363 $".match(/[0-9]+/)[0]), toString: function () { with (d.version) { return major + "." + minor + "." + patch + flag + " (" + revision + ")"; } } }; if (typeof OpenAjax != "undefined") { OpenAjax.hub.registerLibrary("dojo", "http://dojotoolkit.org", d.version.toString()); } dojo._mixin = function (_9, _a) { var _b = {}; for (var x in _a) { if (_b[x] === undefined || _b[x] != _a[x]) { _9[x] = _a[x]; } } if (d["isIE"] && _a) { var p = _a.toString; if (typeof p == "function" && p != _9.toString && p != _b.toString && p != "\nfunction toString() {\n    [native code]\n}\n") { _9.toString = _a.toString; } } return _9; }; dojo.mixin = function (_e, _f) { for (var i = 1, l = arguments.length; i < l; i++) { d._mixin(_e, arguments[i]); } return _e; }; dojo._getProp = function (_12, _13, _14) { var obj = _14 || d.global; for (var i = 0, p; obj && (p = _12[i]); i++) { obj = (p in obj ? obj[p] : (_13 ? obj[p] = {} : undefined)); } return obj; }; dojo.setObject = function (_18, _19, _1a) { var _1b = _18.split("."), p = _1b.pop(), obj = d._getProp(_1b, true, _1a); return (obj && p ? (obj[p] = _19) : undefined); }; dojo.getObject = function (_1e, _1f, _20) { return d._getProp(_1e.split("."), _1f, _20); }; dojo.exists = function (_21, obj) { return !!d.getObject(_21, false, obj); }; dojo["eval"] = function (_23) { return d.global.eval ? d.global.eval(_23) : eval(_23); }; d.deprecated = d.experimental = function () { }; })(); (function () { var d = dojo; dojo.mixin(dojo, { _loadedModules: {}, _inFlightCount: 0, _hasResource: {}, _modulePrefixes: { dojo: { name: "dojo", value: "." }, doh: { name: "doh", value: "../util/doh" }, tests: { name: "tests", value: "tests"} }, _moduleHasPrefix: function (_25) { var mp = this._modulePrefixes; return !!(mp[_25] && mp[_25].value); }, _getModulePrefix: function (_27) { var mp = this._modulePrefixes; if (this._moduleHasPrefix(_27)) { return mp[_27].value; } return _27; }, _loadedUrls: [], _postLoad: false, _loaders: [], _unloaders: [], _loadNotifying: false }); dojo._loadPath = function (_29, _2a, cb) { var uri = (((_29.charAt(0) == "/" || _29.match(/^\w+:/))) ? "" : this.baseUrl) + _29; if (djConfig.cacheBust && d.isBrowser) { uri += "?" + String(djConfig.cacheBust).replace(/\W+/g, ""); } try { return !_2a ? this._loadUri(uri, cb) : this._loadUriAndCheck(uri, _2a, cb); } catch (e) { console.debug(e); return false; } }; dojo._loadUri = function (uri, cb) { if (this._loadedUrls[uri]) { return true; } var _2f = this._getText(uri, true); if (!_2f) { return false; } this._loadedUrls[uri] = true; this._loadedUrls.push(uri); if (cb) { _2f = "(" + _2f + ")"; } var _30 = d["eval"](_2f + "\r\n//@ sourceURL=" + uri); if (cb) { cb(_30); } return true; }; dojo._loadUriAndCheck = function (uri, _32, cb) { var ok = false; try { ok = this._loadUri(uri, cb); } catch (e) { console.debug("failed loading " + uri + " with error: " + e); } return Boolean(ok && this._loadedModules[_32]); }; dojo.loaded = function () { this._loadNotifying = true; this._postLoad = true; var mll = this._loaders; this._loaders = []; for (var x = 0; x < mll.length; x++) { mll[x](); } this._loadNotifying = false; if (d._postLoad && d._inFlightCount == 0 && this._loaders.length > 0) { d._callLoaded(); } }; dojo.unloaded = function () { var mll = this._unloaders; while (mll.length) { (mll.pop())(); } }; dojo.addOnLoad = function (obj, _39) { if (arguments.length == 1) { d._loaders.push(obj); } else { if (arguments.length > 1) { d._loaders.push(function () { obj[_39](); }); } } if (d._postLoad && d._inFlightCount == 0 && !d._loadNotifying) { d._callLoaded(); } }; dojo.addOnUnload = function (obj, _3b) { if (arguments.length == 1) { d._unloaders.push(obj); } else { if (arguments.length > 1) { d._unloaders.push(function () { obj[_3b](); }); } } }; dojo._modulesLoaded = function () { if (d._postLoad) { return; } if (d._inFlightCount > 0) { console.debug("files still in flight!"); return; } d._callLoaded(); }; dojo._callLoaded = function () { if (typeof setTimeout == "object" || (djConfig["useXDomain"] && d.isOpera)) { setTimeout("dojo.loaded();", 0); } else { d.loaded(); } }; dojo._getModuleSymbols = function (_3c) { var _3d = _3c.split("."); for (var i = _3d.length; i > 0; i--) { var _3f = _3d.slice(0, i).join("."); if ((i == 1) && !this._moduleHasPrefix(_3f)) { _3d[0] = "../" + _3d[0]; } else { var _40 = this._getModulePrefix(_3f); if (_40 != _3f) { _3d.splice(0, i, _40); break; } } } return _3d; }; dojo._global_omit_module_check = false; dojo._loadModule = dojo.require = function (_41, _42) { _42 = this._global_omit_module_check || _42; var _43 = this._loadedModules[_41]; if (_43) { return _43; } var _44 = this._getModuleSymbols(_41).join("/") + ".js"; var _45 = (!_42) ? _41 : null; var ok = this._loadPath(_44, _45); if ((!ok) && (!_42)) { throw new Error("Could not load '" + _41 + "'; last tried '" + _44 + "'"); } if ((!_42) && (!this["_isXDomain"])) { _43 = this._loadedModules[_41]; if (!_43) { throw new Error("symbol '" + _41 + "' is not defined after loading '" + _44 + "'"); } } return _43; }; dojo.provide = function (_47) { _47 = _47 + ""; return (d._loadedModules[_47] = d.getObject(_47, true)); }; dojo.platformRequire = function (_48) { var _49 = _48["common"] || []; var _4a = _49.concat(_48[d._name] || _48["default"] || []); for (var x = 0; x < _4a.length; x++) { var _4c = _4a[x]; if (_4c.constructor == Array) { d._loadModule.apply(d, _4c); } else { d._loadModule(_4c); } } }; dojo.requireIf = function (_4d, _4e) { if (_4d === true) { var _4f = []; for (var i = 1; i < arguments.length; i++) { _4f.push(arguments[i]); } d.require.apply(d, _4f); } }; dojo.requireAfterIf = d.requireIf; dojo.registerModulePath = function (_51, _52) { d._modulePrefixes[_51] = { name: _51, value: _52 }; }; dojo.requireLocalization = function (_53, _54, _55, _56) { d.require("dojo.i18n"); d.i18n._requireLocalization.apply(d.hostenv, arguments); }; var ore = new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"); var ire = new RegExp("^((([^:]+:)?([^@]+))@)?([^:]*)(:([0-9]+))?$"); dojo._Url = function () { var n = null; var _a = arguments; var uri = _a[0]; for (var i = 1; i < _a.length; i++) { if (!_a[i]) { continue; } var _5d = new d._Url(_a[i] + ""); var _5e = new d._Url(uri + ""); if ((_5d.path == "") && (!_5d.scheme) && (!_5d.authority) && (!_5d.query)) { if (_5d.fragment != n) { _5e.fragment = _5d.fragment; } _5d = _5e; } else { if (!_5d.scheme) { _5d.scheme = _5e.scheme; if (!_5d.authority) { _5d.authority = _5e.authority; if (_5d.path.charAt(0) != "/") { var _5f = _5e.path.substring(0, _5e.path.lastIndexOf("/") + 1) + _5d.path; var _60 = _5f.split("/"); for (var j = 0; j < _60.length; j++) { if (_60[j] == ".") { if (j == _60.length - 1) { _60[j] = ""; } else { _60.splice(j, 1); j--; } } else { if (j > 0 && !(j == 1 && _60[0] == "") && _60[j] == ".." && _60[j - 1] != "..") { if (j == (_60.length - 1)) { _60.splice(j, 1); _60[j - 1] = ""; } else { _60.splice(j - 1, 2); j -= 2; } } } } _5d.path = _60.join("/"); } } } } uri = ""; if (_5d.scheme) { uri += _5d.scheme + ":"; } if (_5d.authority) { uri += "//" + _5d.authority; } uri += _5d.path; if (_5d.query) { uri += "?" + _5d.query; } if (_5d.fragment) { uri += "#" + _5d.fragment; } } this.uri = uri.toString(); var r = this.uri.match(ore); this.scheme = r[2] || (r[1] ? "" : n); this.authority = r[4] || (r[3] ? "" : n); this.path = r[5]; this.query = r[7] || (r[6] ? "" : n); this.fragment = r[9] || (r[8] ? "" : n); if (this.authority != n) { r = this.authority.match(ire); this.user = r[3] || n; this.password = r[4] || n; this.host = r[5]; this.port = r[7] || n; } }; dojo._Url.prototype.toString = function () { return this.uri; }; dojo.moduleUrl = function (_63, url) { var loc = dojo._getModuleSymbols(_63).join("/"); if (!loc) { return null; } if (loc.lastIndexOf("/") != loc.length - 1) { loc += "/"; } var _66 = loc.indexOf(":"); if (loc.charAt(0) != "/" && (_66 == -1 || _66 > loc.indexOf("/"))) { loc = d.baseUrl + loc; } return new d._Url(loc, url); }; })(); if (typeof window != "undefined") { dojo.isBrowser = true; dojo._name = "browser"; (function () { var d = dojo; if (document && document.getElementsByTagName) { var _68 = document.getElementsByTagName("script"); var _69 = /dojo(\.xd)?\.js([\?\.]|$)/i; for (var i = 0; i < _68.length; i++) { var src = _68[i].getAttribute("src"); if (!src) { continue; } var m = src.match(_69); if (m) { if (!djConfig["baseUrl"]) { djConfig["baseUrl"] = src.substring(0, m.index); } var cfg = _68[i].getAttribute("djConfig"); if (cfg) { var _6e = eval("({ " + cfg + " })"); for (var x in _6e) { djConfig[x] = _6e[x]; } } break; } } } d.baseUrl = djConfig["baseUrl"]; var n = navigator; var dua = n.userAgent; var dav = n.appVersion; var tv = parseFloat(dav); d.isOpera = (dua.indexOf("Opera") >= 0) ? tv : 0; d.isKhtml = (dav.indexOf("Konqueror") >= 0) || (dav.indexOf("Safari") >= 0) ? tv : 0; if (dav.indexOf("Safari") >= 0) { var vi = dav.indexOf("Version/"); d.isSafari = (vi) ? parseFloat(dav.substring(vi + 8)) : 2; } var _75 = dua.indexOf("Gecko"); d.isMozilla = d.isMoz = ((_75 >= 0) && (!d.isKhtml)) ? tv : 0; d.isFF = 0; d.isIE = 0; try { if (d.isMoz) { d.isFF = parseFloat(dua.split("Firefox/")[1].split(" ")[0]); } if ((document.all) && (!d.isOpera)) { d.isIE = parseFloat(dav.split("MSIE ")[1].split(";")[0]); } } catch (e) { } if (dojo.isIE && (window.location.protocol === "file:")) { djConfig.ieForceActiveXXhr = true; } var cm = document["compatMode"]; d.isQuirks = (cm == "BackCompat") || (cm == "QuirksMode") || (d.isIE < 6); d.locale = djConfig.locale || (d.isIE ? n.userLanguage : n.language).toLowerCase(); d._println = console.debug; d._XMLHTTP_PROGIDS = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP", "Msxml2.XMLHTTP.4.0"]; d._xhrObj = function () { var _77 = null; var _78 = null; if (!dojo.isIE || !djConfig.ieForceActiveXXhr) { try { _77 = new XMLHttpRequest(); } catch (e) { } } if (!_77) { for (var i = 0; i < 3; ++i) { var _7a = dojo._XMLHTTP_PROGIDS[i]; try { _77 = new ActiveXObject(_7a); } catch (e) { _78 = e; } if (_77) { dojo._XMLHTTP_PROGIDS = [_7a]; break; } } } if (!_77) { throw new Error("XMLHTTP not available: " + _78); } return _77; }; d._isDocumentOk = function (_7b) { var _7c = _7b.status || 0; return ((_7c >= 200) && (_7c < 300)) || (_7c == 304) || (_7c == 1223) || (!_7c && (location.protocol == "file:" || location.protocol == "chrome:")); }; var _7d = window.location + ""; var _7e = document.getElementsByTagName("base"); var _7f = (_7e && _7e.length > 0); d._getText = function (uri, _81) { var _82 = this._xhrObj(); if (!_7f && dojo._Url) { uri = (new dojo._Url(_7d, uri)).toString(); } _82.open("GET", uri, false); try { _82.send(null); if (!d._isDocumentOk(_82)) { var err = Error("Unable to load " + uri + " status:" + _82.status); err.status = _82.status; err.responseText = _82.responseText; throw err; } } catch (e) { if (_81) { return null; } throw e; } return _82.responseText; }; })(); dojo._initFired = false; dojo._loadInit = function (e) { dojo._initFired = true; var _85 = (e && e.type) ? e.type.toLowerCase() : "load"; if (arguments.callee.initialized || (_85 != "domcontentloaded" && _85 != "load")) { return; } arguments.callee.initialized = true; if (typeof dojo["_khtmlTimer"] != "undefined") { clearInterval(dojo._khtmlTimer); delete dojo._khtmlTimer; } if (dojo._inFlightCount == 0) { dojo._modulesLoaded(); } }; if (document.addEventListener) { if (dojo.isOpera || (dojo.isMoz && (djConfig["enableMozDomContentLoaded"] === true))) { document.addEventListener("DOMContentLoaded", dojo._loadInit, null); } window.addEventListener("load", dojo._loadInit, null); } if (/(WebKit|khtml)/i.test(navigator.userAgent)) { dojo._khtmlTimer = setInterval(function () { if (/loaded|complete/.test(document.readyState)) { dojo._loadInit(); } }, 10); } (function () { var _w = window; var _87 = function (_88, fp) { var _8a = _w[_88] || function () { }; _w[_88] = function () { fp.apply(_w, arguments); _8a.apply(_w, arguments); }; }; if (dojo.isIE) { document.write("<scr" + "ipt defer src=\"//:\" " + "onreadystatechange=\"if(this.readyState=='complete'){dojo._loadInit();}\">" + "</scr" + "ipt>"); var _8b = true; _87("onbeforeunload", function () { _w.setTimeout(function () { _8b = false; }, 0); }); _87("onunload", function () { if (_8b) { dojo.unloaded(); } }); try { document.namespaces.add("v", "urn:schemas-microsoft-com:vml"); document.createStyleSheet().addRule("v\\:*", "behavior:url(#default#VML)"); } catch (e) { } } else { _87("onbeforeunload", function () { dojo.unloaded(); }); } })(); } if (djConfig.isDebug) { dojo.require("dojo._firebug.firebug"); } if (djConfig.debugAtAllCosts) { djConfig.useXDomain = true; dojo.require("dojo._base._loader.loader_xd"); dojo.require("dojo._base._loader.loader_debug"); dojo.require("dojo.i18n"); } } if (!dojo._hasResource["dojo._base.lang"]) { dojo._hasResource["dojo._base.lang"] = true; dojo.provide("dojo._base.lang"); dojo.isString = function (it) { return typeof it == "string" || it instanceof String; }; dojo.isArray = function (it) { return it && it instanceof Array || typeof it == "array"; }; dojo.isFunction = (function () { var _8e = function (it) { return typeof it == "function" || it instanceof Function; }; return dojo.isSafari ? function (it) { if (typeof it == "function" && it == "[object NodeList]") { return false; } return _8e(it); } : _8e; })(); dojo.isObject = function (it) { return it !== undefined && (it === null || typeof it == "object" || dojo.isArray(it) || dojo.isFunction(it)); }; dojo.isArrayLike = function (it) { var d = dojo; return it && it !== undefined && !d.isString(it) && !d.isFunction(it) && !(it.tagName && it.tagName.toLowerCase() == "form") && (d.isArray(it) || isFinite(it.length)); }; dojo.isAlien = function (it) { return it && !dojo.isFunction(it) && /\{\s*\[native code\]\s*\}/.test(String(it)); }; dojo.extend = function (_95, _96) { for (var i = 1, l = arguments.length; i < l; i++) { dojo._mixin(_95.prototype, arguments[i]); } return _95; }; dojo._hitchArgs = function (_99, _9a) { var pre = dojo._toArray(arguments, 2); var _9c = dojo.isString(_9a); return function () { var _9d = dojo._toArray(arguments); var f = _9c ? (_99 || dojo.global)[_9a] : _9a; return f && f.apply(_99 || this, pre.concat(_9d)); }; }; dojo.hitch = function (_9f, _a0) { if (arguments.length > 2) { return dojo._hitchArgs.apply(dojo, arguments); } if (!_a0) { _a0 = _9f; _9f = null; } if (dojo.isString(_a0)) { _9f = _9f || dojo.global; if (!_9f[_a0]) { throw (["dojo.hitch: scope[\"", _a0, "\"] is null (scope=\"", _9f, "\")"].join("")); } return function () { return _9f[_a0].apply(_9f, arguments || []); }; } return !_9f ? _a0 : function () { return _a0.apply(_9f, arguments || []); }; }; dojo.delegate = dojo._delegate = function (obj, _a2) { function TMP() { }; TMP.prototype = obj; var tmp = new TMP(); if (_a2) { dojo.mixin(tmp, _a2); } return tmp; }; dojo.partial = function (_a4) { var arr = [null]; return dojo.hitch.apply(dojo, arr.concat(dojo._toArray(arguments))); }; dojo._toArray = function (obj, _a7, _a8) { var arr = _a8 || []; for (var x = _a7 || 0; x < obj.length; x++) { arr.push(obj[x]); } return arr; }; dojo.clone = function (o) { if (!o) { return o; } if (dojo.isArray(o)) { var r = []; for (var i = 0; i < o.length; ++i) { r.push(dojo.clone(o[i])); } return r; } else { if (dojo.isObject(o)) { if (o.nodeType && o.cloneNode) { return o.cloneNode(true); } else { var r = new o.constructor(); for (var i in o) { if (!(i in r) || r[i] != o[i]) { r[i] = dojo.clone(o[i]); } } return r; } } } return o; }; dojo.trim = function (str) { return str.replace(/^\s\s*/, "").replace(/\s\s*$/, ""); }; } if (!dojo._hasResource["dojo._base.declare"]) { dojo._hasResource["dojo._base.declare"] = true; dojo.provide("dojo._base.declare"); dojo.declare = function (_af, _b0, _b1) { if (dojo.isFunction(_b1) || (arguments.length > 3)) { dojo.deprecated("dojo.declare: for class '" + _af + "' pass initializer function as 'constructor' property instead of as a separate argument.", "", "1.0"); var c = _b1; _b1 = arguments[3] || {}; _b1.constructor = c; } var dd = arguments.callee, _b4 = null; if (dojo.isArray(_b0)) { _b4 = _b0; _b0 = _b4.shift(); } if (_b4) { for (var i = 0, m; i < _b4.length; i++) { m = _b4[i]; if (!m) { throw ("Mixin #" + i + " to declaration of " + _af + " is null. It's likely a required module is not loaded."); } _b0 = dd._delegate(_b0, m); } } var _b7 = (_b1 || 0).constructor, _b8 = dd._delegate(_b0), fn; for (var i in _b1) { if (dojo.isFunction(fn = _b1[i]) && (!0[i])) { fn.nom = i; } } dojo.extend(_b8, { declaredClass: _af, _constructor: _b7, preamble: null }, _b1 || 0); _b8.prototype.constructor = _b8; return dojo.setObject(_af, _b8); }; dojo.mixin(dojo.declare, { _delegate: function (_ba, _bb) { var bp = (_ba || 0).prototype, mp = (_bb || 0).prototype; var _be = dojo.declare._makeCtor(); dojo.mixin(_be, { superclass: bp, mixin: mp, extend: dojo.declare._extend }); if (_ba) { _be.prototype = dojo._delegate(bp); } dojo.extend(_be, dojo.declare._core, mp || 0, { _constructor: null, preamble: null }); _be.prototype.constructor = _be; _be.prototype.declaredClass = (bp || 0).declaredClass + "_" + (mp || 0).declaredClass; return _be; }, _extend: function (_bf) { for (var i in _bf) { if (dojo.isFunction(fn = _bf[i]) && (!0[i])) { fn.nom = i; } } dojo.extend(this, _bf); }, _makeCtor: function () { return function () { this._construct(arguments); }; }, _core: { _construct: function (_c1) { var c = _c1.callee, s = c.superclass, ct = s && s.constructor, m = c.mixin, mct = m && m.constructor, a = _c1, ii, fn; if (a[0]) { if ((fn = a[0]["preamble"])) { a = fn.apply(this, a) || a; } } if (fn = c.prototype.preamble) { a = fn.apply(this, a) || a; } if (ct && ct.apply) { ct.apply(this, a); } if (mct && mct.apply) { mct.apply(this, a); } if (ii = c.prototype._constructor) { ii.apply(this, _c1); } if (this.constructor.prototype == c.prototype && (ct = this.postscript)) { ct.apply(this, _c1); } }, _findMixin: function (_ca) { var c = this.constructor, p, m; while (c) { p = c.superclass; m = c.mixin; if (m == _ca || (m instanceof _ca.constructor)) { return p; } if (m && (m = m._findMixin(_ca))) { return m; } c = p && p.constructor; } }, _findMethod: function (_ce, _cf, _d0, has) { var p = _d0, c, m, f; do { c = p.constructor; m = c.mixin; if (m && (m = this._findMethod(_ce, _cf, m, has))) { return m; } if ((f = p[_ce]) && (has == (f == _cf))) { return p; } p = c.superclass; } while (p); return !has && (p = this._findMixin(_d0)) && this._findMethod(_ce, _cf, p, has); }, inherited: function (_d6, _d7, _d8) { var a = arguments; if (!dojo.isString(a[0])) { _d8 = _d7; _d7 = _d6; _d6 = _d7.callee.nom; } var c = _d7.callee, p = this.constructor.prototype, a = _d8 || _d7, fn, mp; if (this[_d6] != c || p[_d6] == c) { mp = this._findMethod(_d6, c, p, true); if (!mp) { throw (this.declaredClass + ": name argument (\"" + _d6 + "\") to inherited must match callee (declare.js)"); } p = this._findMethod(_d6, c, mp, false); } fn = p && p[_d6]; if (!fn) { console.debug(mp.declaredClass + ": no inherited \"" + _d6 + "\" was found (declare.js)"); return; } return fn.apply(this, a); } } }); } if (!dojo._hasResource["dojo._base.connect"]) { dojo._hasResource["dojo._base.connect"] = true; dojo.provide("dojo._base.connect"); dojo._listener = { getDispatcher: function () { return function () { var ap = Array.prototype, c = arguments.callee, ls = c._listeners, t = c.target; var r = t && t.apply(this, arguments); for (var i in ls) { if (!(i in ap)) { ls[i].apply(this, arguments); } } return r; }; }, add: function (_e4, _e5, _e6) { _e4 = _e4 || dojo.global; var f = _e4[_e5]; if (!f || !f._listeners) { var d = dojo._listener.getDispatcher(); d.target = f; d._listeners = []; f = _e4[_e5] = d; } return f._listeners.push(_e6); }, remove: function (_e9, _ea, _eb) { var f = (_e9 || dojo.global)[_ea]; if (f && f._listeners && _eb--) { delete f._listeners[_eb]; } } }; dojo.connect = function (obj, _ee, _ef, _f0, _f1) { var a = arguments, _f3 = [], i = 0; _f3.push(dojo.isString(a[0]) ? null : a[i++], a[i++]); var a1 = a[i + 1]; _f3.push(dojo.isString(a1) || dojo.isFunction(a1) ? a[i++] : null, a[i++]); for (var l = a.length; i < l; i++) { _f3.push(a[i]); } return dojo._connect.apply(this, _f3); }; dojo._connect = function (obj, _f8, _f9, _fa) { var l = dojo._listener, h = l.add(obj, _f8, dojo.hitch(_f9, _fa)); return [obj, _f8, h, l]; }; dojo.disconnect = function (_fd) { if (_fd && _fd[0] !== undefined) { dojo._disconnect.apply(this, _fd); delete _fd[0]; } }; dojo._disconnect = function (obj, _ff, _100, _101) { _101.remove(obj, _ff, _100); }; dojo._topics = {}; dojo.subscribe = function (_102, _103, _104) { return [_102, dojo._listener.add(dojo._topics, _102, dojo.hitch(_103, _104))]; }; dojo.unsubscribe = function (_105) { if (_105) { dojo._listener.remove(dojo._topics, _105[0], _105[1]); } }; dojo.publish = function (_106, args) { var f = dojo._topics[_106]; if (f) { f.apply(this, args || []); } }; dojo.connectPublisher = function (_109, obj, _10b) { var pf = function () { dojo.publish(_109, arguments); }; return (_10b) ? dojo.connect(obj, _10b, pf) : dojo.connect(obj, pf); }; } if (!dojo._hasResource["dojo._base.Deferred"]) { dojo._hasResource["dojo._base.Deferred"] = true; dojo.provide("dojo._base.Deferred"); dojo.Deferred = function (_10d) { this.chain = []; this.id = this._nextId(); this.fired = -1; this.paused = 0; this.results = [null, null]; this.canceller = _10d; this.silentlyCancelled = false; }; dojo.extend(dojo.Deferred, { _nextId: (function () { var n = 1; return function () { return n++; }; })(), cancel: function () { var err; if (this.fired == -1) { if (this.canceller) { err = this.canceller(this); } else { this.silentlyCancelled = true; } if (this.fired == -1) { if (!(err instanceof Error)) { var res = err; err = new Error("Deferred Cancelled"); err.dojoType = "cancel"; err.cancelResult = res; } this.errback(err); } } else { if ((this.fired == 0) && (this.results[0] instanceof dojo.Deferred)) { this.results[0].cancel(); } } }, _resback: function (res) { this.fired = ((res instanceof Error) ? 1 : 0); this.results[this.fired] = res; this._fire(); }, _check: function () { if (this.fired != -1) { if (!this.silentlyCancelled) { throw new Error("already called!"); } this.silentlyCancelled = false; return; } }, callback: function (res) { this._check(); this._resback(res); }, errback: function (res) { this._check(); if (!(res instanceof Error)) { res = new Error(res); } this._resback(res); }, addBoth: function (cb, cbfn) { var _116 = dojo.hitch(cb, cbfn); if (arguments.length > 2) { _116 = dojo.partial(_116, arguments, 2); } return this.addCallbacks(_116, _116); }, addCallback: function (cb, cbfn) { var _119 = dojo.hitch(cb, cbfn); if (arguments.length > 2) { _119 = dojo.partial(_119, arguments, 2); } return this.addCallbacks(_119, null); }, addErrback: function (cb, cbfn) { var _11c = dojo.hitch(cb, cbfn); if (arguments.length > 2) { _11c = dojo.partial(_11c, arguments, 2); } return this.addCallbacks(null, _11c); }, addCallbacks: function (cb, eb) { this.chain.push([cb, eb]); if (this.fired >= 0) { this._fire(); } return this; }, _fire: function () { var _11f = this.chain; var _120 = this.fired; var res = this.results[_120]; var self = this; var cb = null; while ((_11f.length > 0) && (this.paused == 0)) { var f = _11f.shift()[_120]; if (!f) { continue; } try { res = f(res); _120 = ((res instanceof Error) ? 1 : 0); if (res instanceof dojo.Deferred) { cb = function (res) { self._resback(res); self.paused--; if ((self.paused == 0) && (self.fired >= 0)) { self._fire(); } }; this.paused++; } } catch (err) { console.debug(err); _120 = 1; res = err; } } this.fired = _120; this.results[_120] = res; if ((cb) && (this.paused)) { res.addBoth(cb); } } }); } if (!dojo._hasResource["dojo._base.json"]) { dojo._hasResource["dojo._base.json"] = true; dojo.provide("dojo._base.json"); dojo.fromJson = function (json) { try { return eval("(" + json + ")"); } catch (e) { console.debug(e); return json; } }; dojo._escapeString = function (str) { return ("\"" + str.replace(/(["\\])/g, "\\$1") + "\"").replace(/[\f]/g, "\\f").replace(/[\b]/g, "\\b").replace(/[\n]/g, "\\n").replace(/[\t]/g, "\\t").replace(/[\r]/g, "\\r"); }; dojo.toJsonIndentStr = "\t"; dojo.toJson = function (it, _129, _12a) { _12a = _12a || ""; var _12b = (_129 ? _12a + dojo.toJsonIndentStr : ""); var _12c = (_129 ? "\n" : ""); var _12d = typeof (it); if (_12d == "undefined") { return "undefined"; } else { if ((_12d == "number") || (_12d == "boolean")) { return it + ""; } else { if (it === null) { return "null"; } } } if (dojo.isString(it)) { return dojo._escapeString(it); } if (it.nodeType && it.cloneNode) { return ""; } var _12e = arguments.callee; var _12f; if (typeof it.__json__ == "function") { _12f = it.__json__(); if (it !== _12f) { return _12e(_12f, _129, _12b); } } if (typeof it.json == "function") { _12f = it.json(); if (it !== _12f) { return _12e(_12f, _129, _12b); } } if (dojo.isArray(it)) { var res = []; for (var i = 0; i < it.length; i++) { var val = _12e(it[i], _129, _12b); if (typeof (val) != "string") { val = "undefined"; } res.push(_12c + _12b + val); } return "[" + res.join(", ") + _12c + _12a + "]"; } if (_12d == "function") { return null; } var _133 = []; for (var key in it) { var _135; if (typeof (key) == "number") { _135 = "\"" + key + "\""; } else { if (typeof (key) == "string") { _135 = dojo._escapeString(key); } else { continue; } } val = _12e(it[key], _129, _12b); if (typeof (val) != "string") { continue; } _133.push(_12c + _12b + _135 + ": " + val); } return "{" + _133.join(", ") + _12c + _12a + "}"; }; } if (!dojo._hasResource["dojo._base.array"]) { dojo._hasResource["dojo._base.array"] = true; dojo.provide("dojo._base.array"); (function () { var _136 = function (arr, obj, cb) { return [(dojo.isString(arr) ? arr.split("") : arr), (obj || dojo.global), (dojo.isString(cb) ? (new Function("item", "index", "array", cb)) : cb)]; }; dojo.mixin(dojo, { indexOf: function (_13a, _13b, _13c, _13d) { var i = 0, step = 1, end = _13a.length; if (_13d) { i = end - 1; step = end = -1; } for (i = _13c || i; i != end; i += step) { if (_13a[i] == _13b) { return i; } } return -1; }, lastIndexOf: function (_141, _142, _143) { return dojo.indexOf(_141, _142, _143, true); }, forEach: function (arr, _145, obj) { if (!arr || !arr.length) { return; } var _p = _136(arr, obj, _145); arr = _p[0]; for (var i = 0, l = _p[0].length; i < l; i++) { _p[2].call(_p[1], arr[i], i, arr); } }, _everyOrSome: function (_14a, arr, _14c, obj) { var _p = _136(arr, obj, _14c); arr = _p[0]; for (var i = 0, l = arr.length; i < l; i++) { var _151 = !!_p[2].call(_p[1], arr[i], i, arr); if (_14a ^ _151) { return _151; } } return _14a; }, every: function (arr, _153, _154) { return this._everyOrSome(true, arr, _153, _154); }, some: function (arr, _156, _157) { return this._everyOrSome(false, arr, _156, _157); }, map: function (arr, func, obj) { var _p = _136(arr, obj, func); arr = _p[0]; var _15c = ((arguments[3]) ? (new arguments[3]()) : []); for (var i = 0; i < arr.length; ++i) { _15c.push(_p[2].call(_p[1], arr[i], i, arr)); } return _15c; }, filter: function (arr, _15f, obj) { var _p = _136(arr, obj, _15f); arr = _p[0]; var _162 = []; for (var i = 0; i < arr.length; i++) { if (_p[2].call(_p[1], arr[i], i, arr)) { _162.push(arr[i]); } } return _162; } }); })(); } if (!dojo._hasResource["dojo._base.Color"]) { dojo._hasResource["dojo._base.Color"] = true; dojo.provide("dojo._base.Color"); dojo.Color = function (_164) { if (_164) { this.setColor(_164); } }; dojo.Color.named = { black: [0, 0, 0], silver: [192, 192, 192], gray: [128, 128, 128], white: [255, 255, 255], maroon: [128, 0, 0], red: [255, 0, 0], purple: [128, 0, 128], fuchsia: [255, 0, 255], green: [0, 128, 0], lime: [0, 255, 0], olive: [128, 128, 0], yellow: [255, 255, 0], navy: [0, 0, 128], blue: [0, 0, 255], teal: [0, 128, 128], aqua: [0, 255, 255] }; dojo.extend(dojo.Color, { r: 255, g: 255, b: 255, a: 1, _set: function (r, g, b, a) { var t = this; t.r = r; t.g = g; t.b = b; t.a = a; }, setColor: function (_16a) { var d = dojo; if (d.isString(_16a)) { d.colorFromString(_16a, this); } else { if (d.isArray(_16a)) { d.colorFromArray(_16a, this); } else { this._set(_16a.r, _16a.g, _16a.b, _16a.a); if (!(_16a instanceof d.Color)) { this.sanitize(); } } } return this; }, sanitize: function () { return this; }, toRgb: function () { var t = this; return [t.r, t.g, t.b]; }, toRgba: function () { var t = this; return [t.r, t.g, t.b, t.a]; }, toHex: function () { var arr = dojo.map(["r", "g", "b"], function (x) { var s = this[x].toString(16); return s.length < 2 ? "0" + s : s; }, this); return "#" + arr.join(""); }, toCss: function (_171) { var t = this, rgb = t.r + ", " + t.g + ", " + t.b; return (_171 ? "rgba(" + rgb + ", " + t.a : "rgb(" + rgb) + ")"; }, toString: function () { return this.toCss(true); } }); dojo.blendColors = function (_174, end, _176, obj) { var d = dojo, t = obj || new dojo.Color(); d.forEach(["r", "g", "b", "a"], function (x) { t[x] = _174[x] + (end[x] - _174[x]) * _176; if (x != "a") { t[x] = Math.round(t[x]); } }); return t.sanitize(); }; dojo.colorFromRgb = function (_17b, obj) { var m = _17b.toLowerCase().match(/^rgba?\(([\s\.,0-9]+)\)/); return m && dojo.colorFromArray(m[1].split(/\s*,\s*/), obj); }; dojo.colorFromHex = function (_17e, obj) { var d = dojo, t = obj || new d.Color(), bits = (_17e.length == 4) ? 4 : 8, mask = (1 << bits) - 1; _17e = Number("0x" + _17e.substr(1)); if (isNaN(_17e)) { return null; } d.forEach(["b", "g", "r"], function (x) { var c = _17e & mask; _17e >>= bits; t[x] = bits == 4 ? 17 * c : c; }); t.a = 1; return t; }; dojo.colorFromArray = function (a, obj) { var t = obj || new dojo.Color(); t._set(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3])); if (isNaN(t.a)) { t.a = 1; } return t.sanitize(); }; dojo.colorFromString = function (str, obj) { var a = dojo.Color.named[str]; return a && dojo.colorFromArray(a, obj) || dojo.colorFromRgb(str, obj) || dojo.colorFromHex(str, obj); }; } if (!dojo._hasResource["dojo._base"]) { dojo._hasResource["dojo._base"] = true; dojo.provide("dojo._base"); (function () { if (djConfig.require) { for (var x = 0; x < djConfig.require.length; x++) { dojo["require"](djConfig.require[x]); } } })(); } if (!dojo._hasResource["dojo._base.window"]) { dojo._hasResource["dojo._base.window"] = true; dojo.provide("dojo._base.window"); dojo._gearsObject = function () { var _18d; var _18e; var _18f = dojo.getObject("google.gears"); if (_18f) { return _18f; } if (typeof GearsFactory != "undefined") { _18d = new GearsFactory(); } else { if (dojo.isIE) { try { _18d = new ActiveXObject("Gears.Factory"); } catch (e) { } } else { if (navigator.mimeTypes["application/x-googlegears"]) { _18d = document.createElement("object"); _18d.setAttribute("type", "application/x-googlegears"); _18d.setAttribute("width", 0); _18d.setAttribute("height", 0); _18d.style.display = "none"; document.documentElement.appendChild(_18d); } } } if (!_18d) { return null; } dojo.setObject("google.gears.factory", _18d); return dojo.getObject("google.gears"); }; dojo.isGears = (!!dojo._gearsObject()) || 0; dojo.doc = window["document"] || null; dojo.body = function () { return dojo.doc.body || dojo.doc.getElementsByTagName("body")[0]; }; dojo.setContext = function (_190, _191) { dojo.global = _190; dojo.doc = _191; }; dojo._fireCallback = function (_192, _193, _194) { if (_193 && dojo.isString(_192)) { _192 = _193[_192]; } return (_193 ? _192.apply(_193, _194 || []) : _192()); }; dojo.withGlobal = function (_195, _196, _197, _198) { var rval; var _19a = dojo.global; var _19b = dojo.doc; try { dojo.setContext(_195, _195.document); rval = dojo._fireCallback(_196, _197, _198); } finally { dojo.setContext(_19a, _19b); } return rval; }; dojo.withDoc = function (_19c, _19d, _19e, _19f) { var rval; var _1a1 = dojo.doc; try { dojo.doc = _19c; rval = dojo._fireCallback(_19d, _19e, _19f); } finally { dojo.doc = _1a1; } return rval; }; (function () { var mp = djConfig["modulePaths"]; if (mp) { for (var _1a3 in mp) { dojo.registerModulePath(_1a3, mp[_1a3]); } } })(); } if (!dojo._hasResource["dojo._base.event"]) { dojo._hasResource["dojo._base.event"] = true; dojo.provide("dojo._base.event"); (function () { var del = dojo._event_listener = { add: function (node, name, fp) { if (!node) { return; } name = del._normalizeEventName(name); fp = del._fixCallback(name, fp); var _1a8 = name; if ((!dojo.isIE) && ((name == "mouseenter") || (name == "mouseleave"))) { var _1a8 = name; var ofp = fp; name = (name == "mouseenter") ? "mouseover" : "mouseout"; fp = function (e) { var id = dojo.isDescendant(e.relatedTarget, node); if (id == false) { return ofp.call(this, e); } }; } node.addEventListener(name, fp, false); return fp; }, remove: function (node, _1ad, _1ae) { (node) && (node.removeEventListener(del._normalizeEventName(_1ad), _1ae, false)); }, _normalizeEventName: function (name) { return (name.slice(0, 2) == "on" ? name.slice(2) : name); }, _fixCallback: function (name, fp) { return (name != "keypress" ? fp : function (e) { return fp.call(this, del._fixEvent(e, this)); }); }, _fixEvent: function (evt, _1b4) { switch (evt.type) { case "keypress": del._setKeyChar(evt); break; } return evt; }, _setKeyChar: function (evt) { evt.keyChar = (evt.charCode ? String.fromCharCode(evt.charCode) : ""); } }; dojo.fixEvent = function (evt, _1b7) { return del._fixEvent(evt, _1b7); }; dojo.stopEvent = function (evt) { evt.preventDefault(); evt.stopPropagation(); }; var _1b9 = dojo._listener; dojo._connect = function (obj, _1bb, _1bc, _1bd, _1be) { var _1bf = obj && (obj.nodeType || obj.attachEvent || obj.addEventListener); var lid = !_1bf ? 0 : (!_1be ? 1 : 2), l = [dojo._listener, del, _1b9][lid]; var h = l.add(obj, _1bb, dojo.hitch(_1bc, _1bd)); return [obj, _1bb, h, lid]; }; dojo._disconnect = function (obj, _1c4, _1c5, _1c6) { ([dojo._listener, del, _1b9][_1c6]).remove(obj, _1c4, _1c5); }; dojo.keys = { BACKSPACE: 8, TAB: 9, CLEAR: 12, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, PAUSE: 19, CAPS_LOCK: 20, ESCAPE: 27, SPACE: 32, PAGE_UP: 33, PAGE_DOWN: 34, END: 35, HOME: 36, LEFT_ARROW: 37, UP_ARROW: 38, RIGHT_ARROW: 39, DOWN_ARROW: 40, INSERT: 45, DELETE: 46, HELP: 47, LEFT_WINDOW: 91, RIGHT_WINDOW: 92, SELECT: 93, NUMPAD_0: 96, NUMPAD_1: 97, NUMPAD_2: 98, NUMPAD_3: 99, NUMPAD_4: 100, NUMPAD_5: 101, NUMPAD_6: 102, NUMPAD_7: 103, NUMPAD_8: 104, NUMPAD_9: 105, NUMPAD_MULTIPLY: 106, NUMPAD_PLUS: 107, NUMPAD_ENTER: 108, NUMPAD_MINUS: 109, NUMPAD_PERIOD: 110, NUMPAD_DIVIDE: 111, F1: 112, F2: 113, F3: 114, F4: 115, F5: 116, F6: 117, F7: 118, F8: 119, F9: 120, F10: 121, F11: 122, F12: 123, F13: 124, F14: 125, F15: 126, NUM_LOCK: 144, SCROLL_LOCK: 145 }; if (dojo.isIE) { var _1c7 = function (e, code) { try { return (e.keyCode = code); } catch (e) { return 0; } }; var iel = dojo._listener; if (!djConfig._allow_leaks) { _1b9 = iel = dojo._ie_listener = { handlers: [], add: function (_1cb, _1cc, _1cd) { _1cb = _1cb || dojo.global; var f = _1cb[_1cc]; if (!f || !f._listeners) { var d = dojo._getIeDispatcher(); d.target = f && (ieh.push(f) - 1); d._listeners = []; f = _1cb[_1cc] = d; } return f._listeners.push(ieh.push(_1cd) - 1); }, remove: function (_1d1, _1d2, _1d3) { var f = (_1d1 || dojo.global)[_1d2], l = f && f._listeners; if (f && l && _1d3--) { delete ieh[l[_1d3]]; delete l[_1d3]; } } }; var ieh = iel.handlers; } dojo.mixin(del, { add: function (node, _1d7, fp) { if (!node) { return; } _1d7 = del._normalizeEventName(_1d7); if (_1d7 == "onkeypress") { var kd = node.onkeydown; if (!kd || !kd._listeners || !kd._stealthKeydown) { del.add(node, "onkeydown", del._stealthKeyDown); node.onkeydown._stealthKeydown = true; } } return iel.add(node, _1d7, del._fixCallback(fp)); }, remove: function (node, _1db, _1dc) { iel.remove(node, del._normalizeEventName(_1db), _1dc); }, _normalizeEventName: function (_1dd) { return (_1dd.slice(0, 2) != "on" ? "on" + _1dd : _1dd); }, _nop: function () { }, _fixEvent: function (evt, _1df) { if (!evt) { var w = (_1df) && ((_1df.ownerDocument || _1df.document || _1df).parentWindow) || window; evt = w.event; } if (!evt) { return (evt); } evt.target = evt.srcElement; evt.currentTarget = (_1df || evt.srcElement); evt.layerX = evt.offsetX; evt.layerY = evt.offsetY; var se = evt.srcElement, doc = (se && se.ownerDocument) || document; var _1e3 = ((dojo.isIE < 6) || (doc["compatMode"] == "BackCompat")) ? doc.body : doc.documentElement; var _1e4 = dojo._getIeDocumentElementOffset(); evt.pageX = evt.clientX + dojo._fixIeBiDiScrollLeft(_1e3.scrollLeft || 0) - _1e4.x; evt.pageY = evt.clientY + (_1e3.scrollTop || 0) - _1e4.y; if (evt.type == "mouseover") { evt.relatedTarget = evt.fromElement; } if (evt.type == "mouseout") { evt.relatedTarget = evt.toElement; } evt.stopPropagation = del._stopPropagation; evt.preventDefault = del._preventDefault; return del._fixKeys(evt); }, _fixKeys: function (evt) { switch (evt.type) { case "keypress": var c = ("charCode" in evt ? evt.charCode : evt.keyCode); if (c == 10) { c = 0; evt.keyCode = 13; } else { if (c == 13 || c == 27) { c = 0; } else { if (c == 3) { c = 99; } } } evt.charCode = c; del._setKeyChar(evt); break; } return evt; }, _punctMap: { 106: 42, 111: 47, 186: 59, 187: 43, 188: 44, 189: 45, 190: 46, 191: 47, 192: 96, 219: 91, 220: 92, 221: 93, 222: 39 }, _stealthKeyDown: function (evt) { var kp = evt.currentTarget.onkeypress; if (!kp || !kp._listeners) { return; } var k = evt.keyCode; var _1ea = (k != 13) && (k != 32) && (k != 27) && (k < 48 || k > 90) && (k < 96 || k > 111) && (k < 186 || k > 192) && (k < 219 || k > 222); if (_1ea || evt.ctrlKey) { var c = (_1ea ? 0 : k); if (evt.ctrlKey) { if (k == 3 || k == 13) { return; } else { if (c > 95 && c < 106) { c -= 48; } else { if ((!evt.shiftKey) && (c >= 65 && c <= 90)) { c += 32; } else { c = del._punctMap[c] || c; } } } } var faux = del._synthesizeEvent(evt, { type: "keypress", faux: true, charCode: c }); kp.call(evt.currentTarget, faux); evt.cancelBubble = faux.cancelBubble; evt.returnValue = faux.returnValue; _1c7(evt, faux.keyCode); } }, _stopPropagation: function () { this.cancelBubble = true; }, _preventDefault: function () { this.bubbledKeyCode = this.keyCode; if (this.ctrlKey) { _1c7(this, 0); } this.returnValue = false; } }); dojo.stopEvent = function (evt) { evt = evt || window.event; del._stopPropagation.call(evt); del._preventDefault.call(evt); }; } del._synthesizeEvent = function (evt, _1ef) { var faux = dojo.mixin({}, evt, _1ef); del._setKeyChar(faux); faux.preventDefault = function () { evt.preventDefault(); }; faux.stopPropagation = function () { evt.stopPropagation(); }; return faux; }; if (dojo.isOpera) { dojo.mixin(del, { _fixEvent: function (evt, _1f2) { switch (evt.type) { case "keypress": var c = evt.which; if (c == 3) { c = 99; } c = ((c < 41) && (!evt.shiftKey) ? 0 : c); if ((evt.ctrlKey) && (!evt.shiftKey) && (c >= 65) && (c <= 90)) { c += 32; } return del._synthesizeEvent(evt, { charCode: c }); } return evt; } }); } if (dojo.isSafari) { dojo.mixin(del, { _fixEvent: function (evt, _1f5) { switch (evt.type) { case "keypress": var c = evt.charCode, s = evt.shiftKey, k = evt.keyCode; k = k || _1f9[evt.keyIdentifier] || 0; if (evt.keyIdentifier == "Enter") { c = 0; } else { if ((evt.ctrlKey) && (c > 0) && (c < 27)) { c += 96; } else { if (c == dojo.keys.SHIFT_TAB) { c = dojo.keys.TAB; s = true; } else { c = (c >= 32 && c < 63232 ? c : 0); } } } return del._synthesizeEvent(evt, { charCode: c, shiftKey: s, keyCode: k }); } return evt; } }); dojo.mixin(dojo.keys, { SHIFT_TAB: 25, UP_ARROW: 63232, DOWN_ARROW: 63233, LEFT_ARROW: 63234, RIGHT_ARROW: 63235, F1: 63236, F2: 63237, F3: 63238, F4: 63239, F5: 63240, F6: 63241, F7: 63242, F8: 63243, F9: 63244, F10: 63245, F11: 63246, F12: 63247, PAUSE: 63250, DELETE: 63272, HOME: 63273, END: 63275, PAGE_UP: 63276, PAGE_DOWN: 63277, INSERT: 63302, PRINT_SCREEN: 63248, SCROLL_LOCK: 63249, NUM_LOCK: 63289 }); var dk = dojo.keys, _1f9 = { "Up": dk.UP_ARROW, "Down": dk.DOWN_ARROW, "Left": dk.LEFT_ARROW, "Right": dk.RIGHT_ARROW, "PageUp": dk.PAGE_UP, "PageDown": dk.PAGE_DOWN }; } })(); if (dojo.isIE) { dojo._getIeDispatcher = function () { return function () { var ap = Array.prototype, h = dojo._ie_listener.handlers, c = arguments.callee, ls = c._listeners, t = h[c.target]; var r = t && t.apply(this, arguments); for (var i in ls) { if (!(i in ap)) { h[ls[i]].apply(this, arguments); } } return r; }; }; dojo._event_listener._fixCallback = function (fp) { var f = dojo._event_listener._fixEvent; return function (e) { return fp.call(this, f(e, this)); }; }; } } if (!dojo._hasResource["dojo._base.html"]) { dojo._hasResource["dojo._base.html"] = true; dojo.provide("dojo._base.html"); try { document.execCommand("BackgroundImageCache", false, true); } catch (e) { } if (dojo.isIE || dojo.isOpera) { dojo.byId = function (id, doc) { if (dojo.isString(id)) { var _d = doc || dojo.doc; var te = _d.getElementById(id); if (te && te.attributes.id.value == id) { return te; } else { var eles = _d.all[id]; if (!eles) { return; } if (!eles.length) { return eles; } var i = 0; while ((te = eles[i++])) { if (te.attributes.id.value == id) { return te; } } } } else { return id; } }; } else { dojo.byId = function (id, doc) { if (dojo.isString(id)) { return (doc || dojo.doc).getElementById(id); } else { return id; } }; } (function () { var _20d = null; dojo._destroyElement = function (node) { node = dojo.byId(node); try { if (!_20d) { _20d = document.createElement("div"); } _20d.appendChild(node.parentNode ? node.parentNode.removeChild(node) : node); _20d.innerHTML = ""; } catch (e) { } }; dojo.isDescendant = function (node, _210) { try { node = dojo.byId(node); _210 = dojo.byId(_210); while (node) { if (node === _210) { return true; } node = node.parentNode; } } catch (e) { return -1; } return false; }; dojo.setSelectable = function (node, _212) { node = dojo.byId(node); if (dojo.isMozilla) { node.style.MozUserSelect = _212 ? "" : "none"; } else { if (dojo.isKhtml) { node.style.KhtmlUserSelect = _212 ? "auto" : "none"; } else { if (dojo.isIE) { node.unselectable = _212 ? "" : "on"; dojo.query("*", node).forEach(function (_213) { _213.unselectable = _212 ? "" : "on"; }); } } } }; var _214 = function (node, ref) { ref.parentNode.insertBefore(node, ref); return true; }; var _217 = function (node, ref) { var pn = ref.parentNode; if (ref == pn.lastChild) { pn.appendChild(node); } else { return _214(node, ref.nextSibling); } return true; }; dojo.place = function (node, _21c, _21d) { if (!node || !_21c || _21d === undefined) { return false; } node = dojo.byId(node); _21c = dojo.byId(_21c); if (typeof _21d == "number") { var cn = _21c.childNodes; if ((_21d == 0 && cn.length == 0) || cn.length == _21d) { _21c.appendChild(node); return true; } if (_21d == 0) { return _214(node, _21c.firstChild); } return _217(node, cn[_21d - 1]); } switch (_21d.toLowerCase()) { case "before": return _214(node, _21c); case "after": return _217(node, _21c); case "first": if (_21c.firstChild) { return _214(node, _21c.firstChild); } else { _21c.appendChild(node); return true; } break; default: _21c.appendChild(node); return true; } }; dojo.boxModel = "content-box"; if (dojo.isIE) { var _dcm = document.compatMode; dojo.boxModel = (_dcm == "BackCompat") || (_dcm == "QuirksMode") || (dojo.isIE < 6) ? "border-box" : "content-box"; } var gcs, dv = document.defaultView; if (dojo.isSafari) { gcs = function (node) { var s = dv.getComputedStyle(node, null); if (!s && node.style) { node.style.display = ""; s = dv.getComputedStyle(node, null); } return s || {}; }; } else { if (dojo.isIE) { gcs = function (node) { return node.currentStyle; }; } else { gcs = function (node) { return dv.getComputedStyle(node, null); }; } } dojo.getComputedStyle = gcs; if (!dojo.isIE) { dojo._toPixelValue = function (_226, _227) { return parseFloat(_227) || 0; }; } else { dojo._toPixelValue = function (_228, _229) { if (!_229) { return 0; } if (_229 == "medium") { return 4; } if (_229.slice && (_229.slice(-2) == "px")) { return parseFloat(_229); } with (_228) { var _22a = style.left; var _22b = runtimeStyle.left; runtimeStyle.left = currentStyle.left; try { style.left = _229; _229 = style.pixelLeft; } catch (e) { _229 = 0; } style.left = _22a; runtimeStyle.left = _22b; } return _229; }; } dojo._getOpacity = (dojo.isIE ? function (node) { try { return (node.filters.alpha.opacity / 100); } catch (e) { return 1; } } : function (node) { return dojo.getComputedStyle(node).opacity; }); dojo._setOpacity = (dojo.isIE ? function (node, _22f) { if (_22f == 1) { node.style.cssText = node.style.cssText.replace(/FILTER:[^;]*;/i, ""); if (node.nodeName.toLowerCase() == "tr") { dojo.query("> td", node).forEach(function (i) { i.style.cssText = i.style.cssText.replace(/FILTER:[^;]*;/i, ""); }); } } else { var o = "Alpha(Opacity=" + (_22f * 100) + ")"; node.style.filter = o; } if (node.nodeName.toLowerCase() == "tr") { dojo.query("> td", node).forEach(function (i) { i.style.filter = o; }); } return _22f; } : function (node, _234) { return node.style.opacity = _234; }); var _235 = { width: true, height: true, left: true, top: true }; var _236 = function (node, type, _239) { type = type.toLowerCase(); if (_235[type] === true) { return dojo._toPixelValue(node, _239); } else { if (_235[type] === false) { return _239; } else { if (dojo.isOpera && type == "cssText") { } if ((type.indexOf("margin") >= 0) || (type.indexOf("padding") >= 0) || (type.indexOf("width") >= 0) || (type.indexOf("height") >= 0) || (type.indexOf("max") >= 0) || (type.indexOf("min") >= 0) || (type.indexOf("offset") >= 0)) { _235[type] = true; return dojo._toPixelValue(node, _239); } else { _235[type] = false; return _239; } } } }; dojo.style = function (node, _23b, _23c) { var n = dojo.byId(node), args = arguments.length, op = (_23b == "opacity"); if (args == 3) { return op ? dojo._setOpacity(n, _23c) : n.style[_23b] = _23c; } if (args == 2 && op) { return dojo._getOpacity(n); } var s = dojo.getComputedStyle(n); return (args == 1) ? s : _236(n, _23b, s[_23b]); }; dojo._getPadExtents = function (n, _242) { var s = _242 || gcs(n), px = dojo._toPixelValue, l = px(n, s.paddingLeft), t = px(n, s.paddingTop); return { l: l, t: t, w: l + px(n, s.paddingRight), h: t + px(n, s.paddingBottom) }; }; dojo._getBorderExtents = function (n, _248) { var ne = "none", px = dojo._toPixelValue, s = _248 || gcs(n), bl = (s.borderLeftStyle != ne ? px(n, s.borderLeftWidth) : 0), bt = (s.borderTopStyle != ne ? px(n, s.borderTopWidth) : 0); return { l: bl, t: bt, w: bl + (s.borderRightStyle != ne ? px(n, s.borderRightWidth) : 0), h: bt + (s.borderBottomStyle != ne ? px(n, s.borderBottomWidth) : 0) }; }; dojo._getPadBorderExtents = function (n, _24f) { var s = _24f || gcs(n), p = dojo._getPadExtents(n, s), b = dojo._getBorderExtents(n, s); return { l: p.l + b.l, t: p.t + b.t, w: p.w + b.w, h: p.h + b.h }; }; dojo._getMarginExtents = function (n, _254) { var s = _254 || gcs(n), px = dojo._toPixelValue, l = px(n, s.marginLeft), t = px(n, s.marginTop), r = px(n, s.marginRight), b = px(n, s.marginBottom); if (dojo.isSafari && (s.position != "absolute")) { r = l; } return { l: l, t: t, w: l + r, h: t + b }; }; dojo._getMarginBox = function (node, _25c) { var s = _25c || gcs(node), me = dojo._getMarginExtents(node, s); var l = node.offsetLeft - me.l, t = node.offsetTop - me.t; if (dojo.isMoz) { var sl = parseFloat(s.left), st = parseFloat(s.top); if (!isNaN(sl) && !isNaN(st)) { l = sl, t = st; } else { var p = node.parentNode; if (p && p.style) { var pcs = gcs(p); if (pcs.overflow != "visible") { var be = dojo._getBorderExtents(p, pcs); l += be.l, t += be.t; } } } } else { if (dojo.isOpera) { var p = node.parentNode; if (p) { var be = dojo._getBorderExtents(p); l -= be.l, t -= be.t; } } } return { l: l, t: t, w: node.offsetWidth + me.w, h: node.offsetHeight + me.h }; }; dojo._getContentBox = function (node, _267) { var s = _267 || gcs(node), pe = dojo._getPadExtents(node, s), be = dojo._getBorderExtents(node, s), w = node.clientWidth, h; if (!w) { w = node.offsetWidth, h = node.offsetHeight; } else { h = node.clientHeight, be.w = be.h = 0; } if (dojo.isOpera) { pe.l += be.l; pe.t += be.t; } return { l: pe.l, t: pe.t, w: w - pe.w - be.w, h: h - pe.h - be.h }; }; dojo._getBorderBox = function (node, _26e) { var s = _26e || gcs(node), pe = dojo._getPadExtents(node, s), cb = dojo._getContentBox(node, s); return { l: cb.l - pe.l, t: cb.t - pe.t, w: cb.w + pe.w, h: cb.h + pe.h }; }; dojo._setBox = function (node, l, t, w, h, u) { u = u || "px"; with (node.style) { if (!isNaN(l)) { left = l + u; } if (!isNaN(t)) { top = t + u; } if (w >= 0) { width = w + u; } if (h >= 0) { height = h + u; } } }; dojo._usesBorderBox = function (node) { var n = node.tagName; return dojo.boxModel == "border-box" || n == "TABLE" || n == "BUTTON"; }; dojo._setContentSize = function (node, _27b, _27c, _27d) { var bb = dojo._usesBorderBox(node); if (bb) { var pb = dojo._getPadBorderExtents(node, _27d); if (_27b >= 0) { _27b += pb.w; } if (_27c >= 0) { _27c += pb.h; } } dojo._setBox(node, NaN, NaN, _27b, _27c); }; dojo._setMarginBox = function (node, _281, _282, _283, _284, _285) { var s = _285 || dojo.getComputedStyle(node); var bb = dojo._usesBorderBox(node), pb = bb ? _289 : dojo._getPadBorderExtents(node, s), mb = dojo._getMarginExtents(node, s); if (_283 >= 0) { _283 = Math.max(_283 - pb.w - mb.w, 0); } if (_284 >= 0) { _284 = Math.max(_284 - pb.h - mb.h, 0); } dojo._setBox(node, _281, _282, _283, _284); }; var _289 = { l: 0, t: 0, w: 0, h: 0 }; dojo.marginBox = function (node, box) { var n = dojo.byId(node), s = gcs(n), b = box; return !b ? dojo._getMarginBox(n, s) : dojo._setMarginBox(n, b.l, b.t, b.w, b.h, s); }; dojo.contentBox = function (node, box) { var n = dojo.byId(node), s = gcs(n), b = box; return !b ? dojo._getContentBox(n, s) : dojo._setContentSize(n, b.w, b.h, s); }; var _295 = function (node, prop) { if (!(node = (node || 0).parentNode)) { return 0; } var val, _299 = 0, _b = dojo.body(); while (node && node.style) { if (gcs(node).position == "fixed") { return 0; } val = node[prop]; if (val) { _299 += val - 0; if (node == _b) { break; } } node = node.parentNode; } return _299; }; dojo._docScroll = function () { var _b = dojo.body(); var _w = dojo.global; var de = dojo.doc.documentElement; return { y: (_w.pageYOffset || de.scrollTop || _b.scrollTop || 0), x: (_w.pageXOffset || dojo._fixIeBiDiScrollLeft(de.scrollLeft) || _b.scrollLeft || 0) }; }; dojo._isBodyLtr = function () { return !("_bodyLtr" in dojo) ? dojo._bodyLtr = dojo.getComputedStyle(dojo.body()).direction == "ltr" : dojo._bodyLtr; }; dojo._getIeDocumentElementOffset = function () { var de = dojo.doc.documentElement; if (dojo.isIE >= 7) { return { x: de.getBoundingClientRect().left, y: de.getBoundingClientRect().top }; } else { return { x: dojo._isBodyLtr() || window.parent == window ? de.clientLeft : de.offsetWidth - de.clientWidth - de.clientLeft, y: de.clientTop }; } }; dojo._fixIeBiDiScrollLeft = function (_29f) { if (dojo.isIE && !dojo._isBodyLtr()) { var de = dojo.doc.documentElement; return _29f + de.clientWidth - de.scrollWidth; } return _29f; }; dojo._abs = function (node, _2a2) { var _2a3 = node.ownerDocument; var ret = { x: 0, y: 0 }; var _2a5 = false; var db = dojo.body(); if (dojo.isIE) { var _2a7 = node.getBoundingClientRect(); var _2a8 = dojo._getIeDocumentElementOffset(); ret.x = _2a7.left - _2a8.x; ret.y = _2a7.top - _2a8.y; } else { if (_2a3["getBoxObjectFor"]) { var bo = _2a3.getBoxObjectFor(node); ret.x = bo.x - _295(node, "scrollLeft"); ret.y = bo.y - _295(node, "scrollTop"); } else { if (node["offsetParent"]) { _2a5 = true; var _2aa; if (dojo.isSafari && (gcs(node).position == "absolute") && (node.parentNode == db)) { _2aa = db; } else { _2aa = db.parentNode; } if (node.parentNode != db) { var nd = node; if (dojo.isOpera || (dojo.isSafari >= 5)) { nd = db; } ret.x -= _295(nd, "scrollLeft"); ret.y -= _295(nd, "scrollTop"); } var _2ac = node; do { var n = _2ac["offsetLeft"]; if (!dojo.isOpera || n > 0) { ret.x += isNaN(n) ? 0 : n; } var m = _2ac["offsetTop"]; ret.y += isNaN(m) ? 0 : m; _2ac = _2ac.offsetParent; } while ((_2ac != _2aa) && _2ac); } else { if (node["x"] && node["y"]) { ret.x += isNaN(node.x) ? 0 : node.x; ret.y += isNaN(node.y) ? 0 : node.y; } } } } if (_2a5 || _2a2) { var _2af = dojo._docScroll(); var m = _2a5 ? (!_2a2 ? -1 : 0) : 1; ret.y += m * _2af.y; ret.x += m * _2af.x; } return ret; }; dojo.coords = function (node, _2b1) { var n = dojo.byId(node), s = gcs(n), mb = dojo._getMarginBox(n, s); var abs = dojo._abs(n, _2b1); mb.x = abs.x; mb.y = abs.y; return mb; }; })(); dojo.hasClass = function (node, _2b7) { return ((" " + dojo.byId(node).className + " ").indexOf(" " + _2b7 + " ") >= 0); }; dojo.addClass = function (node, _2b9) { node = dojo.byId(node); var cls = node.className; if ((" " + cls + " ").indexOf(" " + _2b9 + " ") < 0) { node.className = cls + (cls ? " " : "") + _2b9; } }; dojo.removeClass = function (node, _2bc) { node = dojo.byId(node); var t = dojo.trim((" " + node.className + " ").replace(" " + _2bc + " ", " ")); if (node.className != t) { node.className = t; } }; dojo.toggleClass = function (node, _2bf, _2c0) { if (_2c0 === undefined) { _2c0 = !dojo.hasClass(node, _2bf); } dojo[_2c0 ? "addClass" : "removeClass"](node, _2bf); }; } if (!dojo._hasResource["dojo._base.NodeList"]) { dojo._hasResource["dojo._base.NodeList"] = true; dojo.provide("dojo._base.NodeList"); (function () { var d = dojo; var tnl = function (arr) { arr.constructor = dojo.NodeList; dojo._mixin(arr, dojo.NodeList.prototype); return arr; }; dojo.NodeList = function () { return tnl(Array.apply(null, arguments)); }; dojo.NodeList._wrap = tnl; dojo.extend(dojo.NodeList, { slice: function () { var a = dojo._toArray(arguments); return tnl(a.slice.apply(this, a)); }, splice: function () { var a = dojo._toArray(arguments); return tnl(a.splice.apply(this, a)); }, concat: function () { var a = dojo._toArray(arguments, 0, [this]); return tnl(a.concat.apply([], a)); }, indexOf: function (_2c7, _2c8) { return d.indexOf(this, _2c7, _2c8); }, lastIndexOf: function () { return d.lastIndexOf.apply(d, d._toArray(arguments, 0, [this])); }, every: function (_2c9, _2ca) { return d.every(this, _2c9, _2ca); }, some: function (_2cb, _2cc) { return d.some(this, _2cb, _2cc); }, map: function (func, obj) { return d.map(this, func, obj, d.NodeList); }, forEach: function (_2cf, _2d0) { d.forEach(this, _2cf, _2d0); return this; }, coords: function () { return d.map(this, d.coords); }, style: function () { var aa = d._toArray(arguments, 0, [null]); var s = this.map(function (i) { aa[0] = i; return d.style.apply(d, aa); }); return (arguments.length > 1) ? this : s; }, styles: function () { d.deprecated("NodeList.styles", "use NodeList.style instead", "1.1"); return this.style.apply(this, arguments); }, addClass: function (_2d4) { this.forEach(function (i) { d.addClass(i, _2d4); }); return this; }, removeClass: function (_2d6) { this.forEach(function (i) { d.removeClass(i, _2d6); }); return this; }, place: function (_2d8, _2d9) { var item = d.query(_2d8)[0]; _2d9 = _2d9 || "last"; for (var x = 0; x < this.length; x++) { d.place(this[x], item, _2d9); } return this; }, connect: function (_2dc, _2dd, _2de) { this.forEach(function (item) { d.connect(item, _2dc, _2dd, _2de); }); return this; }, orphan: function (_2e0) { var _2e1 = (_2e0) ? d._filterQueryResult(this, _2e0) : this; _2e1.forEach(function (item) { if (item["parentNode"]) { item.parentNode.removeChild(item); } }); return _2e1; }, adopt: function (_2e3, _2e4) { var item = this[0]; return d.query(_2e3).forEach(function (ai) { d.place(ai, item, (_2e4 || "last")); }); }, query: function (_2e7) { _2e7 = _2e7 || ""; var ret = d.NodeList(); this.forEach(function (item) { d.query(_2e7, item).forEach(function (_2ea) { if (typeof _2ea != "undefined") { ret.push(_2ea); } }); }); return ret; }, filter: function (_2eb) { var _2ec = this; var _a = arguments; var r = d.NodeList(); var rp = function (t) { if (typeof t != "undefined") { r.push(t); } }; if (d.isString(_2eb)) { _2ec = d._filterQueryResult(this, _a[0]); if (_a.length == 1) { return _2ec; } d.forEach(d.filter(_2ec, _a[1], _a[2]), rp); return r; } d.forEach(d.filter(_2ec, _a[0], _a[1]), rp); return r; }, addContent: function (_2f1, _2f2) { var ta = d.doc.createElement("span"); if (d.isString(_2f1)) { ta.innerHTML = _2f1; } else { ta.appendChild(_2f1); } var ct = ((_2f2 == "first") || (_2f2 == "after")) ? "lastChild" : "firstChild"; this.forEach(function (item) { var tn = ta.cloneNode(true); while (tn[ct]) { d.place(tn[ct], item, _2f2); } }); return this; } }); d.forEach(["blur", "click", "keydown", "keypress", "keyup", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseout", "mouseover", "mouseup"], function (evt) { var _oe = "on" + evt; dojo.NodeList.prototype[_oe] = function (a, b) { return this.connect(_oe, a, b); }; }); })(); } if (!dojo._hasResource["dojo._base.query"]) { dojo._hasResource["dojo._base.query"] = true; dojo.provide("dojo._base.query"); (function () { var d = dojo; var _2fc = dojo.isIE ? "children" : "childNodes"; var _2fd = function (_2fe) { if (_2fe.charAt(_2fe.length - 1) == ">") { _2fe += " *"; } _2fe += " "; var ts = function (s, e) { return d.trim(_2fe.slice(s, e)); }; var _302 = []; var _303 = -1; var _304 = -1; var _305 = -1; var _306 = -1; var _307 = -1; var inId = -1; var _309 = -1; var lc = ""; var cc = ""; var _30c; var x = 0; var ql = _2fe.length; var _30f = null; var _cp = null; var _311 = function () { if (_309 >= 0) { var tv = (_309 == x) ? null : ts(_309, x).toLowerCase(); _30f[(">~+".indexOf(tv) < 0) ? "tag" : "oper"] = tv; _309 = -1; } }; var _313 = function () { if (inId >= 0) { _30f.id = ts(inId, x).replace(/\\/g, ""); inId = -1; } }; var _314 = function () { if (_307 >= 0) { _30f.classes.push(ts(_307 + 1, x).replace(/\\/g, "")); _307 = -1; } }; var _315 = function () { _313(); _311(); _314(); }; for (; x < ql, lc = cc, cc = _2fe.charAt(x); x++) { if (lc == "\\") { continue; } if (!_30f) { _30c = x; _30f = { query: null, pseudos: [], attrs: [], classes: [], tag: null, oper: null, id: null }; _309 = x; } if (_303 >= 0) { if (cc == "]") { if (!_cp.attr) { _cp.attr = ts(_303 + 1, x); } else { _cp.matchFor = ts((_305 || _303 + 1), x); } var cmf = _cp.matchFor; if (cmf) { if ((cmf.charAt(0) == "\"") || (cmf.charAt(0) == "'")) { _cp.matchFor = cmf.substring(1, cmf.length - 1); } } _30f.attrs.push(_cp); _cp = null; _303 = _305 = -1; } else { if (cc == "=") { var _317 = ("|~^$*".indexOf(lc) >= 0) ? lc : ""; _cp.type = _317 + cc; _cp.attr = ts(_303 + 1, x - _317.length); _305 = x + 1; } } } else { if (_304 >= 0) { if (cc == ")") { if (_306 >= 0) { _cp.value = ts(_304 + 1, x); } _306 = _304 = -1; } } else { if (cc == "#") { _315(); inId = x + 1; } else { if (cc == ".") { _315(); _307 = x; } else { if (cc == ":") { _315(); _306 = x; } else { if (cc == "[") { _315(); _303 = x; _cp = {}; } else { if (cc == "(") { if (_306 >= 0) { _cp = { name: ts(_306 + 1, x), value: null }; _30f.pseudos.push(_cp); } _304 = x; } else { if (cc == " " && lc != cc) { _315(); if (_306 >= 0) { _30f.pseudos.push({ name: ts(_306 + 1, x) }); } _30f.hasLoops = (_30f.pseudos.length || _30f.attrs.length || _30f.classes.length); _30f.query = ts(_30c, x); _30f.tag = (_30f["oper"]) ? null : (_30f.tag || "*"); _302.push(_30f); _30f = null; } } } } } } } } } return _302; }; var _318 = { "*=": function (attr, _31a) { return "[contains(@" + attr + ", '" + _31a + "')]"; }, "^=": function (attr, _31c) { return "[starts-with(@" + attr + ", '" + _31c + "')]"; }, "$=": function (attr, _31e) { return "[substring(@" + attr + ", string-length(@" + attr + ")-" + (_31e.length - 1) + ")='" + _31e + "']"; }, "~=": function (attr, _320) { return "[contains(concat(' ',@" + attr + ",' '), ' " + _320 + " ')]"; }, "|=": function (attr, _322) { return "[contains(concat(' ',@" + attr + ",' '), ' " + _322 + "-')]"; }, "=": function (attr, _324) { return "[@" + attr + "='" + _324 + "']"; } }; var _325 = function (_326, _327, _328, _329) { d.forEach(_327.attrs, function (attr) { var _32b; if (attr.type && _326[attr.type]) { _32b = _326[attr.type](attr.attr, attr.matchFor); } else { if (attr.attr.length) { _32b = _328(attr.attr); } } if (_32b) { _329(_32b); } }); }; var _32c = function (_32d) { var _32e = "."; var _32f = _2fd(d.trim(_32d)); while (_32f.length) { var tqp = _32f.shift(); var _331; if (tqp.oper == ">") { _331 = "/"; tqp = _32f.shift(); } else { _331 = "//"; } _32e += _331 + tqp.tag; if (tqp.id) { _32e += "[@id='" + tqp.id + "'][1]"; } d.forEach(tqp.classes, function (cn) { var cnl = cn.length; var _334 = " "; if (cn.charAt(cnl - 1) == "*") { _334 = ""; cn = cn.substr(0, cnl - 1); } _32e += "[contains(concat(' ',@class,' '), ' " + cn + _334 + "')]"; }); _325(_318, tqp, function (_335) { return "[@" + _335 + "]"; }, function (_336) { _32e += _336; }); } return _32e; }; var _337 = {}; var _338 = function (path) { if (_337[path]) { return _337[path]; } var doc = d.doc; var _33b = _32c(path); var tf = function (_33d) { var ret = []; var _33f; try { _33f = doc.evaluate(_33b, _33d, null, XPathResult.ANY_TYPE, null); } catch (e) { console.debug("failure in exprssion:", _33b, "under:", _33d); console.debug(e); } var _340 = _33f.iterateNext(); while (_340) { ret.push(_340); _340 = _33f.iterateNext(); } return ret; }; return _337[path] = tf; }; var _341 = {}; var _342 = {}; var _343 = function (_344, _345) { if (!_344) { return _345; } if (!_345) { return _344; } return function () { return _344.apply(window, arguments) && _345.apply(window, arguments); }; }; var _346 = function (_347, _348, _349, idx) { var nidx = idx + 1; var _34c = (_348.length == nidx); var tqp = _348[idx]; if (tqp.oper == ">") { var ecn = _347[_2fc]; if (!ecn || !ecn.length) { return; } nidx++; _34c = (_348.length == nidx); var tf = _350(_348[idx + 1]); for (var x = 0, ecnl = ecn.length, te; x < ecnl, te = ecn[x]; x++) { if (tf(te)) { if (_34c) { _349.push(te); } else { _346(te, _348, _349, nidx); } } } } var _354 = _355(tqp)(_347); if (_34c) { while (_354.length) { _349.push(_354.shift()); } } else { while (_354.length) { _346(_354.shift(), _348, _349, nidx); } } }; var _356 = function (_357, _358) { var ret = []; var x = _357.length - 1, te; while (te = _357[x--]) { _346(te, _358, ret, 0); } return ret; }; var _350 = function (q) { if (_341[q.query]) { return _341[q.query]; } var ff = null; if (q.tag) { if (q.tag == "*") { ff = _343(ff, function (elem) { return (elem.nodeType == 1); }); } else { ff = _343(ff, function (elem) { return ((elem.nodeType == 1) && (q.tag == elem.tagName.toLowerCase())); }); } } if (q.id) { ff = _343(ff, function (elem) { return ((elem.nodeType == 1) && (elem.id == q.id)); }); } if (q.hasLoops) { ff = _343(ff, _361(q)); } return _341[q.query] = ff; }; var _362 = function (node) { var pn = node.parentNode; var pnc = pn.childNodes; var nidx = -1; var _367 = pn.firstChild; if (!_367) { return nidx; } var ci = node["__cachedIndex"]; var cl = pn["__cachedLength"]; if (((typeof cl == "number") && (cl != pnc.length)) || (typeof ci != "number")) { pn["__cachedLength"] = pnc.length; var idx = 1; do { if (_367 === node) { nidx = idx; } if (_367.nodeType == 1) { _367["__cachedIndex"] = idx; idx++; } _367 = _367.nextSibling; } while (_367); } else { nidx = ci; } return nidx; }; var _36b = 0; var _36c = ""; var _36d = function (elem, attr) { if (attr == "class") { return elem.className || _36c; } if (attr == "for") { return elem.htmlFor || _36c; } return elem.getAttribute(attr, 2) || _36c; }; var _370 = { "*=": function (attr, _372) { return function (elem) { return (_36d(elem, attr).indexOf(_372) >= 0); }; }, "^=": function (attr, _375) { return function (elem) { return (_36d(elem, attr).indexOf(_375) == 0); }; }, "$=": function (attr, _378) { var tval = " " + _378; return function (elem) { var ea = " " + _36d(elem, attr); return (ea.lastIndexOf(_378) == (ea.length - _378.length)); }; }, "~=": function (attr, _37d) { var tval = " " + _37d + " "; return function (elem) { var ea = " " + _36d(elem, attr) + " "; return (ea.indexOf(tval) >= 0); }; }, "|=": function (attr, _382) { var _383 = " " + _382 + "-"; return function (elem) { var ea = " " + (elem.getAttribute(attr, 2) || ""); return ((ea == _382) || (ea.indexOf(_383) == 0)); }; }, "=": function (attr, _387) { return function (elem) { return (_36d(elem, attr) == _387); }; } }; var _389 = { "first-child": function (name, _38b) { return function (elem) { if (elem.nodeType != 1) { return false; } var fc = elem.previousSibling; while (fc && (fc.nodeType != 1)) { fc = fc.previousSibling; } return (!fc); }; }, "last-child": function (name, _38f) { return function (elem) { if (elem.nodeType != 1) { return false; } var nc = elem.nextSibling; while (nc && (nc.nodeType != 1)) { nc = nc.nextSibling; } return (!nc); }; }, "empty": function (name, _393) { return function (elem) { var cn = elem.childNodes; var cnl = elem.childNodes.length; for (var x = cnl - 1; x >= 0; x--) { var nt = cn[x].nodeType; if ((nt == 1) || (nt == 3)) { return false; } } return true; }; }, "not": function (name, _39a) { var ntf = _350(_2fd(_39a)[0]); return function (elem) { return (!ntf(elem)); }; }, "nth-child": function (name, _39e) { var pi = parseInt; if (_39e == "odd") { return function (elem) { return (((_362(elem)) % 2) == 1); }; } else { if ((_39e == "2n") || (_39e == "even")) { return function (elem) { return ((_362(elem) % 2) == 0); }; } else { if (_39e.indexOf("0n+") == 0) { var _3a2 = pi(_39e.substr(3)); return function (elem) { return (elem.parentNode[_2fc][_3a2 - 1] === elem); }; } else { if ((_39e.indexOf("n+") > 0) && (_39e.length > 3)) { var _3a4 = _39e.split("n+", 2); var pred = pi(_3a4[0]); var idx = pi(_3a4[1]); return function (elem) { return ((_362(elem) % pred) == idx); }; } else { if (_39e.indexOf("n") == -1) { var _3a2 = pi(_39e); return function (elem) { return (_362(elem) == _3a2); }; } } } } } } }; var _3a9 = (d.isIE) ? function (cond) { var clc = cond.toLowerCase(); return function (elem) { return elem[cond] || elem[clc]; }; } : function (cond) { return function (elem) { return (elem && elem.getAttribute && elem.hasAttribute(cond)); }; }; var _361 = function (_3af) { var _3b0 = (_342[_3af.query] || _341[_3af.query]); if (_3b0) { return _3b0; } var ff = null; if (_3af.id) { if (_3af.tag != "*") { ff = _343(ff, function (elem) { return (elem.tagName.toLowerCase() == _3af.tag); }); } } d.forEach(_3af.classes, function (_3b3, idx, arr) { var _3b6 = _3b3.charAt(_3b3.length - 1) == "*"; if (_3b6) { _3b3 = _3b3.substr(0, _3b3.length - 1); } var re = new RegExp("(?:^|\\s)" + _3b3 + (_3b6 ? ".*" : "") + "(?:\\s|$)"); ff = _343(ff, function (elem) { return re.test(elem.className); }); ff.count = idx; }); d.forEach(_3af.pseudos, function (_3b9) { if (_389[_3b9.name]) { ff = _343(ff, _389[_3b9.name](_3b9.name, _3b9.value)); } }); _325(_370, _3af, _3a9, function (_3ba) { ff = _343(ff, _3ba); }); if (!ff) { ff = function () { return true; }; } return _342[_3af.query] = ff; }; var _3bb = {}; var _355 = function (_3bc, root) { var fHit = _3bb[_3bc.query]; if (fHit) { return fHit; } if (_3bc.id && !_3bc.hasLoops && !_3bc.tag) { return _3bb[_3bc.query] = function (root) { return [d.byId(_3bc.id)]; }; } var _3c0 = _361(_3bc); var _3c1; if (_3bc.tag && _3bc.id && !_3bc.hasLoops) { _3c1 = function (root) { var te = d.byId(_3bc.id); if (_3c0(te)) { return [te]; } }; } else { var tret; if (!_3bc.hasLoops) { _3c1 = function (root) { var ret = []; var te, x = 0, tret = root.getElementsByTagName(_3bc.tag); while (te = tret[x++]) { ret.push(te); } return ret; }; } else { _3c1 = function (root) { var ret = []; var te, x = 0, tret = root.getElementsByTagName(_3bc.tag); while (te = tret[x++]) { if (_3c0(te)) { ret.push(te); } } return ret; }; } } return _3bb[_3bc.query] = _3c1; }; var _3cd = {}; var _3ce = { "*": d.isIE ? function (root) { return root.all; } : function (root) { return root.getElementsByTagName("*"); }, ">": function (root) { var ret = []; var te, x = 0, tret = root[_2fc]; while (te = tret[x++]) { if (te.nodeType == 1) { ret.push(te); } } return ret; } }; var _3d6 = function (_3d7) { var _3d8 = _2fd(d.trim(_3d7)); if (_3d8.length == 1) { var tt = _355(_3d8[0]); tt.nozip = true; return tt; } var sqf = function (root) { var _3dc = _3d8.slice(0); var _3dd; if (_3dc[0].oper == ">") { _3dd = [root]; } else { _3dd = _355(_3dc.shift())(root); } return _356(_3dd, _3dc); }; return sqf; }; var _3de = ((document["evaluate"] && !d.isSafari) ? function (_3df) { var _3e0 = _3df.split(" "); if ((document["evaluate"]) && (_3df.indexOf(":") == -1) && ((true))) { if (((_3e0.length > 2) && (_3df.indexOf(">") == -1)) || (_3e0.length > 3) || (_3df.indexOf("[") >= 0) || ((1 == _3e0.length) && (0 <= _3df.indexOf(".")))) { return _338(_3df); } } return _3d6(_3df); } : _3d6); var _3e1 = function (_3e2) { if (_3ce[_3e2]) { return _3ce[_3e2]; } if (0 > _3e2.indexOf(",")) { return _3ce[_3e2] = _3de(_3e2); } else { var _3e3 = _3e2.split(/\s*,\s*/); var tf = function (root) { var _3e6 = 0; var ret = []; var tp; while (tp = _3e3[_3e6++]) { ret = ret.concat(_3de(tp, tp.indexOf(" "))(root)); } return ret; }; return _3ce[_3e2] = tf; } }; var _3e9 = 0; var _zip = function (arr) { if (arr && arr.nozip) { return d.NodeList._wrap(arr); } var ret = new d.NodeList(); if (!arr) { return ret; } if (arr[0]) { ret.push(arr[0]); } if (arr.length < 2) { return ret; } _3e9++; arr[0]["_zipIdx"] = _3e9; for (var x = 1, te; te = arr[x]; x++) { if (arr[x]["_zipIdx"] != _3e9) { ret.push(te); } te["_zipIdx"] = _3e9; } return ret; }; d.query = function (_3ef, root) { if (_3ef.constructor == d.NodeList) { return _3ef; } if (!d.isString(_3ef)) { return new d.NodeList(_3ef); } if (d.isString(root)) { root = d.byId(root); } return _zip(_3e1(_3ef)(root || d.doc)); }; d._filterQueryResult = function (_3f1, _3f2) { var tnl = new d.NodeList(); var ff = (_3f2) ? _350(_2fd(_3f2)[0]) : function () { return true; }; for (var x = 0, te; te = _3f1[x]; x++) { if (ff(te)) { tnl.push(te); } } return tnl; }; })(); } if (!dojo._hasResource["dojo._base.xhr"]) { dojo._hasResource["dojo._base.xhr"] = true; dojo.provide("dojo._base.xhr"); (function () { var _d = dojo; function setValue(obj, name, _3fa) { var val = obj[name]; if (_d.isString(val)) { obj[name] = [val, _3fa]; } else { if (_d.isArray(val)) { val.push(_3fa); } else { obj[name] = _3fa; } } }; dojo.formToObject = function (_3fc) { var ret = {}; var iq = "input:not([type=file]):not([type=submit]):not([type=image]):not([type=reset]):not([type=button]), select, textarea"; _d.query(iq, _3fc).filter(function (node) { return (!node.disabled); }).forEach(function (item) { var _in = item.name; var type = (item.type || "").toLowerCase(); if (type == "radio" || type == "checkbox") { if (item.checked) { setValue(ret, _in, item.value); } } else { if (item.multiple) { ret[_in] = []; _d.query("option", item).forEach(function (opt) { if (opt.selected) { setValue(ret, _in, opt.value); } }); } else { setValue(ret, _in, item.value); if (type == "image") { ret[_in + ".x"] = ret[_in + ".y"] = ret[_in].x = ret[_in].y = 0; } } } }); return ret; }; dojo.objectToQuery = function (map) { var ec = encodeURIComponent; var ret = ""; var _407 = {}; for (var x in map) { if (map[x] != _407[x]) { if (_d.isArray(map[x])) { for (var y = 0; y < map[x].length; y++) { ret += ec(x) + "=" + ec(map[x][y]) + "&"; } } else { ret += ec(x) + "=" + ec(map[x]) + "&"; } } } if (ret.length && ret.charAt(ret.length - 1) == "&") { ret = ret.substr(0, ret.length - 1); } return ret; }; dojo.formToQuery = function (_40a) { return _d.objectToQuery(_d.formToObject(_40a)); }; dojo.formToJson = function (_40b, _40c) { return _d.toJson(_d.formToObject(_40b), _40c); }; dojo.queryToObject = function (str) { var ret = {}; var qp = str.split("&"); var dc = decodeURIComponent; _d.forEach(qp, function (item) { if (item.length) { var _412 = item.split("="); var name = dc(_412.shift()); var val = dc(_412.join("=")); if (_d.isString(ret[name])) { ret[name] = [ret[name]]; } if (_d.isArray(ret[name])) { ret[name].push(val); } else { ret[name] = val; } } }); return ret; }; dojo._blockAsync = false; dojo._contentHandlers = { "text": function (xhr) { return xhr.responseText; }, "json": function (xhr) { if (!djConfig.usePlainJson) { console.debug("Consider using mimetype:text/json-comment-filtered" + " to avoid potential security issues with JSON endpoints" + " (use djConfig.usePlainJson=true to turn off this message)"); } return _d.fromJson(xhr.responseText); }, "json-comment-filtered": function (xhr) { var _418 = xhr.responseText; var _419 = _418.indexOf("/*"); var _41a = _418.lastIndexOf("*/"); if (_419 == -1 || _41a == -1) { throw new Error("JSON was not comment filtered"); } return _d.fromJson(_418.substring(_419 + 2, _41a)); }, "javascript": function (xhr) { return _d.eval(xhr.responseText); }, "xml": function (xhr) { if (_d.isIE && !xhr.responseXML) { _d.forEach(["MSXML2", "Microsoft", "MSXML", "MSXML3"], function (i) { try { var doc = new ActiveXObject(prefixes[i] + ".XMLDOM"); doc.async = false; doc.loadXML(xhr.responseText); return doc; } catch (e) { } }); } else { return xhr.responseXML; } } }; dojo._contentHandlers["json-comment-optional"] = function (xhr) { var _420 = _d._contentHandlers; try { return _420["json-comment-filtered"](xhr); } catch (e) { return _420["json"](xhr); } }; dojo._ioSetArgs = function (args, _422, _423, _424) { var _425 = { args: args, url: args.url }; var _426 = null; if (args.form) { var form = _d.byId(args.form); var _428 = form.getAttributeNode("action"); _425.url = _425.url || (_428 ? _428.value : null); _426 = _d.formToObject(form); } var _429 = [{}]; if (_426) { _429.push(_426); } if (args.content) { _429.push(args.content); } if (args.preventCache) { _429.push({ "dojo.preventCache": new Date().valueOf() }); } _425.query = _d.objectToQuery(_d.mixin.apply(null, _429)); _425.handleAs = args.handleAs || "text"; var d = new _d.Deferred(_422); d.addCallbacks(_423, function (_42b) { return _424(_42b, d); }); var ld = args.load; if (ld && _d.isFunction(ld)) { d.addCallback(function (_42d) { return ld.call(args, _42d, _425); }); } var err = args.error; if (err && _d.isFunction(err)) { d.addErrback(function (_42f) { return err.call(args, _42f, _425); }); } var _430 = args.handle; if (_430 && _d.isFunction(_430)) { d.addBoth(function (_431) { return _430.call(args, _431, _425); }); } d.ioArgs = _425; return d; }; var _432 = function (dfd) { dfd.canceled = true; var xhr = dfd.ioArgs.xhr; var _at = (typeof xhr.abort); if ((_at == "function") || (_at == "unknown")) { xhr.abort(); } var err = new Error("xhr cancelled"); err.dojoType = "cancel"; return err; }; var _437 = function (dfd) { return _d._contentHandlers[dfd.ioArgs.handleAs](dfd.ioArgs.xhr); }; var _439 = function (_43a, dfd) { console.debug(_43a); return _43a; }; var _43c = function (args) { var dfd = _d._ioSetArgs(args, _432, _437, _439); dfd.ioArgs.xhr = _d._xhrObj(dfd.ioArgs.args); return dfd; }; var _43f = null; var _440 = []; var _441 = function () { var now = (new Date()).getTime(); if (!_d._blockAsync) { for (var i = 0, tif; (i < _440.length) && (tif = _440[i]); i++) { var dfd = tif.dfd; try { if (!dfd || dfd.canceled || !tif.validCheck(dfd)) { _440.splice(i--, 1); } else { if (tif.ioCheck(dfd)) { _440.splice(i--, 1); tif.resHandle(dfd); } else { if (dfd.startTime) { if (dfd.startTime + (dfd.ioArgs.args.timeout || 0) < now) { _440.splice(i--, 1); var err = new Error("timeout exceeded"); err.dojoType = "timeout"; dfd.errback(err); dfd.cancel(); } } } } } catch (e) { console.debug(e); dfd.errback(new Error("_watchInFlightError!")); } } } if (!_440.length) { clearInterval(_43f); _43f = null; return; } }; dojo._ioCancelAll = function () { try { _d.forEach(_440, function (i) { i.dfd.cancel(); }); } catch (e) { } }; if (_d.isIE) { _d.addOnUnload(_d._ioCancelAll); } _d._ioWatch = function (dfd, _449, _44a, _44b) { if (dfd.ioArgs.args.timeout) { dfd.startTime = (new Date()).getTime(); } _440.push({ dfd: dfd, validCheck: _449, ioCheck: _44a, resHandle: _44b }); if (!_43f) { _43f = setInterval(_441, 50); } _441(); }; var _44c = "application/x-www-form-urlencoded"; var _44d = function (dfd) { return dfd.ioArgs.xhr.readyState; }; var _44f = function (dfd) { return 4 == dfd.ioArgs.xhr.readyState; }; var _451 = function (dfd) { if (_d._isDocumentOk(dfd.ioArgs.xhr)) { dfd.callback(dfd); } else { dfd.errback(new Error("bad http response code:" + dfd.ioArgs.xhr.status)); } }; var _453 = function (type, dfd) { var _456 = dfd.ioArgs; var args = _456.args; _456.xhr.open(type, _456.url, args.sync !== true, args.user || undefined, args.password || undefined); if (args.headers) { for (var hdr in args.headers) { if (hdr.toLowerCase() === "content-type" && !args.contentType) { args.contentType = args.headers[hdr]; } else { _456.xhr.setRequestHeader(hdr, args.headers[hdr]); } } } _456.xhr.setRequestHeader("Content-Type", (args.contentType || _44c)); try { _456.xhr.send(_456.query); } catch (e) { dfd.cancel(); } _d._ioWatch(dfd, _44d, _44f, _451); return dfd; }; dojo._ioAddQueryToUrl = function (_459) { if (_459.query.length) { _459.url += (_459.url.indexOf("?") == -1 ? "?" : "&") + _459.query; _459.query = null; } }; dojo.xhrGet = function (args) { var dfd = _43c(args); _d._ioAddQueryToUrl(dfd.ioArgs); return _453("GET", dfd); }; dojo.xhrPost = function (args) { return _453("POST", _43c(args)); }; dojo.rawXhrPost = function (args) { var dfd = _43c(args); dfd.ioArgs.query = args.postData; return _453("POST", dfd); }; dojo.xhrPut = function (args) { return _453("PUT", _43c(args)); }; dojo.rawXhrPut = function (args) { var dfd = _43c(args); var _462 = dfd.ioArgs; if (args["putData"]) { _462.query = args.putData; args.putData = null; } return _453("PUT", dfd); }; dojo.xhrDelete = function (args) { var dfd = _43c(args); _d._ioAddQueryToUrl(dfd.ioArgs); return _453("DELETE", dfd); }; })(); } if (!dojo._hasResource["dojo._base.fx"]) { dojo._hasResource["dojo._base.fx"] = true; dojo.provide("dojo._base.fx"); dojo._Line = function (_465, end) { this.start = _465; this.end = end; this.getValue = function (n) { return ((this.end - this.start) * n) + this.start; }; }; dojo.declare("dojo._Animation", null, { constructor: function (args) { dojo.mixin(this, args); if (dojo.isArray(this.curve)) { this.curve = new dojo._Line(this.curve[0], this.curve[1]); } }, duration: 1000, repeat: 0, rate: 10, _percent: 0, _startRepeatCount: 0, fire: function (evt, args) { if (this[evt]) { this[evt].apply(this, args || []); } return this; }, play: function (_46b, _46c) { var _t = this; if (_46c) { _t._stopTimer(); _t._active = _t._paused = false; _t._percent = 0; } else { if (_t._active && !_t._paused) { return _t; } } _t.fire("beforeBegin"); var d = _46b || _t.delay; var _p = dojo.hitch(_t, "_play", _46c); if (d > 0) { setTimeout(_p, d); return _t; } _p(); return _t; }, _play: function (_470) { var _t = this; _t._startTime = new Date().valueOf(); if (_t._paused) { _t._startTime -= _t.duration * _t._percent; } _t._endTime = _t._startTime + _t.duration; _t._active = true; _t._paused = false; var _472 = _t.curve.getValue(_t._percent); if (!_t._percent) { if (!_t._startRepeatCount) { _t._startRepeatCount = _t.repeat; } _t.fire("onBegin", [_472]); } _t.fire("onPlay", [_472]); _t._cycle(); return _t; }, pause: function () { this._stopTimer(); if (!this._active) { return this; } this._paused = true; this.fire("onPause", [this.curve.getValue(this._percent)]); return this; }, gotoPercent: function (_473, _474) { this._stopTimer(); this._active = this._paused = true; this._percent = _473 * 100; if (_474) { this.play(); } return this; }, stop: function (_475) { if (!this._timer) { return; } this._stopTimer(); if (_475) { this._percent = 1; } this.fire("onStop", [this.curve.getValue(this._percent)]); this._active = this._paused = false; return this; }, status: function () { if (this._active) { return this._paused ? "paused" : "playing"; } return "stopped"; }, _cycle: function () { var _t = this; if (_t._active) { var curr = new Date().valueOf(); var step = (curr - _t._startTime) / (_t._endTime - _t._startTime); if (step >= 1) { step = 1; } _t._percent = step; if (_t.easing) { step = _t.easing(step); } _t.fire("onAnimate", [_t.curve.getValue(step)]); if (step < 1) { _t._startTimer(); } else { _t._active = false; if (_t.repeat > 0) { _t.repeat--; _t.play(null, true); } else { if (_t.repeat == -1) { _t.play(null, true); } else { if (_t._startRepeatCount) { _t.repeat = _t._startRepeatCount; _t._startRepeatCount = 0; } } } _t._percent = 0; _t.fire("onEnd"); } } return _t; } }); (function () { var d = dojo; var ctr = 0; var _47b = []; var _47c = { run: function () { } }; var _47d = null; dojo._Animation.prototype._startTimer = function () { if (!this._timer) { this._timer = dojo.connect(_47c, "run", this, "_cycle"); ctr++; } if (!_47d) { _47d = setInterval(dojo.hitch(_47c, "run"), this.rate); } }; dojo._Animation.prototype._stopTimer = function () { dojo.disconnect(this._timer); this._timer = null; ctr--; if (!ctr) { clearInterval(_47d); _47d = null; } }; var _47e = (d.isIE) ? function (node) { var ns = node.style; if (!ns.zoom.length && d.style(node, "zoom") == "normal") { ns.zoom = "1"; } if (!ns.width.length && d.style(node, "width") == "auto") { ns.width = "auto"; } } : function () { }; dojo._fade = function (args) { args.node = d.byId(args.node); var _482 = d.mixin({ properties: {} }, args); var _483 = (_482.properties.opacity = {}); _483.start = !("start" in _482) ? function () { return Number(d.style(_482.node, "opacity")); } : _482.start; _483.end = _482.end; var anim = d.animateProperty(_482); d.connect(anim, "beforeBegin", d.partial(_47e, _482.node)); return anim; }; dojo.fadeIn = function (args) { return d._fade(d.mixin({ end: 1 }, args)); }; dojo.fadeOut = function (args) { return d._fade(d.mixin({ end: 0 }, args)); }; dojo._defaultEasing = function (n) { return 0.5 + ((Math.sin((n + 1.5) * Math.PI)) / 2); }; var _488 = function (_489) { this._properties = _489; for (var p in _489) { var prop = _489[p]; if (prop.start instanceof d.Color) { prop.tempColor = new d.Color(); } } this.getValue = function (r) { var ret = {}; for (var p in this._properties) { var prop = this._properties[p]; var _490 = prop.start; if (_490 instanceof d.Color) { ret[p] = d.blendColors(_490, prop.end, r, prop.tempColor).toCss(); } else { if (!d.isArray(_490)) { ret[p] = ((prop.end - _490) * r) + _490 + (p != "opacity" ? prop.units || "px" : ""); } } } return ret; }; }; dojo.animateProperty = function (args) { args.node = d.byId(args.node); if (!args.easing) { args.easing = d._defaultEasing; } var anim = new d._Animation(args); d.connect(anim, "beforeBegin", anim, function () { var pm = {}; for (var p in this.properties) { var prop = (pm[p] = d.mixin({}, this.properties[p])); if (d.isFunction(prop.start)) { prop.start = prop.start(); } if (d.isFunction(prop.end)) { prop.end = prop.end(); } var _496 = (p.toLowerCase().indexOf("color") >= 0); function getStyle(node, p) { var v = ({ height: node.offsetHeight, width: node.offsetWidth })[p]; if (v !== undefined) { return v; } v = d.style(node, p); return (p == "opacity") ? Number(v) : parseFloat(v); }; if (!("end" in prop)) { prop.end = getStyle(this.node, p); } else { if (!("start" in prop)) { prop.start = getStyle(this.node, p); } } if (_496) { prop.start = new d.Color(prop.start); prop.end = new d.Color(prop.end); } else { prop.start = (p == "opacity") ? Number(prop.start) : parseFloat(prop.start); } } this.curve = new _488(pm); }); d.connect(anim, "onAnimate", anim, function (_49a) { for (var s in _49a) { d.style(this.node, s, _49a[s]); } }); return anim; }; })(); } if (!dojo._hasResource["dojox.grid._grid.lib"]) { dojo._hasResource["dojox.grid._grid.lib"] = true; dojo.provide("dojox.grid._grid.lib"); dojo.isNumber = function (v) { return (typeof v == "number") || (v instanceof Number); }; dojo.mixin(dojox.grid, { na: "...", nop: function () { }, getTdIndex: function (td) { return td.cellIndex >= 0 ? td.cellIndex : dojo.indexOf(td.parentNode.cells, td); }, getTrIndex: function (tr) { return tr.rowIndex >= 0 ? tr.rowIndex : dojo.indexOf(tr.parentNode.childNodes, tr); }, getTr: function (_49f, _4a0) { return _49f && ((_49f.rows || 0)[_4a0] || _49f.childNodes[_4a0]); }, getTd: function (_4a1, _4a2, _4a3) { return (dojox.grid.getTr(inTable, _4a2) || 0)[_4a3]; }, findTable: function (node) { for (var n = node; n && n.tagName != "TABLE"; n = n.parentNode) { } return n; }, ascendDom: function (_4a6, _4a7) { for (var n = _4a6; n && _4a7(n); n = n.parentNode) { } return n; }, makeNotTagName: function (_4a9) { var name = _4a9.toUpperCase(); return function (node) { return node.tagName != name; }; }, fire: function (ob, ev, args) { var fn = ob && ev && ob[ev]; return fn && (args ? fn.apply(ob, args) : ob[ev]()); }, setStyleText: function (_4b0, _4b1) { if (_4b0.style.cssText == undefined) { _4b0.setAttribute("style", _4b1); } else { _4b0.style.cssText = _4b1; } }, getStyleText: function (_4b2, _4b3) { return (_4b2.style.cssText == undefined ? _4b2.getAttribute("style") : _4b2.style.cssText); }, setStyle: function (_4b4, _4b5, _4b6) { if (_4b4 && _4b4.style[_4b5] != _4b6) { _4b4.style[_4b5] = _4b6; } }, setStyleHeightPx: function (_4b7, _4b8) { if (_4b8 >= 0) { dojox.grid.setStyle(_4b7, "height", _4b8 + "px"); } }, mouseEvents: ["mouseover", "mouseout", "mousedown", "mouseup", "click", "dblclick", "contextmenu"], keyEvents: ["keyup", "keydown", "keypress"], funnelEvents: function (_4b9, _4ba, _4bb, _4bc) { var evts = (_4bc ? _4bc : dojox.grid.mouseEvents.concat(dojox.grid.keyEvents)); for (var i = 0, l = evts.length; i < l; i++) { dojo.connect(_4b9, "on" + evts[i], _4ba, _4bb); } }, removeNode: function (_4c0) { _4c0 = dojo.byId(_4c0); _4c0 && _4c0.parentNode && _4c0.parentNode.removeChild(_4c0); return _4c0; }, getScrollbarWidth: function () { if (this._scrollBarWidth) { return this._scrollBarWidth; } this._scrollBarWidth = 18; try { var e = document.createElement("div"); e.style.cssText = "top:0;left:0;width:100px;height:100px;overflow:scroll;position:absolute;visibility:hidden;"; document.body.appendChild(e); this._scrollBarWidth = e.offsetWidth - e.clientWidth; document.body.removeChild(e); delete e; } catch (ex) { } return this._scrollBarWidth; }, getRef: function (name, _4c3, _4c4) { var obj = _4c4 || dojo.global, _4c6 = name.split("."), prop = _4c6.pop(); for (var i = 0, p; obj && (p = _4c6[i]); i++) { obj = (p in obj ? obj[p] : (_4c3 ? obj[p] = {} : undefined)); } return { obj: obj, prop: prop }; }, getProp: function (name, _4cb, _4cc) { with (dojox.grid.getRef(name, _4cb, _4cc)) { return (obj) && (prop) && (prop in obj ? obj[prop] : (_4cb ? obj[prop] = {} : undefined)); } }, indexInParent: function (_4cd) { var i = 0, n, p = _4cd.parentNode; while (n = p.childNodes[i++]) { if (n == _4cd) { return i - 1; } } return -1; }, cleanNode: function (_4d1) { if (!_4d1) { return; } var _4d2 = function (inW) { return inW.domNode && dojo.isDescendant(inW.domNode, _4d1, true); }; var ws = dijit.registry.filter(_4d2); for (var i = 0, w; (w = ws[i]); i++) { w.destroy(); } delete ws; }, getTagName: function (_4d7) { var node = dojo.byId(_4d7); return (node && node.tagName ? node.tagName.toLowerCase() : ""); }, nodeKids: function (_4d9, _4da) { var _4db = []; var i = 0, n; while (n = _4d9.childNodes[i++]) { if (dojox.grid.getTagName(n) == _4da) { _4db.push(n); } } return _4db; }, divkids: function (_4de) { return dojox.grid.nodeKids(_4de, "div"); }, focusSelectNode: function (_4df) { try { dojox.grid.fire(_4df, "focus"); dojox.grid.fire(_4df, "select"); } catch (e) { } }, whenIdle: function () { setTimeout(dojo.hitch.apply(dojo, arguments), 0); }, arrayCompare: function (inA, inB) { for (var i = 0, l = inA.length; i < l; i++) { if (inA[i] != inB[i]) { return false; } } return (inA.length == inB.length); }, arrayInsert: function (_4e4, _4e5, _4e6) { if (_4e4.length <= _4e5) { _4e4[_4e5] = _4e6; } else { _4e4.splice(_4e5, 0, _4e6); } }, arrayRemove: function (_4e7, _4e8) { _4e7.splice(_4e8, 1); }, arraySwap: function (_4e9, inI, inJ) { var _4ec = _4e9[inI]; _4e9[inI] = _4e9[inJ]; _4e9[inJ] = _4ec; }, initTextSizePoll: function (_4ed) { var f = document.createElement("div"); with (f.style) { top = "0px"; left = "0px"; position = "absolute"; visibility = "hidden"; } f.innerHTML = "TheQuickBrownFoxJumpedOverTheLazyDog"; document.body.appendChild(f); var fw = f.offsetWidth; var job = function () { if (f.offsetWidth != fw) { fw = f.offsetWidth; dojox.grid.textSizeChanged(); } }; window.setInterval(job, _4ed || 200); dojox.grid.initTextSizePoll = dojox.grid.nop; }, textSizeChanged: function () { } }); dojox.grid.jobs = { cancel: function (_4f1) { if (_4f1) { window.clearTimeout(_4f1); } }, jobs: [], job: function (_4f2, _4f3, _4f4) { dojox.grid.jobs.cancelJob(_4f2); var job = function () { delete dojox.grid.jobs.jobs[_4f2]; _4f4(); }; dojox.grid.jobs.jobs[_4f2] = setTimeout(job, _4f3); }, cancelJob: function (_4f6) { dojox.grid.jobs.cancel(dojox.grid.jobs.jobs[_4f6]); } }; } if (!dojo._hasResource["dojox.grid._grid.scroller"]) { dojo._hasResource["dojox.grid._grid.scroller"] = true; dojo.provide("dojox.grid._grid.scroller"); dojo.declare("dojox.grid.scroller.base", null, { constructor: function () { this.pageHeights = []; this.stack = []; }, rowCount: 0, defaultRowHeight: 10, keepRows: 100, contentNode: null, scrollboxNode: null, defaultPageHeight: 0, keepPages: 10, pageCount: 0, windowHeight: 0, firstVisibleRow: 0, lastVisibleRow: 0, page: 0, pageTop: 0, init: function (_4f7, _4f8, _4f9) { switch (arguments.length) { case 3: this.rowsPerPage = _4f9; case 2: this.keepRows = _4f8; case 1: this.rowCount = _4f7; } this.defaultPageHeight = this.defaultRowHeight * this.rowsPerPage; this.pageCount = Math.ceil(this.rowCount / this.rowsPerPage); this.keepPages = Math.max(Math.ceil(this.keepRows / this.rowsPerPage), 2); this.invalidate(); if (this.scrollboxNode) { this.scrollboxNode.scrollTop = 0; this.scroll(0); this.scrollboxNode.onscroll = dojo.hitch(this, "onscroll"); } }, invalidate: function () { this.invalidateNodes(); this.pageHeights = []; this.height = (this.pageCount ? (this.pageCount - 1) * this.defaultPageHeight + this.calcLastPageHeight() : 0); this.resize(); }, updateRowCount: function (_4fa) { this.invalidateNodes(); this.rowCount = _4fa; oldPageCount = this.pageCount; this.pageCount = Math.ceil(this.rowCount / this.rowsPerPage); if (this.pageCount < oldPageCount) { for (var i = oldPageCount - 1; i >= this.pageCount; i--) { this.height -= this.getPageHeight(i); delete this.pageHeights[i]; } } else { if (this.pageCount > oldPageCount) { this.height += this.defaultPageHeight * (this.pageCount - oldPageCount - 1) + this.calcLastPageHeight(); } } this.resize(); }, pageExists: function (_4fc) { }, measurePage: function (_4fd) { }, positionPage: function (_4fe, _4ff) { }, repositionPages: function (_500) { }, installPage: function (_501) { }, preparePage: function (_502, _503, _504) { }, renderPage: function (_505) { }, removePage: function (_506) { }, pacify: function (_507) { }, pacifying: false, pacifyTicks: 200, setPacifying: function (_508) { if (this.pacifying != _508) { this.pacifying = _508; this.pacify(this.pacifying); } }, startPacify: function () { this.startPacifyTicks = new Date().getTime(); }, doPacify: function () { var _509 = (new Date().getTime() - this.startPacifyTicks) > this.pacifyTicks; this.setPacifying(true); this.startPacify(); return _509; }, endPacify: function () { this.setPacifying(false); }, resize: function () { if (this.scrollboxNode) { this.windowHeight = this.scrollboxNode.clientHeight; } dojox.grid.setStyleHeightPx(this.contentNode, this.height); }, calcLastPageHeight: function () { if (!this.pageCount) { return 0; } var _50a = this.pageCount - 1; var _50b = ((this.rowCount % this.rowsPerPage) || (this.rowsPerPage)) * this.defaultRowHeight; this.pageHeights[_50a] = _50b; return _50b; }, updateContentHeight: function (inDh) { this.height += inDh; this.resize(); }, updatePageHeight: function (_50d) { if (this.pageExists(_50d)) { var oh = this.getPageHeight(_50d); var h = (this.measurePage(_50d)) || (oh); this.pageHeights[_50d] = h; if ((h) && (oh != h)) { this.updateContentHeight(h - oh); this.repositionPages(_50d); } } }, rowHeightChanged: function (_510) { this.updatePageHeight(Math.floor(_510 / this.rowsPerPage)); }, invalidateNodes: function () { while (this.stack.length) { this.destroyPage(this.popPage()); } }, createPageNode: function () { var p = document.createElement("div"); p.style.position = "absolute"; p.style.left = "0"; return p; }, getPageHeight: function (_512) { var ph = this.pageHeights[_512]; return (ph !== undefined ? ph : this.defaultPageHeight); }, pushPage: function (_514) { return this.stack.push(_514); }, popPage: function () { return this.stack.shift(); }, findPage: function (_515) { var i = 0, h = 0; for (var ph = 0; i < this.pageCount; i++, h += ph) { ph = this.getPageHeight(i); if (h + ph >= _515) { break; } } this.page = i; this.pageTop = h; }, buildPage: function (_519, _51a, _51b) { this.preparePage(_519, _51a); this.positionPage(_519, _51b); this.installPage(_519); this.renderPage(_519); this.pushPage(_519); }, needPage: function (_51c, _51d) { var h = this.getPageHeight(_51c), oh = h; if (!this.pageExists(_51c)) { this.buildPage(_51c, (this.keepPages) && (this.stack.length >= this.keepPages), _51d); h = this.measurePage(_51c) || h; this.pageHeights[_51c] = h; if (h && (oh != h)) { this.updateContentHeight(h - oh); } } else { this.positionPage(_51c, _51d); } return h; }, onscroll: function () { this.scroll(this.scrollboxNode.scrollTop); }, scroll: function (_520) { this.startPacify(); this.findPage(_520); var h = this.height; var b = this.getScrollBottom(_520); for (var p = this.page, y = this.pageTop; (p < this.pageCount) && ((b < 0) || (y < b)); p++) { y += this.needPage(p, y); } this.firstVisibleRow = this.getFirstVisibleRow(this.page, this.pageTop, _520); this.lastVisibleRow = this.getLastVisibleRow(p - 1, y, b); if (h != this.height) { this.repositionPages(p - 1); } this.endPacify(); }, getScrollBottom: function (_525) { return (this.windowHeight >= 0 ? _525 + this.windowHeight : -1); }, processNodeEvent: function (e, _527) { var t = e.target; while (t && (t != _527) && t.parentNode && (t.parentNode.parentNode != _527)) { t = t.parentNode; } if (!t || !t.parentNode || (t.parentNode.parentNode != _527)) { return false; } var page = t.parentNode; e.topRowIndex = page.pageIndex * this.rowsPerPage; e.rowIndex = e.topRowIndex + dojox.grid.indexInParent(t); e.rowTarget = t; return true; }, processEvent: function (e) { return this.processNodeEvent(e, this.contentNode); }, dummy: 0 }); dojo.declare("dojox.grid.scroller", dojox.grid.scroller.base, { constructor: function () { this.pageNodes = []; }, renderRow: function (_52b, _52c) { }, removeRow: function (_52d) { }, getDefaultNodes: function () { return this.pageNodes; }, getDefaultPageNode: function (_52e) { return this.getDefaultNodes()[_52e]; }, positionPageNode: function (_52f, _530) { _52f.style.top = _530 + "px"; }, getPageNodePosition: function (_531) { return _531.offsetTop; }, repositionPageNodes: function (_532, _533) { var last = 0; for (var i = 0; i < this.stack.length; i++) { last = Math.max(this.stack[i], last); } var n = _533[_532]; var y = (n ? this.getPageNodePosition(n) + this.getPageHeight(_532) : 0); for (var p = _532 + 1; p <= last; p++) { n = _533[p]; if (n) { if (this.getPageNodePosition(n) == y) { return; } this.positionPage(p, y); } y += this.getPageHeight(p); } }, invalidatePageNode: function (_539, _53a) { var p = _53a[_539]; if (p) { delete _53a[_539]; this.removePage(_539, p); dojox.grid.cleanNode(p); p.innerHTML = ""; } return p; }, preparePageNode: function (_53c, _53d, _53e) { var p = (_53d === null ? this.createPageNode() : this.invalidatePageNode(_53d, _53e)); p.pageIndex = _53c; p.id = "page-" + _53c; _53e[_53c] = p; }, pageExists: function (_540) { return Boolean(this.getDefaultPageNode(_540)); }, measurePage: function (_541) { return this.getDefaultPageNode(_541).offsetHeight; }, positionPage: function (_542, _543) { this.positionPageNode(this.getDefaultPageNode(_542), _543); }, repositionPages: function (_544) { this.repositionPageNodes(_544, this.getDefaultNodes()); }, preparePage: function (_545, _546) { this.preparePageNode(_545, (_546 ? this.popPage() : null), this.getDefaultNodes()); }, installPage: function (_547) { this.contentNode.appendChild(this.getDefaultPageNode(_547)); }, destroyPage: function (_548) { var p = this.invalidatePageNode(_548, this.getDefaultNodes()); dojox.grid.removeNode(p); }, renderPage: function (_54a) { var node = this.pageNodes[_54a]; for (var i = 0, j = _54a * this.rowsPerPage; (i < this.rowsPerPage) && (j < this.rowCount); i++, j++) { this.renderRow(j, node); } }, removePage: function (_54e) { for (var i = 0, j = _54e * this.rowsPerPage; i < this.rowsPerPage; i++, j++) { this.removeRow(j); } }, getPageRow: function (_551) { return _551 * this.rowsPerPage; }, getLastPageRow: function (_552) { return Math.min(this.rowCount, this.getPageRow(_552 + 1)) - 1; }, getFirstVisibleRowNodes: function (_553, _554, _555, _556) { var row = this.getPageRow(_553); var rows = dojox.grid.divkids(_556[_553]); for (var i = 0, l = rows.length; i < l && _554 < _555; i++, row++) { _554 += rows[i].offsetHeight; } return (row ? row - 1 : row); }, getFirstVisibleRow: function (_55b, _55c, _55d) { if (!this.pageExists(_55b)) { return 0; } return this.getFirstVisibleRowNodes(_55b, _55c, _55d, this.getDefaultNodes()); }, getLastVisibleRowNodes: function (_55e, _55f, _560, _561) { var row = this.getLastPageRow(_55e); var rows = dojox.grid.divkids(_561[_55e]); for (var i = rows.length - 1; i >= 0 && _55f > _560; i--, row--) { _55f -= rows[i].offsetHeight; } return row + 1; }, getLastVisibleRow: function (_565, _566, _567) { if (!this.pageExists(_565)) { return 0; } return this.getLastVisibleRowNodes(_565, _566, _567, this.getDefaultNodes()); }, findTopRowForNodes: function (_568, _569) { var rows = dojox.grid.divkids(_569[this.page]); for (var i = 0, l = rows.length, t = this.pageTop, h; i < l; i++) { h = rows[i].offsetHeight; t += h; if (t >= _568) { this.offset = h - (t - _568); return i + this.page * this.rowsPerPage; } } return -1; }, findScrollTopForNodes: function (_56f, _570) { var _571 = Math.floor(_56f / this.rowsPerPage); var t = 0; for (var i = 0; i < _571; i++) { t += this.getPageHeight(i); } this.pageTop = t; this.needPage(_571, this.pageTop); var rows = dojox.grid.divkids(_570[_571]); var r = _56f - this.rowsPerPage * _571; for (var i = 0, l = rows.length; i < l && i < r; i++) { t += rows[i].offsetHeight; } return t; }, findTopRow: function (_577) { return this.findTopRowForNodes(_577, this.getDefaultNodes()); }, findScrollTop: function (_578) { return this.findScrollTopForNodes(_578, this.getDefaultNodes()); }, dummy: 0 }); dojo.declare("dojox.grid.scroller.columns", dojox.grid.scroller, { constructor: function (_579) { this.setContentNodes(_579); }, setContentNodes: function (_57a) { this.contentNodes = _57a; this.colCount = (this.contentNodes ? this.contentNodes.length : 0); this.pageNodes = []; for (var i = 0; i < this.colCount; i++) { this.pageNodes[i] = []; } }, getDefaultNodes: function () { return this.pageNodes[0] || []; }, scroll: function (_57c) { if (this.colCount) { dojox.grid.scroller.prototype.scroll.call(this, _57c); } }, resize: function () { if (this.scrollboxNode) { this.windowHeight = this.scrollboxNode.clientHeight; } for (var i = 0; i < this.colCount; i++) { dojox.grid.setStyleHeightPx(this.contentNodes[i], this.height); } }, positionPage: function (_57e, _57f) { for (var i = 0; i < this.colCount; i++) { this.positionPageNode(this.pageNodes[i][_57e], _57f); } }, preparePage: function (_581, _582) { var p = (_582 ? this.popPage() : null); for (var i = 0; i < this.colCount; i++) { this.preparePageNode(_581, p, this.pageNodes[i]); } }, installPage: function (_585) { for (var i = 0; i < this.colCount; i++) { this.contentNodes[i].appendChild(this.pageNodes[i][_585]); } }, destroyPage: function (_587) { for (var i = 0; i < this.colCount; i++) { dojox.grid.removeNode(this.invalidatePageNode(_587, this.pageNodes[i])); } }, renderPage: function (_589) { var _58a = []; for (var i = 0; i < this.colCount; i++) { _58a[i] = this.pageNodes[i][_589]; } for (var i = 0, j = _589 * this.rowsPerPage; (i < this.rowsPerPage) && (j < this.rowCount); i++, j++) { this.renderRow(j, _58a); } } }); } if (!dojo._hasResource["dijit._base.focus"]) { dojo._hasResource["dijit._base.focus"] = true; dojo.provide("dijit._base.focus"); dojo.mixin(dijit, { _curFocus: null, _prevFocus: null, isCollapsed: function () { var _58d = dojo.global; var _58e = dojo.doc; if (_58e.selection) { return !_58e.selection.createRange().text; } else { if (_58d.getSelection) { var _58f = _58d.getSelection(); if (dojo.isString(_58f)) { return !_58f; } else { return _58f.isCollapsed || !_58f.toString(); } } } }, getBookmark: function () { var _590, _591 = dojo.doc.selection; if (_591) { var _592 = _591.createRange(); if (_591.type.toUpperCase() == "CONTROL") { _590 = _592.length ? dojo._toArray(_592) : null; } else { _590 = _592.getBookmark(); } } else { if (dojo.global.getSelection) { _591 = dojo.global.getSelection(); if (_591) { var _592 = _591.getRangeAt(0); _590 = _592.cloneRange(); } } else { console.debug("No idea how to store the current selection for this browser!"); } } return _590; }, moveToBookmark: function (_593) { var _594 = dojo.doc; if (_594.selection) { var _595; if (dojo.isArray(_593)) { _595 = _594.body.createControlRange(); dojo.forEach(_593, _595.addElement); } else { _595 = _594.selection.createRange(); _595.moveToBookmark(_593); } _595.select(); } else { var _596 = dojo.global.getSelection && dojo.global.getSelection(); if (_596 && _596.removeAllRanges) { _596.removeAllRanges(); _596.addRange(_593); } else { console.debug("No idea how to restore selection for this browser!"); } } }, getFocus: function (menu, _598) { return { node: menu && dojo.isDescendant(dijit._curFocus, menu.domNode) ? dijit._prevFocus : dijit._curFocus, bookmark: !dojo.withGlobal(_598 || dojo.global, dijit.isCollapsed) ? dojo.withGlobal(_598 || dojo.global, dijit.getBookmark) : null, openedForWindow: _598 }; }, focus: function (_599) { if (!_599) { return; } var node = "node" in _599 ? _599.node : _599, _59b = _599.bookmark, _59c = _599.openedForWindow; if (node) { var _59d = (node.tagName.toLowerCase() == "iframe") ? node.contentWindow : node; if (_59d && _59d.focus) { try { _59d.focus(); } catch (e) { } } dijit._onFocusNode(node); } if (_59b && dojo.withGlobal(_59c || dojo.global, dijit.isCollapsed)) { if (_59c) { _59c.focus(); } try { dojo.withGlobal(_59c || dojo.global, moveToBookmark, null, [_59b]); } catch (e) { } } }, _activeStack: [], registerWin: function (_59e) { if (!_59e) { _59e = window; } dojo.connect(_59e.document, "onmousedown", null, function (evt) { dijit._justMouseDowned = true; setTimeout(function () { dijit._justMouseDowned = false; }, 0); dijit._onTouchNode(evt.target || evt.srcElement); }); var body = _59e.document.body || _59e.document.getElementsByTagName("body")[0]; if (body) { if (dojo.isIE) { body.attachEvent("onactivate", function (evt) { if (evt.srcElement.tagName.toLowerCase() != "body") { dijit._onFocusNode(evt.srcElement); } }); body.attachEvent("ondeactivate", function (evt) { dijit._onBlurNode(evt.srcElement); }); } else { body.addEventListener("focus", function (evt) { dijit._onFocusNode(evt.target); }, true); body.addEventListener("blur", function (evt) { dijit._onBlurNode(evt.target); }, true); } } body = null; }, _onBlurNode: function (node) { dijit._prevFocus = dijit._curFocus; dijit._curFocus = null; var w = dijit.getEnclosingWidget(node); if (w && w._setStateClass) { w._focused = false; w._setStateClass(); } if (dijit._justMouseDowned) { return; } if (dijit._clearActiveWidgetsTimer) { clearTimeout(dijit._clearActiveWidgetsTimer); } dijit._clearActiveWidgetsTimer = setTimeout(function () { delete dijit._clearActiveWidgetsTimer; dijit._setStack([]); }, 100); }, _onTouchNode: function (node) { if (dijit._clearActiveWidgetsTimer) { clearTimeout(dijit._clearActiveWidgetsTimer); delete dijit._clearActiveWidgetsTimer; } var _5a8 = []; try { while (node) { if (node.dijitPopupParent) { node = dijit.byId(node.dijitPopupParent).domNode; } else { if (node.tagName && node.tagName.toLowerCase() == "body") { if (node === dojo.body()) { break; } node = dojo.query("iframe").filter(function (_5a9) { return _5a9.contentDocument.body === node; })[0]; } else { var id = node.getAttribute && node.getAttribute("widgetId"); if (id) { _5a8.unshift(id); } node = node.parentNode; } } } } catch (e) { } dijit._setStack(_5a8); }, _onFocusNode: function (node) { if (node && node.tagName && node.tagName.toLowerCase() == "body") { return; } dijit._onTouchNode(node); if (node == dijit._curFocus) { return; } dijit._prevFocus = dijit._curFocus; dijit._curFocus = node; dojo.publish("focusNode", [node]); var w = dijit.getEnclosingWidget(node); if (w && w._setStateClass) { w._focused = true; w._setStateClass(); } }, _setStack: function (_5ad) { var _5ae = dijit._activeStack; dijit._activeStack = _5ad; for (var _5af = 0; _5af < Math.min(_5ae.length, _5ad.length); _5af++) { if (_5ae[_5af] != _5ad[_5af]) { break; } } for (var i = _5ae.length - 1; i >= _5af; i--) { var _5b1 = dijit.byId(_5ae[i]); if (_5b1) { dojo.publish("widgetBlur", [_5b1]); if (_5b1._onBlur) { _5b1._onBlur(); } } } for (var i = _5af; i < _5ad.length; i++) { var _5b1 = dijit.byId(_5ad[i]); if (_5b1) { dojo.publish("widgetFocus", [_5b1]); if (_5b1._onFocus) { _5b1._onFocus(); } } } } }); dojo.addOnLoad(dijit.registerWin); } if (!dojo._hasResource["dijit._base.manager"]) { dojo._hasResource["dijit._base.manager"] = true; dojo.provide("dijit._base.manager"); dojo.declare("dijit.WidgetSet", null, { constructor: function () { this._hash = {}; }, add: function (_5b2) { if (this._hash[_5b2.id]) { throw new Error("Tried to register widget with id==" + _5b2.id + " but that id is already registered"); } this._hash[_5b2.id] = _5b2; }, remove: function (id) { delete this._hash[id]; }, forEach: function (func) { for (var id in this._hash) { func(this._hash[id]); } }, filter: function (_5b6) { var res = new dijit.WidgetSet(); this.forEach(function (_5b8) { if (_5b6(_5b8)) { res.add(_5b8); } }); return res; }, byId: function (id) { return this._hash[id]; }, byClass: function (cls) { return this.filter(function (_5bb) { return _5bb.declaredClass == cls; }); } }); dijit.registry = new dijit.WidgetSet(); dijit._widgetTypeCtr = {}; dijit.getUniqueId = function (_5bc) { var id; do { id = _5bc + "_" + (dijit._widgetTypeCtr[_5bc] !== undefined ? ++dijit._widgetTypeCtr[_5bc] : dijit._widgetTypeCtr[_5bc] = 0); } while (dijit.byId(id)); return id; }; if (dojo.isIE) { dojo.addOnUnload(function () { dijit.registry.forEach(function (_5be) { _5be.destroy(); }); }); } dijit.byId = function (id) { return (dojo.isString(id)) ? dijit.registry.byId(id) : id; }; dijit.byNode = function (node) { return dijit.registry.byId(node.getAttribute("widgetId")); }; dijit.getEnclosingWidget = function (node) { while (node) { if (node.getAttribute && node.getAttribute("widgetId")) { return dijit.registry.byId(node.getAttribute("widgetId")); } node = node.parentNode; } return null; }; } if (!dojo._hasResource["dijit._base.place"]) { dojo._hasResource["dijit._base.place"] = true; dojo.provide("dijit._base.place"); dijit.getViewport = function () { var _5c2 = dojo.global; var _5c3 = dojo.doc; var w = 0, h = 0; if (dojo.isMozilla) { var minw, minh, maxw, maxh; if (_5c3.body.clientWidth > _5c3.documentElement.clientWidth) { minw = _5c3.documentElement.clientWidth; maxw = _5c3.body.clientWidth; } else { maxw = _5c3.documentElement.clientWidth; minw = _5c3.body.clientWidth; } if (_5c3.body.clientHeight > _5c3.documentElement.clientHeight) { minh = _5c3.documentElement.clientHeight; maxh = _5c3.body.clientHeight; } else { maxh = _5c3.documentElement.clientHeight; minh = _5c3.body.clientHeight; } w = (maxw > _5c2.innerWidth) ? minw : maxw; h = (maxh > _5c2.innerHeight) ? minh : maxh; } else { if (!dojo.isOpera && _5c2.innerWidth) { w = _5c2.innerWidth; h = _5c2.innerHeight; } else { if (dojo.isIE && _5c3.documentElement && _5c3.documentElement.clientHeight) { w = _5c3.documentElement.clientWidth; h = _5c3.documentElement.clientHeight; } else { if (dojo.body().clientWidth) { w = dojo.body().clientWidth; h = dojo.body().clientHeight; } } } } var _5ca = dojo._docScroll(); return { w: w, h: h, l: _5ca.x, t: _5ca.y }; }; dijit.placeOnScreen = function (node, pos, _5cd, _5ce) { var _5cf = dojo.map(_5cd, function (_5d0) { return { corner: _5d0, pos: pos }; }); return dijit._place(node, _5cf); }; dijit._place = function (node, _5d2, _5d3) { var view = dijit.getViewport(); if (!node.parentNode || String(node.parentNode.tagName).toLowerCase() != "body") { dojo.body().appendChild(node); } var best = null; for (var i = 0; i < _5d2.length; i++) { var _5d7 = _5d2[i].corner; var pos = _5d2[i].pos; if (_5d3) { _5d3(_5d7); } var _5d9 = node.style.display; var _5da = node.style.visibility; node.style.visibility = "hidden"; node.style.display = ""; var mb = dojo.marginBox(node); node.style.display = _5d9; node.style.visibility = _5da; var _5dc = (_5d7.charAt(1) == "L" ? pos.x : Math.max(view.l, pos.x - mb.w)), _5dd = (_5d7.charAt(0) == "T" ? pos.y : Math.max(view.t, pos.y - mb.h)), endX = (_5d7.charAt(1) == "L" ? Math.min(view.l + view.w, _5dc + mb.w) : pos.x), endY = (_5d7.charAt(0) == "T" ? Math.min(view.t + view.h, _5dd + mb.h) : pos.y), _5e0 = endX - _5dc, _5e1 = endY - _5dd, _5e2 = (mb.w - _5e0) + (mb.h - _5e1); if (best == null || _5e2 < best.overflow) { best = { corner: _5d7, aroundCorner: _5d2[i].aroundCorner, x: _5dc, y: _5dd, w: _5e0, h: _5e1, overflow: _5e2 }; } if (_5e2 == 0) { break; } } node.style.left = best.x + "px"; node.style.top = best.y + "px"; return best; }; dijit.placeOnScreenAroundElement = function (node, _5e4, _5e5, _5e6) { _5e4 = dojo.byId(_5e4); var _5e7 = _5e4.style.display; _5e4.style.display = ""; var _5e8 = _5e4.offsetWidth; var _5e9 = _5e4.offsetHeight; var _5ea = dojo.coords(_5e4, true); _5e4.style.display = _5e7; var _5eb = []; for (var _5ec in _5e5) { _5eb.push({ aroundCorner: _5ec, corner: _5e5[_5ec], pos: { x: _5ea.x + (_5ec.charAt(1) == "L" ? 0 : _5e8), y: _5ea.y + (_5ec.charAt(0) == "T" ? 0 : _5e9)} }); } return dijit._place(node, _5eb, _5e6); }; } if (!dojo._hasResource["dijit._base.window"]) { dojo._hasResource["dijit._base.window"] = true; dojo.provide("dijit._base.window"); dijit.getDocumentWindow = function (doc) { if (dojo.isSafari && !doc._parentWindow) { var fix = function (win) { win.document._parentWindow = win; for (var i = 0; i < win.frames.length; i++) { fix(win.frames[i]); } }; fix(window.top); } if (dojo.isIE && window !== document.parentWindow && !doc._parentWindow) { doc.parentWindow.execScript("document._parentWindow = window;", "Javascript"); var win = doc._parentWindow; doc._parentWindow = null; return win; } return doc._parentWindow || doc.parentWindow || doc.defaultView; }; } if (!dojo._hasResource["dijit._base.popup"]) { dojo._hasResource["dijit._base.popup"] = true; dojo.provide("dijit._base.popup"); dijit.popup = new function () { var _5f2 = [], _5f3 = 1000, _5f4 = 1; this.open = function (args) { var _5f6 = args.popup, _5f7 = args.orient || { "BL": "TL", "TL": "BL" }, _5f8 = args.around, id = (args.around && args.around.id) ? (args.around.id + "_dropdown") : ("popup_" + _5f4++); var _5fa = dojo.doc.createElement("div"); _5fa.id = id; _5fa.className = "dijitPopup"; _5fa.style.zIndex = _5f3 + _5f2.length; _5fa.style.visibility = "hidden"; if (args.parent) { _5fa.dijitPopupParent = args.parent.id; } dojo.body().appendChild(_5fa); _5f6.domNode.style.display = ""; _5fa.appendChild(_5f6.domNode); var _5fb = new dijit.BackgroundIframe(_5fa); var best = _5f8 ? dijit.placeOnScreenAroundElement(_5fa, _5f8, _5f7, _5f6.orient ? dojo.hitch(_5f6, "orient") : null) : dijit.placeOnScreen(_5fa, args, _5f7 == "R" ? ["TR", "BR", "TL", "BL"] : ["TL", "BL", "TR", "BR"]); _5fa.style.visibility = "visible"; var _5fd = []; function getTopPopup() { for (var pi = _5f2.length - 1; pi > 0 && _5f2[pi].parent === _5f2[pi - 1].widget; pi--) { } return _5f2[pi]; }; _5fd.push(dojo.connect(_5fa, "onkeypress", this, function (evt) { if (evt.keyCode == dojo.keys.ESCAPE && args.onCancel) { args.onCancel(); } else { if (evt.keyCode == dojo.keys.TAB) { dojo.stopEvent(evt); var _600 = getTopPopup(); if (_600 && _600.onCancel) { _600.onCancel(); } } } })); if (_5f6.onCancel) { _5fd.push(dojo.connect(_5f6, "onCancel", null, args.onCancel)); } _5fd.push(dojo.connect(_5f6, _5f6.onExecute ? "onExecute" : "onChange", null, function () { var _601 = getTopPopup(); if (_601 && _601.onExecute) { _601.onExecute(); } })); _5f2.push({ wrapper: _5fa, iframe: _5fb, widget: _5f6, parent: args.parent, onExecute: args.onExecute, onCancel: args.onCancel, onClose: args.onClose, handlers: _5fd }); if (_5f6.onOpen) { _5f6.onOpen(best); } return best; }; this.close = function (_602) { while (dojo.some(_5f2, function (elem) { return elem.widget == _602; })) { var top = _5f2.pop(), _605 = top.wrapper, _606 = top.iframe, _607 = top.widget, _608 = top.onClose; if (_607.onClose) { _607.onClose(); } dojo.forEach(top.handlers, dojo.disconnect); if (!_607 || !_607.domNode) { return; } dojo.style(_607.domNode, "display", "none"); dojo.body().appendChild(_607.domNode); _606.destroy(); dojo._destroyElement(_605); if (_608) { _608(); } } }; } (); dijit._frames = new function () { var _609 = []; this.pop = function () { var _60a; if (_609.length) { _60a = _609.pop(); _60a.style.display = ""; } else { if (dojo.isIE) { var html = "<iframe src='javascript:\"\"'" + " style='position: absolute; left: 0px; top: 0px;" + "z-index: -1; filter:Alpha(Opacity=\"0\");'>"; _60a = dojo.doc.createElement(html); } else { var _60a = dojo.doc.createElement("iframe"); _60a.src = "javascript:\"\""; _60a.className = "dijitBackgroundIframe"; } _60a.tabIndex = -1; dojo.body().appendChild(_60a); } return _60a; }; this.push = function (_60c) { _60c.style.display = ""; if (dojo.isIE) { _60c.style.removeExpression("width"); _60c.style.removeExpression("height"); } _609.push(_60c); }; } (); if (dojo.isIE && dojo.isIE < 7) { dojo.addOnLoad(function () { var f = dijit._frames; dojo.forEach([f.pop()], f.push); }); } dijit.BackgroundIframe = function (node) { if (!node.id) { throw new Error("no id"); } if ((dojo.isIE && dojo.isIE < 7) || (dojo.isFF && dojo.isFF < 3 && dojo.hasClass(dojo.body(), "dijit_a11y"))) { var _60f = dijit._frames.pop(); node.appendChild(_60f); if (dojo.isIE) { _60f.style.setExpression("width", "document.getElementById('" + node.id + "').offsetWidth"); _60f.style.setExpression("height", "document.getElementById('" + node.id + "').offsetHeight"); } this.iframe = _60f; } }; dojo.extend(dijit.BackgroundIframe, { destroy: function () { if (this.iframe) { dijit._frames.push(this.iframe); delete this.iframe; } } }); } if (!dojo._hasResource["dijit._base.scroll"]) { dojo._hasResource["dijit._base.scroll"] = true; dojo.provide("dijit._base.scroll"); dijit.scrollIntoView = function (node) { if (dojo.isIE) { if (dojo.marginBox(node.parentNode).h <= node.parentNode.scrollHeight) { node.scrollIntoView(false); } } else { if (dojo.isMozilla) { node.scrollIntoView(false); } else { var _611 = node.parentNode; var _612 = _611.scrollTop + dojo.marginBox(_611).h; var _613 = node.offsetTop + dojo.marginBox(node).h; if (_612 < _613) { _611.scrollTop += (_613 - _612); } else { if (_611.scrollTop > node.offsetTop) { _611.scrollTop -= (_611.scrollTop - node.offsetTop); } } } } }; } if (!dojo._hasResource["dijit._base.sniff"]) { dojo._hasResource["dijit._base.sniff"] = true; dojo.provide("dijit._base.sniff"); (function () { var d = dojo; var ie = d.isIE; var _616 = d.isOpera; var maj = Math.floor; var _618 = { dj_ie: ie, dj_ie6: maj(ie) == 6, dj_ie7: maj(ie) == 7, dj_iequirks: ie && d.isQuirks, dj_opera: _616, dj_opera8: maj(_616) == 8, dj_opera9: maj(_616) == 9, dj_khtml: d.isKhtml, dj_safari: d.isSafari, dj_gecko: d.isMozilla }; for (var p in _618) { if (_618[p]) { var html = dojo.doc.documentElement; if (html.className) { html.className += " " + p; } else { html.className = p; } } } })(); } if (!dojo._hasResource["dijit._base.bidi"]) { dojo._hasResource["dijit._base.bidi"] = true; dojo.provide("dijit._base.bidi"); dojo.addOnLoad(function () { if (!dojo._isBodyLtr()) { dojo.addClass(dojo.body(), "dijitRtl"); } }); } if (!dojo._hasResource["dijit._base.typematic"]) { dojo._hasResource["dijit._base.typematic"] = true; dojo.provide("dijit._base.typematic"); dijit.typematic = { _fireEventAndReload: function () { this._timer = null; this._callback(++this._count, this._node, this._evt); this._currentTimeout = (this._currentTimeout < 0) ? this._initialDelay : ((this._subsequentDelay > 1) ? this._subsequentDelay : Math.round(this._currentTimeout * this._subsequentDelay)); this._timer = setTimeout(dojo.hitch(this, "_fireEventAndReload"), this._currentTimeout); }, trigger: function (evt, _61c, node, _61e, obj, _620, _621) { if (obj != this._obj) { this.stop(); this._initialDelay = _621 || 500; this._subsequentDelay = _620 || 0.9; this._obj = obj; this._evt = evt; this._node = node; this._currentTimeout = -1; this._count = -1; this._callback = dojo.hitch(_61c, _61e); this._fireEventAndReload(); } }, stop: function () { if (this._timer) { clearTimeout(this._timer); this._timer = null; } if (this._obj) { this._callback(-1, this._node, this._evt); this._obj = null; } }, addKeyListener: function (node, _623, _624, _625, _626, _627) { return [dojo.connect(node, "onkeypress", this, function (evt) { if (evt.keyCode == _623.keyCode && (!_623.charCode || _623.charCode == evt.charCode) && (_623.ctrlKey === undefined || _623.ctrlKey == evt.ctrlKey) && (_623.altKey === undefined || _623.altKey == evt.ctrlKey) && (_623.shiftKey === undefined || _623.shiftKey == evt.ctrlKey)) { dojo.stopEvent(evt); dijit.typematic.trigger(_623, _624, node, _625, _623, _626, _627); } else { if (dijit.typematic._obj == _623) { dijit.typematic.stop(); } } }), dojo.connect(node, "onkeyup", this, function (evt) { if (dijit.typematic._obj == _623) { dijit.typematic.stop(); } })]; }, addMouseListener: function (node, _62b, _62c, _62d, _62e) { var dc = dojo.connect; return [dc(node, "mousedown", this, function (evt) { dojo.stopEvent(evt); dijit.typematic.trigger(evt, _62b, node, _62c, node, _62d, _62e); }), dc(node, "mouseup", this, function (evt) { dojo.stopEvent(evt); dijit.typematic.stop(); }), dc(node, "mouseout", this, function (evt) { dojo.stopEvent(evt); dijit.typematic.stop(); }), dc(node, "mousemove", this, function (evt) { dojo.stopEvent(evt); }), dc(node, "dblclick", this, function (evt) { dojo.stopEvent(evt); if (dojo.isIE) { dijit.typematic.trigger(evt, _62b, node, _62c, node, _62d, _62e); setTimeout(dijit.typematic.stop, 50); } })]; }, addListener: function (_635, _636, _637, _638, _639, _63a, _63b) { return this.addKeyListener(_636, _637, _638, _639, _63a, _63b).concat(this.addMouseListener(_635, _638, _639, _63a, _63b)); } }; } if (!dojo._hasResource["dijit._base.wai"]) { dojo._hasResource["dijit._base.wai"] = true; dojo.provide("dijit._base.wai"); dijit.wai = { onload: function () { var div = document.createElement("div"); div.id = "a11yTestNode"; div.style.cssText = "border: 1px solid;" + "border-color:red green;" + "position: absolute;" + "height: 5px;" + "top: -999px;" + "background-image: url(\"" + dojo.moduleUrl("dijit", "form/templates/blank.gif") + "\");"; dojo.body().appendChild(div); function check() { var cs = dojo.getComputedStyle(div); if (cs) { var _63e = cs.backgroundImage; var _63f = (cs.borderTopColor == cs.borderRightColor) || (_63e != null && (_63e == "none" || _63e == "url(invalid-url:)")); dojo[_63f ? "addClass" : "removeClass"](dojo.body(), "dijit_a11y"); } }; check(); if (dojo.isIE) { setInterval(check, 4000); } } }; if (dojo.isIE || dojo.isMoz) { dojo._loaders.unshift(dijit.wai.onload); } dojo.mixin(dijit, { hasWaiRole: function (elem) { if (elem.hasAttribute) { return elem.hasAttribute("role"); } else { return elem.getAttribute("role") ? true : false; } }, getWaiRole: function (elem) { var _642 = elem.getAttribute("role"); if (_642) { var _643 = _642.indexOf(":"); return _643 == -1 ? _642 : _642.substring(_643 + 1); } else { return ""; } }, setWaiRole: function (elem, role) { if (dojo.isFF && dojo.isFF < 3) { elem.setAttribute("role", "wairole:" + role); } else { elem.setAttribute("role", role); } }, removeWaiRole: function (elem) { elem.removeAttribute("role"); }, hasWaiState: function (elem, _648) { if (dojo.isFF && dojo.isFF < 3) { return elem.hasAttributeNS("http://www.w3.org/2005/07/aaa", _648); } else { if (elem.hasAttribute) { return elem.hasAttribute("aria-" + _648); } else { return elem.getAttribute("aria-" + _648) ? true : false; } } }, getWaiState: function (elem, _64a) { if (dojo.isFF && dojo.isFF < 3) { return elem.getAttributeNS("http://www.w3.org/2005/07/aaa", _64a); } else { var _64b = elem.getAttribute("aria-" + _64a); return _64b ? _64b : ""; } }, setWaiState: function (elem, _64d, _64e) { if (dojo.isFF && dojo.isFF < 3) { elem.setAttributeNS("http://www.w3.org/2005/07/aaa", "aaa:" + _64d, _64e); } else { elem.setAttribute("aria-" + _64d, _64e); } }, removeWaiState: function (elem, _650) { if (dojo.isFF && dojo.isFF < 3) { elem.removeAttributeNS("http://www.w3.org/2005/07/aaa", _650); } else { elem.removeAttribute("aria-" + _650); } } }); } if (!dojo._hasResource["dijit._base"]) { dojo._hasResource["dijit._base"] = true; dojo.provide("dijit._base"); } if (!dojo._hasResource["dijit._Widget"]) { dojo._hasResource["dijit._Widget"] = true; dojo.provide("dijit._Widget"); dojo.declare("dijit._Widget", null, { id: "", lang: "", dir: "", "class": "", style: "", title: "", srcNodeRef: null, domNode: null, attributeMap: { id: "", dir: "", lang: "", "class": "", style: "", title: "" }, postscript: function (_651, _652) { this.create(_651, _652); }, create: function (_653, _654) { this.srcNodeRef = dojo.byId(_654); this._connects = []; this._attaches = []; if (this.srcNodeRef && (typeof this.srcNodeRef.id == "string")) { this.id = this.srcNodeRef.id; } if (_653) { dojo.mixin(this, _653); } this.postMixInProperties(); if (!this.id) { this.id = dijit.getUniqueId(this.declaredClass.replace(/\./g, "_")); } dijit.registry.add(this); this.buildRendering(); if (this.domNode) { for (var attr in this.attributeMap) { var _656 = this[this.attributeMap[attr] || "domNode"]; var _657 = this[attr]; if (typeof _657 != "object" && (_657 !== "" || (_653 && _653[attr]))) { switch (attr) { case "class": dojo.addClass(_656, _657); break; case "style": if (_656.style.cssText) { _656.style.cssText += "; " + _657; } else { _656.style.cssText = _657; } break; default: _656.setAttribute(attr, _657); } } } } if (this.domNode) { this.domNode.setAttribute("widgetId", this.id); } this.postCreate(); if (this.srcNodeRef && !this.srcNodeRef.parentNode) { delete this.srcNodeRef; } }, postMixInProperties: function () { }, buildRendering: function () { this.domNode = this.srcNodeRef || dojo.doc.createElement("div"); }, postCreate: function () { }, startup: function () { }, destroyRecursive: function (_658) { this.destroyDescendants(); this.destroy(); }, destroy: function (_659) { this.uninitialize(); dojo.forEach(this._connects, function (_65a) { dojo.forEach(_65a, dojo.disconnect); }); this.destroyRendering(_659); dijit.registry.remove(this.id); }, destroyRendering: function (_65b) { if (this.bgIframe) { this.bgIframe.destroy(); delete this.bgIframe; } if (this.domNode) { dojo._destroyElement(this.domNode); delete this.domNode; } if (this.srcNodeRef) { dojo._destroyElement(this.srcNodeRef); delete this.srcNodeRef; } }, destroyDescendants: function () { dojo.forEach(this.getDescendants(), function (_65c) { _65c.destroy(); }); }, uninitialize: function () { return false; }, toString: function () { return "[Widget " + this.declaredClass + ", " + (this.id || "NO ID") + "]"; }, getDescendants: function () { var list = dojo.query("[widgetId]", this.domNode); return list.map(dijit.byNode); }, nodesWithKeyClick: ["input", "button"], connect: function (obj, _65f, _660) { var _661 = []; if (_65f == "ondijitclick") { var w = this; if (!this.nodesWithKeyClick[obj.nodeName]) { _661.push(dojo.connect(obj, "onkeydown", this, function (e) { if (e.keyCode == dojo.keys.ENTER) { return (dojo.isString(_660)) ? w[_660](e) : _660.call(w, e); } else { if (e.keyCode == dojo.keys.SPACE) { dojo.stopEvent(e); } } })); _661.push(dojo.connect(obj, "onkeyup", this, function (e) { if (e.keyCode == dojo.keys.SPACE) { return dojo.isString(_660) ? w[_660](e) : _660.call(w, e); } })); } _65f = "onclick"; } _661.push(dojo.connect(obj, _65f, this, _660)); this._connects.push(_661); return _661; }, disconnect: function (_665) { for (var i = 0; i < this._connects.length; i++) { if (this._connects[i] == _665) { dojo.forEach(_665, dojo.disconnect); this._connects.splice(i, 1); return; } } }, isLeftToRight: function () { if (typeof this._ltr == "undefined") { this._ltr = dojo.getComputedStyle(this.domNode).direction != "rtl"; } return this._ltr; }, isFocusable: function () { return this.focus && (dojo.style(this.domNode, "display") != "none"); } }); } if (!dojo._hasResource["dojo.string"]) { dojo._hasResource["dojo.string"] = true; dojo.provide("dojo.string"); dojo.string.pad = function (text, size, ch, end) { var out = String(text); if (!ch) { ch = "0"; } while (out.length < size) { if (end) { out += ch; } else { out = ch + out; } } return out; }; dojo.string.substitute = function (_66c, map, _66e, _66f) { return _66c.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g, function (_670, key, _672) { var _673 = dojo.getObject(key, false, map); if (_672) { _673 = dojo.getObject(_672, false, _66f)(_673); } if (_66e) { _673 = _66e(_673, key); } return _673.toString(); }); }; dojo.string.trim = function (str) { str = str.replace(/^\s+/, ""); for (var i = str.length - 1; i > 0; i--) { if (/\S/.test(str.charAt(i))) { str = str.substring(0, i + 1); break; } } return str; }; } if (!dojo._hasResource["dojo.date.stamp"]) { dojo._hasResource["dojo.date.stamp"] = true; dojo.provide("dojo.date.stamp"); dojo.date.stamp.fromISOString = function (_676, _677) { if (!dojo.date.stamp._isoRegExp) { dojo.date.stamp._isoRegExp = /^(?:(\d{4})(?:-(\d{2})(?:-(\d{2}))?)?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(.\d+)?)?((?:[+-](\d{2}):(\d{2}))|Z)?)?$/; } var _678 = dojo.date.stamp._isoRegExp.exec(_676); var _679 = null; if (_678) { _678.shift(); _678[1] && _678[1]--; _678[6] && (_678[6] *= 1000); if (_677) { _677 = new Date(_677); dojo.map(["FullYear", "Month", "Date", "Hours", "Minutes", "Seconds", "Milliseconds"], function (prop) { return _677["get" + prop](); }).forEach(function (_67b, _67c) { if (_678[_67c] === undefined) { _678[_67c] = _67b; } }); } _679 = new Date(_678[0] || 1970, _678[1] || 0, _678[2] || 0, _678[3] || 0, _678[4] || 0, _678[5] || 0, _678[6] || 0); var _67d = 0; var _67e = _678[7] && _678[7].charAt(0); if (_67e != "Z") { _67d = ((_678[8] || 0) * 60) + (Number(_678[9]) || 0); if (_67e != "-") { _67d *= -1; } } if (_67e) { _67d -= _679.getTimezoneOffset(); } if (_67d) { _679.setTime(_679.getTime() + _67d * 60000); } } return _679; }; dojo.date.stamp.toISOString = function (_67f, _680) { var _ = function (n) { return (n < 10) ? "0" + n : n; }; _680 = _680 || {}; var _683 = []; var _684 = _680.zulu ? "getUTC" : "get"; var date = ""; if (_680.selector != "time") { date = [_67f[_684 + "FullYear"](), _(_67f[_684 + "Month"]() + 1), _(_67f[_684 + "Date"]())].join("-"); } _683.push(date); if (_680.selector != "date") { var time = [_(_67f[_684 + "Hours"]()), _(_67f[_684 + "Minutes"]()), _(_67f[_684 + "Seconds"]())].join(":"); var _687 = _67f[_684 + "Milliseconds"](); if (_680.milliseconds) { time += "." + (_687 < 100 ? "0" : "") + _(_687); } if (_680.zulu) { time += "Z"; } else { if (_680.selector != "time") { var _688 = _67f.getTimezoneOffset(); var _689 = Math.abs(_688); time += (_688 > 0 ? "-" : "+") + _(Math.floor(_689 / 60)) + ":" + _(_689 % 60); } } _683.push(time); } return _683.join("T"); }; } if (!dojo._hasResource["dojo.parser"]) { dojo._hasResource["dojo.parser"] = true; dojo.provide("dojo.parser"); dojo.parser = new function () { var d = dojo; function val2type(_68b) { if (d.isString(_68b)) { return "string"; } if (typeof _68b == "number") { return "number"; } if (typeof _68b == "boolean") { return "boolean"; } if (d.isFunction(_68b)) { return "function"; } if (d.isArray(_68b)) { return "array"; } if (_68b instanceof Date) { return "date"; } if (_68b instanceof d._Url) { return "url"; } return "object"; }; function str2obj(_68c, type) { switch (type) { case "string": return _68c; case "number": return _68c.length ? Number(_68c) : NaN; case "boolean": return typeof _68c == "boolean" ? _68c : !(_68c.toLowerCase() == "false"); case "function": if (d.isFunction(_68c)) { _68c = _68c.toString(); _68c = d.trim(_68c.substring(_68c.indexOf("{") + 1, _68c.length - 1)); } try { if (_68c.search(/[^\w\.]+/i) != -1) { _68c = d.parser._nameAnonFunc(new Function(_68c), this); } return d.getObject(_68c, false); } catch (e) { return new Function(); } case "array": return _68c.split(/\s*,\s*/); case "date": switch (_68c) { case "": return new Date(""); case "now": return new Date(); default: return d.date.stamp.fromISOString(_68c); } case "url": return d.baseUrl + _68c; default: return d.fromJson(_68c); } }; var _68e = {}; function getClassInfo(_68f) { if (!_68e[_68f]) { var cls = d.getObject(_68f); if (!d.isFunction(cls)) { throw new Error("Could not load class '" + _68f + "'. Did you spell the name correctly and use a full path, like 'dijit.form.Button'?"); } var _691 = cls.prototype; var _692 = {}; for (var name in _691) { if (name.charAt(0) == "_") { continue; } var _694 = _691[name]; _692[name] = val2type(_694); } _68e[_68f] = { cls: cls, params: _692 }; } return _68e[_68f]; }; this._functionFromScript = function (_695) { var _696 = ""; var _697 = ""; var _698 = _695.getAttribute("args"); if (_698) { d.forEach(_698.split(/\s*,\s*/), function (part, idx) { _696 += "var " + part + " = arguments[" + idx + "]; "; }); } var _69b = _695.getAttribute("with"); if (_69b && _69b.length) { d.forEach(_69b.split(/\s*,\s*/), function (part) { _696 += "with(" + part + "){"; _697 += "}"; }); } return new Function(_696 + _695.innerHTML + _697); }; this.instantiate = function (_69d) { var _69e = []; d.forEach(_69d, function (node) { if (!node) { return; } var type = node.getAttribute("dojoType"); if ((!type) || (!type.length)) { return; } var _6a1 = getClassInfo(type); var _6a2 = _6a1.cls; var ps = _6a2._noScript || _6a2.prototype._noScript; var _6a4 = {}; var _6a5 = node.attributes; for (var name in _6a1.params) { var item = _6a5.getNamedItem(name); if (!item || (!item.specified && (!dojo.isIE || name.toLowerCase() != "value"))) { continue; } var _6a8 = item.value; switch (name) { case "class": _6a8 = node.className; break; case "style": _6a8 = node.style && node.style.cssText; } var _6a9 = _6a1.params[name]; _6a4[name] = str2obj(_6a8, _6a9); } if (!ps) { var _6aa = [], _6ab = []; d.query("> script[type^='dojo/']", node).orphan().forEach(function (_6ac) { var _6ad = _6ac.getAttribute("event"), type = _6ac.getAttribute("type"), nf = d.parser._functionFromScript(_6ac); if (_6ad) { if (type == "dojo/connect") { _6aa.push({ event: _6ad, func: nf }); } else { _6a4[_6ad] = nf; } } else { _6ab.push(nf); } }); } var _6af = _6a2["markupFactory"]; if (!_6af && _6a2["prototype"]) { _6af = _6a2.prototype["markupFactory"]; } var _6b0 = _6af ? _6af(_6a4, node, _6a2) : new _6a2(_6a4, node); _69e.push(_6b0); var _6b1 = node.getAttribute("jsId"); if (_6b1) { d.setObject(_6b1, _6b0); } if (!ps) { dojo.forEach(_6aa, function (_6b2) { dojo.connect(_6b0, _6b2.event, null, _6b2.func); }); dojo.forEach(_6ab, function (func) { func.call(_6b0); }); } }); d.forEach(_69e, function (_6b4) { if (_6b4 && (_6b4.startup) && ((!_6b4.getParent) || (!_6b4.getParent()))) { _6b4.startup(); } }); return _69e; }; this.parse = function (_6b5) { var list = d.query("[dojoType]", _6b5); var _6b7 = this.instantiate(list); return _6b7; }; } (); (function () { var _6b8 = function () { if (djConfig["parseOnLoad"] == true) { dojo.parser.parse(); } }; if (dojo.exists("dijit.wai.onload") && (dijit.wai.onload === dojo._loaders[0])) { dojo._loaders.splice(1, 0, _6b8); } else { dojo._loaders.unshift(_6b8); } })(); dojo.parser._anonCtr = 0; dojo.parser._anon = {}; dojo.parser._nameAnonFunc = function (_6b9, _6ba) { var jpn = "$joinpoint"; var nso = (_6ba || dojo.parser._anon); if (dojo.isIE) { var cn = _6b9["__dojoNameCache"]; if (cn && nso[cn] === _6b9) { return _6b9["__dojoNameCache"]; } } var ret = "__" + dojo.parser._anonCtr++; while (typeof nso[ret] != "undefined") { ret = "__" + dojo.parser._anonCtr++; } nso[ret] = _6b9; return ret; }; } if (!dojo._hasResource["dijit._Templated"]) { dojo._hasResource["dijit._Templated"] = true; dojo.provide("dijit._Templated"); dojo.declare("dijit._Templated", null, { templateNode: null, templateString: null, templatePath: null, widgetsInTemplate: false, containerNode: null, _skipNodeCache: false, buildRendering: function () { var _6bf = dijit._Templated.getCachedTemplate(this.templatePath, this.templateString, this._skipNodeCache); var node; if (dojo.isString(_6bf)) { var _6c1 = this.declaredClass, _6c2 = this; var tstr = dojo.string.substitute(_6bf, this, function (_6c4, key) { if (key.charAt(0) == "!") { _6c4 = _6c2[key.substr(1)]; } if (typeof _6c4 == "undefined") { throw new Error(_6c1 + " template:" + key); } if (!_6c4) { return ""; } return key.charAt(0) == "!" ? _6c4 : _6c4.toString().replace(/"/g, "&quot;"); }, this); node = dijit._Templated._createNodesFromText(tstr)[0]; } else { node = _6bf.cloneNode(true); } this._attachTemplateNodes(node); var _6c6 = this.srcNodeRef; if (_6c6 && _6c6.parentNode) { _6c6.parentNode.replaceChild(node, _6c6); } this.domNode = node; if (this.widgetsInTemplate) { var _6c7 = dojo.parser.parse(node); this._attachTemplateNodes(_6c7, function (n, p) { return n[p]; }); } this._fillContent(_6c6); }, _fillContent: function (_6ca) { var dest = this.containerNode; if (_6ca && dest) { while (_6ca.hasChildNodes()) { dest.appendChild(_6ca.firstChild); } } }, _attachTemplateNodes: function (_6cc, _6cd) { _6cd = _6cd || function (n, p) { return n.getAttribute(p); }; var _6d0 = dojo.isArray(_6cc) ? _6cc : (_6cc.all || _6cc.getElementsByTagName("*")); var x = dojo.isArray(_6cc) ? 0 : -1; for (; x < _6d0.length; x++) { var _6d2 = (x == -1) ? _6cc : _6d0[x]; if (this.widgetsInTemplate && _6cd(_6d2, "dojoType")) { continue; } var _6d3 = _6cd(_6d2, "dojoAttachPoint"); if (_6d3) { var _6d4, _6d5 = _6d3.split(/\s*,\s*/); while (_6d4 = _6d5.shift()) { if (dojo.isArray(this[_6d4])) { this[_6d4].push(_6d2); } else { this[_6d4] = _6d2; } } } var _6d6 = _6cd(_6d2, "dojoAttachEvent"); if (_6d6) { var _6d7, _6d8 = _6d6.split(/\s*,\s*/); var trim = dojo.trim; while (_6d7 = _6d8.shift()) { if (_6d7) { var _6da = null; if (_6d7.indexOf(":") != -1) { var _6db = _6d7.split(":"); _6d7 = trim(_6db[0]); _6da = trim(_6db[1]); } else { _6d7 = trim(_6d7); } if (!_6da) { _6da = _6d7; } this.connect(_6d2, _6d7, _6da); } } } var role = _6cd(_6d2, "waiRole"); if (role) { dijit.setWaiRole(_6d2, role); } var _6dd = _6cd(_6d2, "waiState"); if (_6dd) { dojo.forEach(_6dd.split(/\s*,\s*/), function (_6de) { if (_6de.indexOf("-") != -1) { var pair = _6de.split("-"); dijit.setWaiState(_6d2, pair[0], pair[1]); } }); } } } }); dijit._Templated._templateCache = {}; dijit._Templated.getCachedTemplate = function (_6e0, _6e1, _6e2) { var _6e3 = dijit._Templated._templateCache; var key = _6e1 || _6e0; var _6e5 = _6e3[key]; if (_6e5) { return _6e5; } if (!_6e1) { _6e1 = dijit._Templated._sanitizeTemplateString(dojo._getText(_6e0)); } _6e1 = dojo.string.trim(_6e1); if (_6e1.match(/\$\{([^\}]+)\}/g) || _6e2) { return (_6e3[key] = _6e1); } else { return (_6e3[key] = dijit._Templated._createNodesFromText(_6e1)[0]); } }; dijit._Templated._sanitizeTemplateString = function (_6e6) { if (_6e6) { _6e6 = _6e6.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, ""); var _6e7 = _6e6.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im); if (_6e7) { _6e6 = _6e7[1]; } } else { _6e6 = ""; } return _6e6; }; if (dojo.isIE) { dojo.addOnUnload(function () { var _6e8 = dijit._Templated._templateCache; for (var key in _6e8) { var _6ea = _6e8[key]; if (!isNaN(_6ea.nodeType)) { dojo._destroyElement(_6ea); } _6e8[key] = null; } }); } (function () { var _6eb = { cell: { re: /^<t[dh][\s\r\n>]/i, pre: "<table><tbody><tr>", post: "</tr></tbody></table>" }, row: { re: /^<tr[\s\r\n>]/i, pre: "<table><tbody>", post: "</tbody></table>" }, section: { re: /^<(thead|tbody|tfoot)[\s\r\n>]/i, pre: "<table>", post: "</table>"} }; var tn; dijit._Templated._createNodesFromText = function (text) { if (!tn) { tn = dojo.doc.createElement("div"); tn.style.display = "none"; dojo.body().appendChild(tn); } var _6ee = "none"; var _6ef = text.replace(/^\s+/, ""); for (var type in _6eb) { var map = _6eb[type]; if (map.re.test(_6ef)) { _6ee = type; text = map.pre + text + map.post; break; } } tn.innerHTML = text; if (tn.normalize) { tn.normalize(); } var tag = { cell: "tr", row: "tbody", section: "table"}[_6ee]; var _6f3 = (typeof tag != "undefined") ? tn.getElementsByTagName(tag)[0] : tn; var _6f4 = []; while (_6f3.firstChild) { _6f4.push(_6f3.removeChild(_6f3.firstChild)); } tn.innerHTML = ""; return _6f4; }; })(); dojo.extend(dijit._Widget, { dojoAttachEvent: "", dojoAttachPoint: "", waiRole: "", waiState: "" }); } if (!dojo._hasResource["dojox.grid._grid.drag"]) { dojo._hasResource["dojox.grid._grid.drag"] = true; dojo.provide("dojox.grid._grid.drag"); (function () { var _6f5 = dojox.grid.drag = {}; _6f5.dragging = false; _6f5.hysteresis = 2; _6f5.capture = function (_6f6) { if (_6f6.setCapture) { _6f6.setCapture(); } else { document.addEventListener("mousemove", _6f6.onmousemove, true); document.addEventListener("mouseup", _6f6.onmouseup, true); document.addEventListener("click", _6f6.onclick, true); } }; _6f5.release = function (_6f7) { if (_6f7.releaseCapture) { _6f7.releaseCapture(); } else { document.removeEventListener("click", _6f7.onclick, true); document.removeEventListener("mouseup", _6f7.onmouseup, true); document.removeEventListener("mousemove", _6f7.onmousemove, true); } }; _6f5.start = function (_6f8, _6f9, _6fa, _6fb, _6fc) { if (!_6f8 || _6f5.dragging) { console.debug("failed to start drag: bad input node or already dragging"); return; } _6f5.dragging = true; _6f5.elt = _6f8; _6f5.events = { drag: _6f9 || dojox.grid.nop, end: _6fa || dojox.grid.nop, start: _6fc || dojox.grid.nop, oldmove: _6f8.onmousemove, oldup: _6f8.onmouseup, oldclick: _6f8.onclick }; _6f5.positionX = (_6fb && ("screenX" in _6fb) ? _6fb.screenX : false); _6f5.positionY = (_6fb && ("screenY" in _6fb) ? _6fb.screenY : false); _6f5.started = (_6f5.position === false); _6f8.onmousemove = _6f5.mousemove; _6f8.onmouseup = _6f5.mouseup; _6f8.onclick = _6f5.click; _6f5.capture(_6f5.elt); }; _6f5.end = function () { _6f5.release(_6f5.elt); _6f5.elt.onmousemove = _6f5.events.oldmove; _6f5.elt.onmouseup = _6f5.events.oldup; _6f5.elt.onclick = _6f5.events.oldclick; _6f5.elt = null; try { if (_6f5.started) { _6f5.events.end(); } } finally { _6f5.dragging = false; } }; _6f5.calcDelta = function (_6fd) { _6fd.deltaX = _6fd.screenX - _6f5.positionX; _6fd.deltaY = _6fd.screenY - _6f5.positionY; }; _6f5.hasMoved = function (_6fe) { return Math.abs(_6fe.deltaX) + Math.abs(_6fe.deltaY) > _6f5.hysteresis; }; _6f5.mousemove = function (_6ff) { _6ff = dojo.fixEvent(_6ff); dojo.stopEvent(_6ff); _6f5.calcDelta(_6ff); if ((!_6f5.started) && (_6f5.hasMoved(_6ff))) { _6f5.events.start(_6ff); _6f5.started = true; } if (_6f5.started) { _6f5.events.drag(_6ff); } }; _6f5.mouseup = function (_700) { dojo.stopEvent(dojo.fixEvent(_700)); _6f5.end(); }; _6f5.click = function (_701) { dojo.stopEvent(dojo.fixEvent(_701)); }; })(); } if (!dojo._hasResource["dojox.grid._grid.builder"]) { dojo._hasResource["dojox.grid._grid.builder"] = true; dojo.provide("dojox.grid._grid.builder"); dojo.declare("dojox.grid.Builder", null, { constructor: function (_702) { this.view = _702; this.grid = _702.grid; }, view: null, _table: "<table class=\"dojoxGrid-row-table\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" role=\"wairole:presentation\">", generateCellMarkup: function (_703, _704, _705, _706) { var _707 = [], html; if (_706) { html = ["<th tabIndex=\"-1\" role=\"wairole:columnheader\""]; } else { html = ["<td tabIndex=\"-1\" role=\"wairole:gridcell\""]; } _703.colSpan && html.push(" colspan=\"", _703.colSpan, "\""); _703.rowSpan && html.push(" rowspan=\"", _703.rowSpan, "\""); html.push(" class=\"dojoxGrid-cell "); _703.classes && html.push(_703.classes, " "); _705 && html.push(_705, " "); _707.push(html.join("")); _707.push(""); html = ["\" idx=\"", _703.index, "\" style=\""]; html.push(_703.styles, _704 || ""); _703.unitWidth && html.push("width:", _703.unitWidth, ";"); _707.push(html.join("")); _707.push(""); html = ["\""]; _703.attrs && html.push(" ", _703.attrs); html.push(">"); _707.push(html.join("")); _707.push(""); _707.push("</td>"); return _707; }, isCellNode: function (_709) { return Boolean(_709 && _709.getAttribute && _709.getAttribute("idx")); }, getCellNodeIndex: function (_70a) { return _70a ? Number(_70a.getAttribute("idx")) : -1; }, getCellNode: function (_70b, _70c) { for (var i = 0, row; row = dojox.grid.getTr(_70b.firstChild, i); i++) { for (var j = 0, cell; cell = row.cells[j]; j++) { if (this.getCellNodeIndex(cell) == _70c) { return cell; } } } }, findCellTarget: function (_711, _712) { var n = _711; while (n && !this.isCellNode(n) && (n != _712)) { n = n.parentNode; } return n != _712 ? n : null; }, baseDecorateEvent: function (e) { e.dispatch = "do" + e.type; e.grid = this.grid; e.sourceView = this.view; e.cellNode = this.findCellTarget(e.target, e.rowNode); e.cellIndex = this.getCellNodeIndex(e.cellNode); e.cell = (e.cellIndex >= 0 ? this.grid.getCell(e.cellIndex) : null); }, findTarget: function (_715, _716) { var n = _715; while (n && !(_716 in n) && (n != this.domNode)) { n = n.parentNode; } return (n != this.domNode) ? n : null; }, findRowTarget: function (_718) { return this.findTarget(_718, dojox.grid.rowIndexTag); }, isIntraNodeEvent: function (e) { try { return (e.cellNode && e.relatedTarget && dojo.isDescendant(e.relatedTarget, e.cellNode)); } catch (x) { return false; } }, isIntraRowEvent: function (e) { try { var row = e.relatedTarget && this.findRowTarget(e.relatedTarget); return !row && (e.rowIndex == -1) || row && (e.rowIndex == row.gridRowIndex); } catch (x) { return false; } }, dispatchEvent: function (e) { if (e.dispatch in this) { return this[e.dispatch](e); } }, domouseover: function (e) { if (e.cellNode && (e.cellNode != this.lastOverCellNode)) { this.lastOverCellNode = e.cellNode; this.grid.onMouseOver(e); } this.grid.onMouseOverRow(e); }, domouseout: function (e) { if (e.cellNode && (e.cellNode == this.lastOverCellNode) && !this.isIntraNodeEvent(e, this.lastOverCellNode)) { this.lastOverCellNode = null; this.grid.onMouseOut(e); if (!this.isIntraRowEvent(e)) { this.grid.onMouseOutRow(e); } } } }); dojo.declare("dojox.grid.contentBuilder", dojox.grid.Builder, { update: function () { this.prepareHtml(); }, prepareHtml: function () { var _71f = this.grid.get, rows = this.view.structure.rows; for (var j = 0, row; (row = rows[j]); j++) { for (var i = 0, cell; (cell = row[i]); i++) { cell.get = cell.get || (cell.value == undefined) && _71f; cell.markup = this.generateCellMarkup(cell, cell.cellStyles, cell.cellClasses, false); } } }, generateHtml: function (_725, _726) { var html = [this._table], v = this.view, obr = v.onBeforeRow, rows = v.structure.rows; obr && obr(_726, rows); for (var j = 0, row; (row = rows[j]); j++) { if (row.hidden || row.header) { continue; } html.push(!row.invisible ? "<tr>" : "<tr class=\"dojoxGrid-invisible\">"); for (var i = 0, cell, m, cc, cs; (cell = row[i]); i++) { m = cell.markup, cc = cell.customClasses = [], cs = cell.customStyles = []; m[5] = cell.format(_725); m[1] = cc.join(" "); m[3] = cs.join(";"); html.push.apply(html, m); } html.push("</tr>"); } html.push("</table>"); return html.join(""); }, decorateEvent: function (e) { e.rowNode = this.findRowTarget(e.target); if (!e.rowNode) { return false; } e.rowIndex = e.rowNode[dojox.grid.rowIndexTag]; this.baseDecorateEvent(e); e.cell = this.grid.getCell(e.cellIndex); return true; } }); dojo.declare("dojox.grid.headerBuilder", dojox.grid.Builder, { bogusClickTime: 0, overResizeWidth: 4, minColWidth: 1, _table: "<table class=\"dojoxGrid-row-table\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" role=\"wairole:presentation\"", update: function () { this.tableMap = new dojox.grid.tableMap(this.view.structure.rows); }, generateHtml: function (_733, _734) { var html = [this._table], rows = this.view.structure.rows; if (this.view.viewWidth) { html.push([" style=\"width:", this.view.viewWidth, ";\""].join("")); } html.push(">"); dojox.grid.fire(this.view, "onBeforeRow", [-1, rows]); for (var j = 0, row; (row = rows[j]); j++) { if (row.hidden) { continue; } html.push(!row.invisible ? "<tr>" : "<tr class=\"dojoxGrid-invisible\">"); for (var i = 0, cell, _73b; (cell = row[i]); i++) { cell.customClasses = []; cell.customStyles = []; _73b = this.generateCellMarkup(cell, cell.headerStyles, cell.headerClasses, true); _73b[5] = (_734 != undefined ? _734 : _733(cell)); _73b[3] = cell.customStyles.join(";"); _73b[1] = cell.customClasses.join(" "); html.push(_73b.join("")); } html.push("</tr>"); } html.push("</table>"); return html.join(""); }, getCellX: function (e) { var x = e.layerX; if (dojo.isMoz) { var n = dojox.grid.ascendDom(e.target, dojox.grid.makeNotTagName("th")); x -= (n && n.offsetLeft) || 0; } var n = dojox.grid.ascendDom(e.target, function () { if (!n || n == e.cellNode) { return false; } x += (n.offsetLeft < 0 ? 0 : n.offsetLeft); return true; }); return x; }, decorateEvent: function (e) { this.baseDecorateEvent(e); e.rowIndex = -1; e.cellX = this.getCellX(e); return true; }, prepareLeftResize: function (e) { var i = dojox.grid.getTdIndex(e.cellNode); e.cellNode = (i ? e.cellNode.parentNode.cells[i - 1] : null); e.cellIndex = (e.cellNode ? this.getCellNodeIndex(e.cellNode) : -1); return Boolean(e.cellNode); }, canResize: function (e) { if (!e.cellNode || e.cellNode.colSpan > 1) { return false; } var cell = this.grid.getCell(e.cellIndex); return !cell.noresize && !cell.isFlex(); }, overLeftResizeArea: function (e) { return (e.cellIndex > 0) && (e.cellX < this.overResizeWidth) && this.prepareLeftResize(e); }, overRightResizeArea: function (e) { return e.cellNode && (e.cellX >= e.cellNode.offsetWidth - this.overResizeWidth); }, domousemove: function (e) { var c = (this.overRightResizeArea(e) ? "e-resize" : (this.overLeftResizeArea(e) ? "w-resize" : "")); if (c && !this.canResize(e)) { c = "not-allowed"; } e.sourceView.headerNode.style.cursor = c || ""; }, domousedown: function (e) { if (!dojox.grid.drag.dragging) { if ((this.overRightResizeArea(e) || this.overLeftResizeArea(e)) && this.canResize(e)) { this.beginColumnResize(e); } } }, doclick: function (e) { if (new Date().getTime() < this.bogusClickTime) { dojo.stopEvent(e); return true; } }, beginColumnResize: function (e) { dojo.stopEvent(e); var _74b = [], _74c = this.tableMap.findOverlappingNodes(e.cellNode); for (var i = 0, cell; (cell = _74c[i]); i++) { _74b.push({ node: cell, index: this.getCellNodeIndex(cell), width: cell.offsetWidth }); } var drag = { view: e.sourceView, node: e.cellNode, index: e.cellIndex, w: e.cellNode.clientWidth, spanners: _74b }; dojox.grid.drag.start(e.cellNode, dojo.hitch(this, "doResizeColumn", drag), dojo.hitch(this, "endResizeColumn", drag), e); }, doResizeColumn: function (_750, _751) { var w = _750.w + _751.deltaX; if (w >= this.minColWidth) { for (var i = 0, s, sw; (s = _750.spanners[i]); i++) { sw = s.width + _751.deltaX; s.node.style.width = sw + "px"; _750.view.setColWidth(s.index, sw); } _750.node.style.width = w + "px"; _750.view.setColWidth(_750.index, w); } if (_750.view.flexCells && !_750.view.testFlexCells()) { var t = dojox.grid.findTable(_750.node); t && (t.style.width = ""); } }, endResizeColumn: function (_757) { this.bogusClickTime = new Date().getTime() + 30; setTimeout(dojo.hitch(_757.view, "update"), 50); } }); dojo.declare("dojox.grid.tableMap", null, { constructor: function (_758) { this.mapRows(_758); }, map: null, mapRows: function (_759) { var _75a = _759.length; if (!_75a) { return; } this.map = []; for (var j = 0, row; (row = _759[j]); j++) { this.map[j] = []; } for (var j = 0, row; (row = _759[j]); j++) { for (var i = 0, x = 0, cell, _760, _761; (cell = row[i]); i++) { while (this.map[j][x]) { x++; } this.map[j][x] = { c: i, r: j }; _761 = cell.rowSpan || 1; _760 = cell.colSpan || 1; for (var y = 0; y < _761; y++) { for (var s = 0; s < _760; s++) { this.map[j + y][x + s] = this.map[j][x]; } } x += _760; } } }, dumpMap: function () { for (var j = 0, row, h = ""; (row = this.map[j]); j++, h = "") { for (var i = 0, cell; (cell = row[i]); i++) { h += cell.r + "," + cell.c + "   "; } console.log(h); } }, getMapCoords: function (_769, _76a) { for (var j = 0, row; (row = this.map[j]); j++) { for (var i = 0, cell; (cell = row[i]); i++) { if (cell.c == _76a && cell.r == _769) { return { j: j, i: i }; } } } return { j: -1, i: -1 }; }, getNode: function (_76f, _770, _771) { var row = _76f && _76f.rows[_770]; return row && row.cells[_771]; }, _findOverlappingNodes: function (_773, _774, _775) { var _776 = []; var m = this.getMapCoords(_774, _775); var row = this.map[m.j]; for (var j = 0, row; (row = this.map[j]); j++) { if (j == m.j) { continue; } with (row[m.i]) { var n = this.getNode(_773, r, c); if (n) { _776.push(n); } } } return _776; }, findOverlappingNodes: function (_77b) { return this._findOverlappingNodes(dojox.grid.findTable(_77b), dojox.grid.getTrIndex(_77b.parentNode), dojox.grid.getTdIndex(_77b)); } }); dojox.grid.rowIndexTag = "gridRowIndex"; } if (!dojo._hasResource["dojox.grid._grid.view"]) { dojo._hasResource["dojox.grid._grid.view"] = true; dojo.provide("dojox.grid._grid.view"); dojo.declare("dojox.GridView", [dijit._Widget, dijit._Templated], { defaultWidth: "18em", viewWidth: "", templateString: "<div class=\"dojoxGrid-view\"><div class=\"dojoxGrid-header\" dojoAttachPoint=\"headerNode\"><div style=\"width: 9000em\"><div dojoAttachPoint=\"headerContentNode\"></div></div></div><input type=\"checkbox\" class=\"dojoxGrid-hidden-focus\" dojoAttachPoint=\"hiddenFocusNode\" /><input type=\"checkbox\" class=\"dojoxGrid-hidden-focus\" /><div class=\"dojoxGrid-scrollbox\" dojoAttachPoint=\"scrollboxNode\"><div class=\"dojoxGrid-content\" dojoAttachPoint=\"contentNode\" hidefocus=\"hidefocus\"></div></div></div>", themeable: false, classTag: "dojoxGrid", marginBottom: 0, rowPad: 2, postMixInProperties: function () { this.rowNodes = []; }, postCreate: function () { dojo.connect(this.scrollboxNode, "onscroll", dojo.hitch(this, "doscroll")); dojox.grid.funnelEvents(this.contentNode, this, "doContentEvent", ["mouseover", "mouseout", "click", "dblclick", "contextmenu"]); dojox.grid.funnelEvents(this.headerNode, this, "doHeaderEvent", ["dblclick", "mouseover", "mouseout", "mousemove", "mousedown", "click", "contextmenu"]); this.content = new dojox.grid.contentBuilder(this); this.header = new dojox.grid.headerBuilder(this); }, destroy: function () { dojox.grid.removeNode(this.headerNode); this.inherited("destroy", arguments); }, focus: function () { if (dojo.isSafari || dojo.isOpera) { this.hiddenFocusNode.focus(); } else { this.scrollboxNode.focus(); } }, setStructure: function (_77c) { var vs = this.structure = _77c; if (vs.width && dojo.isNumber(vs.width)) { this.viewWidth = vs.width + "em"; } else { this.viewWidth = vs.width || this.viewWidth; } this.onBeforeRow = vs.onBeforeRow; this.noscroll = vs.noscroll; if (this.noscroll) { this.scrollboxNode.style.overflow = "hidden"; } this.testFlexCells(); this.updateStructure(); }, testFlexCells: function () { this.flexCells = false; for (var j = 0, row; (row = this.structure.rows[j]); j++) { for (var i = 0, cell; (cell = row[i]); i++) { cell.view = this; this.flexCells = this.flexCells || cell.isFlex(); } } return this.flexCells; }, updateStructure: function () { this.header.update(); this.content.update(); }, getScrollbarWidth: function () { return (this.noscroll ? 0 : dojox.grid.getScrollbarWidth()); }, getColumnsWidth: function () { return this.headerContentNode.firstChild.offsetWidth; }, getWidth: function () { return this.viewWidth || (this.getColumnsWidth() + this.getScrollbarWidth()) + "px"; }, getContentWidth: function () { return Math.max(0, dojo._getContentBox(this.domNode).w - this.getScrollbarWidth()) + "px"; }, render: function () { this.scrollboxNode.style.height = ""; this.renderHeader(); }, renderHeader: function () { this.headerContentNode.innerHTML = this.header.generateHtml(this._getHeaderContent); }, _getHeaderContent: function (_782) { var n = _782.name || _782.grid.getCellName(_782); if (_782.index != _782.grid.getSortIndex()) { return n; } return ["<div class=\"", _782.grid.sortInfo > 0 ? "dojoxGrid-sort-down" : "dojoxGrid-sort-up", "\">", n, "</div>"].join(""); }, resize: function () { this.resizeHeight(); this.resizeWidth(); }, hasScrollbar: function () { return (this.scrollboxNode.clientHeight != this.scrollboxNode.offsetHeight); }, resizeHeight: function () { if (!this.grid.autoHeight) { var h = this.domNode.clientHeight; if (!this.hasScrollbar()) { h -= dojox.grid.getScrollbarWidth(); } dojox.grid.setStyleHeightPx(this.scrollboxNode, h); } }, resizeWidth: function () { if (this.flexCells) { this.contentWidth = this.getContentWidth(); this.headerContentNode.firstChild.style.width = this.contentWidth; } var w = this.scrollboxNode.offsetWidth - this.getScrollbarWidth(); w = Math.max(w, this.getColumnsWidth()) + "px"; with (this.contentNode) { style.width = ""; offsetWidth; style.width = w; } }, setSize: function (w, h) { with (this.domNode.style) { if (w) { width = w; } height = (h >= 0 ? h + "px" : ""); } with (this.headerNode.style) { if (w) { width = w; } } }, renderRow: function (_788, _789) { var _78a = this.createRowNode(_788); this.buildRow(_788, _78a, _789); this.grid.edit.restore(this, _788); return _78a; }, createRowNode: function (_78b) { var node = document.createElement("div"); node.className = this.classTag + "-row"; node[dojox.grid.rowIndexTag] = _78b; this.rowNodes[_78b] = node; return node; }, buildRow: function (_78d, _78e) { this.buildRowContent(_78d, _78e); this.styleRow(_78d, _78e); }, buildRowContent: function (_78f, _790) { _790.innerHTML = this.content.generateHtml(_78f, _78f); if (this.flexCells) { _790.firstChild.style.width = this.contentWidth; } }, rowRemoved: function (_791) { this.grid.edit.save(this, _791); delete this.rowNodes[_791]; }, getRowNode: function (_792) { return this.rowNodes[_792]; }, getCellNode: function (_793, _794) { var row = this.getRowNode(_793); if (row) { return this.content.getCellNode(row, _794); } }, styleRow: function (_796, _797) { _797._style = dojox.grid.getStyleText(_797); this.styleRowNode(_796, _797); }, styleRowNode: function (_798, _799) { if (_799) { this.doStyleRowNode(_798, _799); } }, doStyleRowNode: function (_79a, _79b) { this.grid.styleRowNode(_79a, _79b); }, updateRow: function (_79c, _79d, _79e) { var _79f = this.getRowNode(_79c); if (_79f) { _79f.style.height = ""; this.buildRow(_79c, _79f); } return _79f; }, updateRowStyles: function (_7a0) { this.styleRowNode(_7a0, this.getRowNode(_7a0)); }, lastTop: 0, doscroll: function (_7a1) { this.headerNode.scrollLeft = this.scrollboxNode.scrollLeft; var top = this.scrollboxNode.scrollTop; if (top != this.lastTop) { this.grid.scrollTo(top); } }, setScrollTop: function (_7a3) { this.lastTop = _7a3; this.scrollboxNode.scrollTop = _7a3; return this.scrollboxNode.scrollTop; }, doContentEvent: function (e) { if (this.content.decorateEvent(e)) { this.grid.onContentEvent(e); } }, doHeaderEvent: function (e) { if (this.header.decorateEvent(e)) { this.grid.onHeaderEvent(e); } }, dispatchContentEvent: function (e) { return this.content.dispatchEvent(e); }, dispatchHeaderEvent: function (e) { return this.header.dispatchEvent(e); }, setColWidth: function (_7a8, _7a9) { this.grid.setCellWidth(_7a8, _7a9 + "px"); }, update: function () { var left = this.scrollboxNode.scrollLeft; this.content.update(); this.grid.update(); this.scrollboxNode.scrollLeft = left; } }); } if (!dojo._hasResource["dojox.grid._grid.views"]) { dojo._hasResource["dojox.grid._grid.views"] = true; dojo.provide("dojox.grid._grid.views"); dojo.declare("dojox.grid.views", null, { constructor: function (_7ab) { this.grid = _7ab; }, defaultWidth: 200, views: [], resize: function () { this.onEach("resize"); }, render: function () { this.onEach("render"); this.normalizeHeaderNodeHeight(); }, addView: function (_7ac) { _7ac.idx = this.views.length; this.views.push(_7ac); }, destroyViews: function () { for (var i = 0, v; v = this.views[i]; i++) { v.destroy(); } this.views = []; }, getContentNodes: function () { var _7af = []; for (var i = 0, v; v = this.views[i]; i++) { _7af.push(v.contentNode); } return _7af; }, forEach: function (_7b2) { for (var i = 0, v; v = this.views[i]; i++) { _7b2(v, i); } }, onEach: function (_7b5, _7b6) { _7b6 = _7b6 || []; for (var i = 0, v; v = this.views[i]; i++) { if (_7b5 in v) { v[_7b5].apply(v, _7b6); } } }, normalizeHeaderNodeHeight: function () { var _7b9 = []; for (var i = 0, v; (v = this.views[i]); i++) { if (v.headerContentNode.firstChild) { _7b9.push(v.headerContentNode); } } this.normalizeRowNodeHeights(_7b9); }, normalizeRowNodeHeights: function (_7bc) { var h = 0; for (var i = 0, n, o; (n = _7bc[i]); i++) { h = Math.max(h, (n.firstChild.clientHeight) || (n.firstChild.offsetHeight)); } h = (h >= 0 ? h : 0); var hpx = h + "px"; for (var i = 0, n; (n = _7bc[i]); i++) { if (n.firstChild.clientHeight != h) { n.firstChild.style.height = hpx; } } if (_7bc && _7bc[0]) { _7bc[0].parentNode.offsetHeight; } }, renormalizeRow: function (_7c2) { var _7c3 = []; for (var i = 0, v, n; (v = this.views[i]) && (n = v.getRowNode(_7c2)); i++) { n.firstChild.style.height = ""; _7c3.push(n); } this.normalizeRowNodeHeights(_7c3); }, getViewWidth: function (_7c7) { return this.views[_7c7].getWidth() || this.defaultWidth; }, measureHeader: function () { this.forEach(function (_7c8) { _7c8.headerContentNode.style.height = ""; }); var h = 0; this.forEach(function (_7ca) { h = Math.max(_7ca.headerNode.offsetHeight, h); }); return h; }, measureContent: function () { var h = 0; this.forEach(function (_7cc) { h = Math.max(_7cc.domNode.offsetHeight, h); }); return h; }, findClient: function (_7cd) { var c = this.grid.elasticView || -1; if (c < 0) { for (var i = 1, v; (v = this.views[i]); i++) { if (v.viewWidth) { for (i = 1; (v = this.views[i]); i++) { if (!v.viewWidth) { c = i; break; } } break; } } } if (c < 0) { c = Math.floor(this.views.length / 2); } return c; }, _arrange: function (l, t, w, h) { var i, v, vw, len = this.views.length; var c = (w <= 0 ? len : this.findClient()); var _7da = function (v, l, t) { with (v.domNode.style) { left = l + "px"; top = t + "px"; } with (v.headerNode.style) { left = l + "px"; top = 0; } }; for (i = 0; (v = this.views[i]) && (i < c); i++) { vw = this.getViewWidth(i); v.setSize(vw, h); _7da(v, l, t); vw = v.domNode.offsetWidth; l += vw; } i++; var r = w; for (var j = len - 1; (v = this.views[j]) && (i <= j); j--) { vw = this.getViewWidth(j); v.setSize(vw, h); vw = v.domNode.offsetWidth; r -= vw; _7da(v, r, t); } if (c < len) { v = this.views[c]; vw = Math.max(1, r - l); v.setSize(vw + "px", h); _7da(v, l, t); } return l; }, arrange: function (l, t, w, h) { var w = this._arrange(l, t, w, h); this.resize(); return w; }, renderRow: function (_7e4, _7e5) { var _7e6 = []; for (var i = 0, v, n, _7ea; (v = this.views[i]) && (n = _7e5[i]); i++) { _7ea = v.renderRow(_7e4); n.appendChild(_7ea); _7e6.push(_7ea); } this.normalizeRowNodeHeights(_7e6); }, rowRemoved: function (_7eb) { this.onEach("rowRemoved", [_7eb]); }, updateRow: function (_7ec, _7ed) { for (var i = 0, v; v = this.views[i]; i++) { v.updateRow(_7ec, _7ed); } this.renormalizeRow(_7ec); }, updateRowStyles: function (_7f0) { this.onEach("updateRowStyles", [_7f0]); }, setScrollTop: function (_7f1) { var top = _7f1; for (var i = 0, v; v = this.views[i]; i++) { top = v.setScrollTop(_7f1); } return top; }, getFirstScrollingView: function () { for (var i = 0, v; (v = this.views[i]); i++) { if (v.hasScrollbar()) { return v; } } } }); } if (!dojo._hasResource["dojox.grid._grid.cell"]) { dojo._hasResource["dojox.grid._grid.cell"] = true; dojo.provide("dojox.grid._grid.cell"); dojo.declare("dojox.grid.cell", null, { styles: "", constructor: function (_7f7) { dojo.mixin(this, _7f7); if (this.editor) { this.editor = new this.editor(this); } }, format: function (_7f8) { var f, i = this.grid.edit.info, d = this.get ? this.get(_7f8) : this.value; if (this.editor && (this.editor.alwaysOn || (i.rowIndex == _7f8 && i.cell == this))) { return this.editor.format(d, _7f8); } else { return (f = this.formatter) ? f.call(this, d, _7f8) : d; } }, getNode: function (_7fc) { return this.view.getCellNode(_7fc, this.index); }, isFlex: function () { var uw = this.unitWidth; return uw && (uw == "auto" || uw.slice(-1) == "%"); }, applyEdit: function (_7fe, _7ff) { this.grid.edit.applyCellEdit(_7fe, this, _7ff); }, cancelEdit: function (_800) { this.grid.doCancelEdit(_800); }, _onEditBlur: function (_801) { if (this.grid.edit.isEditCell(_801, this.index)) { this.grid.edit.apply(); } }, registerOnBlur: function (_802, _803) { if (this.commitOnBlur) { dojo.connect(_802, "onblur", function (e) { setTimeout(dojo.hitch(this, "_onEditBlur", _803), 250); }); } } }); } if (!dojo._hasResource["dojox.grid._grid.layout"]) { dojo._hasResource["dojox.grid._grid.layout"] = true; dojo.provide("dojox.grid._grid.layout"); dojo.declare("dojox.grid.layout", null, { constructor: function (_805) { this.grid = _805; }, cells: null, structure: null, defaultWidth: "6em", setStructure: function (_806) { this.fieldIndex = 0; this.cells = []; var s = this.structure = []; for (var i = 0, _809, rows; (_809 = _806[i]); i++) { s.push(this.addViewDef(_809)); } this.cellCount = this.cells.length; }, addViewDef: function (_80b) { this._defaultCellProps = _80b.defaultCell || {}; return dojo.mixin({}, _80b, { rows: this.addRowsDef(_80b.rows || _80b.cells) }); }, addRowsDef: function (_80c) { var _80d = []; for (var i = 0, row; _80c && (row = _80c[i]); i++) { _80d.push(this.addRowDef(i, row)); } return _80d; }, addRowDef: function (_810, _811) { var _812 = []; for (var i = 0, def, cell; (def = _811[i]); i++) { cell = this.addCellDef(_810, i, def); _812.push(cell); this.cells.push(cell); } return _812; }, addCellDef: function (_816, _817, _818) { var w = 0; if (_818.colSpan > 1) { w = 0; } else { if (!isNaN(_818.width)) { w = _818.width + "em"; } else { w = _818.width || this.defaultWidth; } } var _81a = _818.field != undefined ? _818.field : (_818.get ? -1 : this.fieldIndex); if ((_818.field != undefined) || !_818.get) { this.fieldIndex = (_818.field > -1 ? _818.field : this.fieldIndex) + 1; } return new dojox.grid.cell(dojo.mixin({}, this._defaultCellProps, _818, { grid: this.grid, subrow: _816, layoutIndex: _817, index: this.cells.length, fieldIndex: _81a, unitWidth: w })); } }); } if (!dojo._hasResource["dojox.grid._grid.rows"]) { dojo._hasResource["dojox.grid._grid.rows"] = true; dojo.provide("dojox.grid._grid.rows"); dojo.declare("dojox.grid.rows", null, { constructor: function (_81b) { this.grid = _81b; }, linesToEms: 2, defaultRowHeight: 1, overRow: -2, getHeight: function (_81c) { return ""; }, getDefaultHeightPx: function () { return 32; }, prepareStylingRow: function (_81d, _81e) { return { index: _81d, node: _81e, odd: Boolean(_81d & 1), selected: this.grid.selection.isSelected(_81d), over: this.isOver(_81d), customStyles: "", customClasses: "dojoxGrid-row" }; }, styleRowNode: function (_81f, _820) { var row = this.prepareStylingRow(_81f, _820); this.grid.onStyleRow(row); this.applyStyles(row); }, applyStyles: function (_822) { with (_822) { node.className = customClasses; var h = node.style.height; dojox.grid.setStyleText(node, customStyles + ";" + (node._style || "")); node.style.height = h; } }, updateStyles: function (_824) { this.grid.updateRowStyles(_824); }, setOverRow: function (_825) { var last = this.overRow; this.overRow = _825; if ((last != this.overRow) && (last >= 0)) { this.updateStyles(last); } this.updateStyles(this.overRow); }, isOver: function (_827) { return (this.overRow == _827); } }); } if (!dojo._hasResource["dojox.grid._grid.focus"]) { dojo._hasResource["dojox.grid._grid.focus"] = true; dojo.provide("dojox.grid._grid.focus"); dojo.declare("dojox.grid.focus", null, { constructor: function (_828) { this.grid = _828; this.cell = null; this.rowIndex = -1; dojo.connect(this.grid.domNode, "onfocus", this, "doFocus"); }, tabbingOut: false, focusClass: "dojoxGrid-cell-focus", focusView: null, initFocusView: function () { this.focusView = this.grid.views.getFirstScrollingView(); }, isFocusCell: function (_829, _82a) { return (this.cell == _829) && (this.rowIndex == _82a); }, isLastFocusCell: function () { return (this.rowIndex == this.grid.rowCount - 1) && (this.cell.index == this.grid.layout.cellCount - 1); }, isFirstFocusCell: function () { return (this.rowIndex == 0) && (this.cell.index == 0); }, isNoFocusCell: function () { return (this.rowIndex < 0) || !this.cell; }, _focusifyCellNode: function (_82b) { var n = this.cell && this.cell.getNode(this.rowIndex); if (n) { dojo.toggleClass(n, this.focusClass, _82b); this.scrollIntoView(); try { if (!this.grid.edit.isEditing()) { dojox.grid.fire(n, "focus"); } } catch (e) { } } }, scrollIntoView: function () { if (!this.cell) { return; } var c = this.cell, s = c.view.scrollboxNode, sr = { w: s.clientWidth, l: s.scrollLeft, t: s.scrollTop, h: s.clientHeight }, n = c.getNode(this.rowIndex), r = c.view.getRowNode(this.rowIndex), rt = this.grid.scroller.findScrollTop(this.rowIndex); if (n.offsetLeft + n.offsetWidth > sr.l + sr.w) { s.scrollLeft = n.offsetLeft + n.offsetWidth - sr.w; } else { if (n.offsetLeft < sr.l) { s.scrollLeft = n.offsetLeft; } } if (rt + r.offsetHeight > sr.t + sr.h) { this.grid.setScrollTop(rt + r.offsetHeight - sr.h); } else { if (rt < sr.t) { this.grid.setScrollTop(rt); } } }, styleRow: function (_833) { if (_833.index == this.rowIndex) { this._focusifyCellNode(true); } }, setFocusIndex: function (_834, _835) { this.setFocusCell(this.grid.getCell(_835), _834); }, setFocusCell: function (_836, _837) { if (_836 && !this.isFocusCell(_836, _837)) { this.tabbingOut = false; this.focusGrid(); this._focusifyCellNode(false); this.cell = _836; this.rowIndex = _837; this._focusifyCellNode(true); } if (dojo.isOpera) { setTimeout(dojo.hitch(this.grid, "onCellFocus", this.cell, this.rowIndex), 1); } else { this.grid.onCellFocus(this.cell, this.rowIndex); } }, next: function () { var row = this.rowIndex, col = this.cell.index + 1, cc = this.grid.layout.cellCount - 1, rc = this.grid.rowCount - 1; if (col > cc) { col = 0; row++; } if (row > rc) { col = cc; row = rc; } this.setFocusIndex(row, col); }, previous: function () { var row = (this.rowIndex || 0), col = (this.cell.index || 0) - 1; if (col < 0) { col = this.grid.layout.cellCount - 1; row--; } if (row < 0) { row = 0; col = 0; } this.setFocusIndex(row, col); }, move: function (_83e, _83f) { var rc = this.grid.rowCount - 1, cc = this.grid.layout.cellCount - 1, r = this.rowIndex, i = this.cell.index, row = Math.min(rc, Math.max(0, r + _83e)), col = Math.min(cc, Math.max(0, i + _83f)); this.setFocusIndex(row, col); if (_83e) { this.grid.updateRow(r); } }, previousKey: function (e) { if (this.isFirstFocusCell()) { this.tabOut(this.grid.domNode); } else { dojo.stopEvent(e); this.previous(); } }, nextKey: function (e) { if (this.isLastFocusCell()) { this.tabOut(this.grid.lastFocusNode); } else { dojo.stopEvent(e); this.next(); } }, tabOut: function (_848) { this.tabbingOut = true; _848.focus(); }, focusGrid: function () { dojox.grid.fire(this.focusView, "focus"); this._focusifyCellNode(true); }, doFocus: function (e) { if (e && e.target != e.currentTarget) { return; } if (!this.tabbingOut && this.isNoFocusCell()) { this.setFocusIndex(0, 0); } this.tabbingOut = false; } }); } if (!dojo._hasResource["dojox.grid._grid.selection"]) { dojo._hasResource["dojox.grid._grid.selection"] = true; dojo.provide("dojox.grid._grid.selection"); dojo.declare("dojox.grid.selection", null, { constructor: function (_84a) { this.grid = _84a; this.selected = []; }, multiSelect: true, selected: null, updating: 0, selectedIndex: -1, onCanSelect: function (_84b) { return this.grid.onCanSelect(_84b); }, onCanDeselect: function (_84c) { return this.grid.onCanDeselect(_84c); }, onSelected: function (_84d) { return this.grid.onSelected(_84d); }, onDeselected: function (_84e) { return this.grid.onDeselected(_84e); }, onChanging: function () { }, onChanged: function () { return this.grid.onSelectionChanged(); }, isSelected: function (_84f) { return this.selected[_84f]; }, getFirstSelected: function () { for (var i = 0, l = this.selected.length; i < l; i++) { if (this.selected[i]) { return i; } } return -1; }, getNextSelected: function (_852) { for (var i = _852 + 1, l = this.selected.length; i < l; i++) { if (this.selected[i]) { return i; } } return -1; }, getSelected: function () { var _855 = []; for (var i = 0, l = this.selected.length; i < l; i++) { if (this.selected[i]) { _855.push(i); } } return _855; }, getSelectedCount: function () { var c = 0; for (var i = 0; i < this.selected.length; i++) { if (this.selected[i]) { c++; } } return c; }, beginUpdate: function () { if (this.updating == 0) { this.onChanging(); } this.updating++; }, endUpdate: function () { this.updating--; if (this.updating == 0) { this.onChanged(); } }, select: function (_85a) { this.unselectAll(_85a); this.addToSelection(_85a); }, addToSelection: function (_85b) { _85b = Number(_85b); if (this.selected[_85b]) { this.selectedIndex = _85b; } else { if (this.onCanSelect(_85b) !== false) { this.selectedIndex = _85b; this.beginUpdate(); this.selected[_85b] = true; this.grid.onSelected(_85b); this.endUpdate(); } } }, deselect: function (_85c) { _85c = Number(_85c); if (this.selectedIndex == _85c) { this.selectedIndex = -1; } if (this.selected[_85c]) { if (this.onCanDeselect(_85c) === false) { return; } this.beginUpdate(); delete this.selected[_85c]; this.grid.onDeselected(_85c); this.endUpdate(); } }, setSelected: function (_85d, _85e) { this[(_85e ? "addToSelection" : "deselect")](_85d); }, toggleSelect: function (_85f) { this.setSelected(_85f, !this.selected[_85f]); }, insert: function (_860) { this.selected.splice(_860, 0, false); if (this.selectedIndex >= _860) { this.selectedIndex++; } }, remove: function (_861) { this.selected.splice(_861, 1); if (this.selectedIndex >= _861) { this.selectedIndex--; } }, unselectAll: function (_862) { for (var i in this.selected) { if ((i != _862) && (this.selected[i] === true)) { this.deselect(i); } } }, shiftSelect: function (_864, inTo) { var s = (_864 >= 0 ? _864 : inTo), e = inTo; if (s > e) { e = s; s = inTo; } for (var i = s; i <= e; i++) { this.addToSelection(i); } }, clickSelect: function (_869, _86a, _86b) { this.beginUpdate(); if (!this.multiSelect) { this.select(_869); } else { var _86c = this.selectedIndex; if (!_86a) { this.unselectAll(_869); } if (_86b) { this.shiftSelect(_86c, _869); } else { if (_86a) { this.toggleSelect(_869); } else { this.addToSelection(_869); } } } this.endUpdate(); }, clickSelectEvent: function (e) { this.clickSelect(e.rowIndex, e.ctrlKey, e.shiftKey); }, clear: function () { this.beginUpdate(); this.unselectAll(); this.endUpdate(); } }); } if (!dojo._hasResource["dojox.grid._grid.edit"]) { dojo._hasResource["dojox.grid._grid.edit"] = true; dojo.provide("dojox.grid._grid.edit"); dojo.declare("dojox.grid.edit", null, { constructor: function (_86e) { this.grid = _86e; this.connections = []; if (dojo.isIE) { this.connections.push(dojo.connect(document.body, "onfocus", dojo.hitch(this, "_boomerangFocus"))); } }, info: {}, destroy: function () { dojo.forEach(this.connections, function (c) { dojo.disconnect(c); }); }, cellFocus: function (_870, _871) { if (this.grid.singleClickEdit || this.isEditRow(_871)) { this.setEditCell(_870, _871); } else { this.apply(); } if (this.isEditing() || (_870 && (_870.editor || 0).alwaysOn)) { this._focusEditor(_870, _871); } }, rowClick: function (e) { if (this.isEditing() && !this.isEditRow(e.rowIndex)) { this.apply(); } }, styleRow: function (_873) { if (_873.index == this.info.rowIndex) { _873.customClasses += " dojoxGrid-row-editing"; } }, dispatchEvent: function (e) { var c = e.cell, ed = c && c.editor; return ed && ed.dispatchEvent(e.dispatch, e); }, isEditing: function () { return this.info.rowIndex !== undefined; }, isEditCell: function (_877, _878) { return (this.info.rowIndex === _877) && (this.info.cell.index == _878); }, isEditRow: function (_879) { return this.info.rowIndex === _879; }, setEditCell: function (_87a, _87b) { if (!this.isEditCell(_87b, _87a.index)) { var _87c = !(_87a.editor || 0).alwaysOn || (_87b == this.info.rowIndex); this.start(_87a, _87b, _87c); } }, _focusEditor: function (_87d, _87e) { dojox.grid.fire(_87d.editor, "focus", [_87e]); }, focusEditor: function () { if (this.isEditing()) { this._focusEditor(this.info.cell, this.info.rowIndex); } }, _boomerangWindow: 500, _shouldCatchBoomerang: function () { return this._catchBoomerang > new Date().getTime(); }, _boomerangFocus: function () { if (this._shouldCatchBoomerang()) { this.grid.focus.focusGrid(); this.focusEditor(); this._catchBoomerang = 0; } }, _doCatchBoomerang: function () { if (dojo.isIE) { this._catchBoomerang = new Date().getTime() + this._boomerangWindow; } }, start: function (_87f, _880, _881) { this.grid.beginUpdate(); this.editorApply(); if (this.isEditing() && !this.isEditRow(_880)) { this.applyRowEdit(); this.grid.updateRow(_880); } if (_881) { this.info = { cell: _87f, rowIndex: _880 }; this.grid.doStartEdit(_87f, _880); this.grid.updateRow(_880); } else { this.info = {}; } this.grid.endUpdate(); this.grid.focus.focusGrid(); this._focusEditor(_87f, _880); this._doCatchBoomerang(); }, _editorDo: function (_882) { var c = this.info.cell; c && c.editor && c.editor[_882](this.info.rowIndex); }, editorApply: function () { this._editorDo("apply"); }, editorCancel: function () { this._editorDo("cancel"); }, applyCellEdit: function (_884, _885, _886) { this.grid.doApplyCellEdit(_884, _886, _885.fieldIndex); }, applyRowEdit: function () { this.grid.doApplyEdit(this.info.rowIndex); }, apply: function () { if (this.isEditing()) { this.grid.beginUpdate(); this.editorApply(); this.applyRowEdit(); this.info = {}; this.grid.endUpdate(); this.grid.focus.focusGrid(); this._doCatchBoomerang(); } }, cancel: function () { if (this.isEditing()) { this.grid.beginUpdate(); this.editorCancel(); this.info = {}; this.grid.endUpdate(); this.grid.focus.focusGrid(); this._doCatchBoomerang(); } }, save: function (_887, _888) { var c = this.info.cell; if (this.isEditRow(_887) && (!_888 || c.view == _888)) { c.editor.save(c, this.info.rowIndex); } }, restore: function (_88a, _88b) { var c = this.info.cell; if (this.isEditRow(_88b) && c.view == _88a) { c.editor.restore(c, this.info.rowIndex); } } }); } if (!dojo._hasResource["dojox.grid._grid.rowbar"]) { dojo._hasResource["dojox.grid._grid.rowbar"] = true; dojo.provide("dojox.grid._grid.rowbar"); dojo.declare("dojox.GridRowView", dojox.GridView, { defaultWidth: "3em", noscroll: true, padBorderWidth: 2, buildRendering: function () { this.inherited("buildRendering", arguments); this.scrollboxNode.style.overflow = "hidden"; this.headerNode.style.visibility = "hidden"; }, getWidth: function () { return this.viewWidth || this.defaultWidth; }, buildRowContent: function (_88d, _88e) { var w = this.contentNode.offsetWidth - this.padBorderWidth; _88e.innerHTML = "<table style=\"width:" + w + "px;\" role=\"wairole:presentation\"><tr><td class=\"dojoxGrid-rowbar-inner\"></td></tr></table>"; }, renderHeader: function () { }, resize: function () { this.resizeHeight(); }, doStyleRowNode: function (_890, _891) { var n = ["dojoxGrid-rowbar"]; if (this.grid.rows.isOver(_890)) { n.push("dojoxGrid-rowbar-over"); } if (this.grid.selection.isSelected(_890)) { n.push("dojoxGrid-rowbar-selected"); } _891.className = n.join(" "); }, domouseover: function (e) { this.grid.onMouseOverRow(e); }, domouseout: function (e) { if (!this.isIntraRowEvent(e)) { this.grid.onMouseOutRow(e); } } }); } if (!dojo._hasResource["dojox.grid._grid.publicEvents"]) { dojo._hasResource["dojox.grid._grid.publicEvents"] = true; dojo.provide("dojox.grid._grid.publicEvents"); dojox.grid.publicEvents = { cellOverClass: "dojoxGrid-cell-over", onKeyEvent: function (e) { this.dispatchKeyEvent(e); }, onContentEvent: function (e) { this.dispatchContentEvent(e); }, onHeaderEvent: function (e) { this.dispatchHeaderEvent(e); }, onStyleRow: function (_898) { with (_898) { customClasses += (odd ? " dojoxGrid-row-odd" : "") + (selected ? " dojoxGrid-row-selected" : "") + (over ? " dojoxGrid-row-over" : ""); } this.focus.styleRow(_898); this.edit.styleRow(_898); }, onKeyDown: function (e) { if (e.altKey || e.ctrlKey || e.metaKey) { return; } switch (e.keyCode) { case dojo.keys.ESCAPE: this.edit.cancel(); break; case dojo.keys.ENTER: if (!e.shiftKey) { var _89a = this.edit.isEditing(); this.edit.apply(); if (!_89a) { this.edit.setEditCell(this.focus.cell, this.focus.rowIndex); } } break; case dojo.keys.TAB: this.focus[e.shiftKey ? "previousKey" : "nextKey"](e); break; case dojo.keys.LEFT_ARROW: if (!this.edit.isEditing()) { this.focus.move(0, -1); } break; case dojo.keys.RIGHT_ARROW: if (!this.edit.isEditing()) { this.focus.move(0, 1); } break; case dojo.keys.UP_ARROW: if (!this.edit.isEditing()) { this.focus.move(-1, 0); } break; case dojo.keys.DOWN_ARROW: if (!this.edit.isEditing()) { this.focus.move(1, 0); } break; } }, onMouseOver: function (e) { e.rowIndex == -1 ? this.onHeaderCellMouseOver(e) : this.onCellMouseOver(e); }, onMouseOut: function (e) { e.rowIndex == -1 ? this.onHeaderCellMouseOut(e) : this.onCellMouseOut(e); }, onMouseOverRow: function (e) { if (!this.rows.isOver(e.rowIndex)) { this.rows.setOverRow(e.rowIndex); e.rowIndex == -1 ? this.onHeaderMouseOver(e) : this.onRowMouseOver(e); } }, onMouseOutRow: function (e) { if (this.rows.isOver(-1)) { this.onHeaderMouseOut(e); } else { if (!this.rows.isOver(-2)) { this.rows.setOverRow(-2); this.onRowMouseOut(e); } } }, onCellMouseOver: function (e) { dojo.addClass(e.cellNode, this.cellOverClass); }, onCellMouseOut: function (e) { dojo.removeClass(e.cellNode, this.cellOverClass); }, onCellClick: function (e) { this.focus.setFocusCell(e.cell, e.rowIndex); this.onRowClick(e); }, onCellDblClick: function (e) { this.edit.setEditCell(e.cell, e.rowIndex); this.onRowDblClick(e); }, onCellContextMenu: function (e) { this.onRowContextMenu(e); }, onCellFocus: function (_8a4, _8a5) { this.edit.cellFocus(_8a4, _8a5); }, onRowClick: function (e) { this.edit.rowClick(e); this.selection.clickSelectEvent(e); }, onRowDblClick: function (e) { }, onRowMouseOver: function (e) { }, onRowMouseOut: function (e) { }, onRowContextMenu: function (e) { dojo.stopEvent(e); }, onHeaderMouseOver: function (e) { }, onHeaderMouseOut: function (e) { }, onHeaderCellMouseOver: function (e) { dojo.addClass(e.cellNode, this.cellOverClass); }, onHeaderCellMouseOut: function (e) { dojo.removeClass(e.cellNode, this.cellOverClass); }, onHeaderClick: function (e) { }, onHeaderCellClick: function (e) { this.setSortIndex(e.cell.index); this.onHeaderClick(e); }, onHeaderDblClick: function (e) { }, onHeaderCellDblClick: function (e) { this.onHeaderDblClick(e); }, onHeaderCellContextMenu: function (e) { this.onHeaderContextMenu(e); }, onHeaderContextMenu: function (e) { dojo.stopEvent(e); }, onStartEdit: function (_8b5, _8b6) { }, onApplyCellEdit: function (_8b7, _8b8, _8b9) { }, onCancelEdit: function (_8ba) { }, onApplyEdit: function (_8bb) { }, onCanSelect: function (_8bc) { return true; }, onCanDeselect: function (_8bd) { return true; }, onSelected: function (_8be) { this.updateRowStyles(_8be); }, onDeselected: function (_8bf) { this.updateRowStyles(_8bf); }, onSelectionChanged: function () { } }; } if (!dojo._hasResource["dojox.grid.VirtualGrid"]) { dojo._hasResource["dojox.grid.VirtualGrid"] = true; dojo.provide("dojox.grid.VirtualGrid"); dojo.declare("dojox.VirtualGrid", [dijit._Widget, dijit._Templated], { templateString: "<div class=\"dojoxGrid\" hidefocus=\"hidefocus\" role=\"wairole:grid\"><div class=\"dojoxGrid-master-header\" dojoAttachPoint=\"headerNode\"></div><div class=\"dojoxGrid-master-view\" dojoAttachPoint=\"viewsNode\"></div><span dojoAttachPoint=\"lastFocusNode\" tabindex=\"0\"></span></div>", classTag: "dojoxGrid", get: function (_8c0) { }, rowCount: 5, keepRows: 75, rowsPerPage: 25, autoWidth: false, autoHeight: false, autoRender: true, defaultHeight: "15em", structure: "", elasticView: -1, singleClickEdit: false, sortInfo: 0, themeable: true, buildRendering: function () { this.inherited(arguments); if (this.get == dojox.VirtualGrid.prototype.get) { this.get = null; } if (!this.domNode.getAttribute("tabIndex")) { this.domNode.tabIndex = "0"; } this.createScroller(); this.createLayout(); this.createViews(); this.createManagers(); dojox.grid.initTextSizePoll(); this.connect(dojox.grid, "textSizeChanged", "textSizeChanged"); dojox.grid.funnelEvents(this.domNode, this, "doKeyEvent", dojox.grid.keyEvents); this.connect(this, "onShow", "renderOnIdle"); }, postCreate: function () { this.styleChanged = this._styleChanged; this.setStructure(this.structure); }, destroy: function () { this.domNode.onReveal = null; this.domNode.onSizeChange = null; this.edit.destroy(); this.views.destroyViews(); this.inherited(arguments); }, styleChanged: function () { this.setStyledClass(this.domNode, ""); }, _styleChanged: function () { this.styleChanged(); this.update(); }, textSizeChanged: function () { setTimeout(dojo.hitch(this, "_textSizeChanged"), 1); }, _textSizeChanged: function () { if (this.domNode) { this.views.forEach(function (v) { v.content.update(); }); this.render(); } }, sizeChange: function () { dojox.grid.jobs.job(this.id + "SizeChange", 50, dojo.hitch(this, "update")); }, renderOnIdle: function () { setTimeout(dojo.hitch(this, "render"), 1); }, createManagers: function () { this.rows = new dojox.grid.rows(this); this.focus = new dojox.grid.focus(this); this.selection = new dojox.grid.selection(this); this.edit = new dojox.grid.edit(this); }, createScroller: function () { this.scroller = new dojox.grid.scroller.columns(); this.scroller.renderRow = dojo.hitch(this, "renderRow"); this.scroller.removeRow = dojo.hitch(this, "rowRemoved"); }, createLayout: function () { this.layout = new dojox.grid.layout(this); }, createViews: function () { this.views = new dojox.grid.views(this); this.views.createView = dojo.hitch(this, "createView"); }, createView: function (_8c2) { var c = eval(_8c2); var view = new c({ grid: this }); this.viewsNode.appendChild(view.domNode); this.headerNode.appendChild(view.headerNode); this.views.addView(view); return view; }, buildViews: function () { for (var i = 0, vs; (vs = this.layout.structure[i]); i++) { this.createView(vs.type || "dojox.GridView").setStructure(vs); } this.scroller.setContentNodes(this.views.getContentNodes()); }, setStructure: function (_8c7) { this.views.destroyViews(); this.structure = _8c7; if ((this.structure) && (dojo.isString(this.structure))) { this.structure = dojox.grid.getProp(this.structure); } if (!this.structure) { this.structure = window["layout"]; } if (!this.structure) { return; } this.layout.setStructure(this.structure); this._structureChanged(); }, _structureChanged: function () { this.buildViews(); if (this.autoRender) { this.render(); } }, resize: function () { if (!this.domNode.parentNode) { return; } var _8c8 = dojo._getPadBorderExtents(this.domNode); if (this.autoHeight) { this.domNode.style.height = "auto"; this.viewsNode.style.height = ""; } else { if (this.flex > 0) { } else { if (this.domNode.clientHeight <= _8c8.h) { if (this.domNode.parentNode == document.body) { this.domNode.style.height = this.defaultHeight; } else { this.fitTo = "parent"; } } } } if (this.fitTo == "parent") { var h = dojo._getContentBox(this.domNode.parentNode).h; dojo.marginBox(this.domNode, { h: Math.max(0, h) }); } var t = this.views.measureHeader(); this.headerNode.style.height = t + "px"; var l = 1, h = (this.autoHeight ? -1 : Math.max(this.domNode.clientHeight - t, 0) || 0); if (this.autoWidth) { this.domNode.style.width = this.views.arrange(l, 0, 0, h) + "px"; } else { var w = this.domNode.clientWidth || (this.domNode.offsetWidth - _8c8.w); this.views.arrange(l, 0, w, h); } this.scroller.windowHeight = h; this.scroller.defaultRowHeight = this.rows.getDefaultHeightPx() + 1; this.postresize(); }, resizeHeight: function () { var t = this.views.measureHeader(); this.headerNode.style.height = t + "px"; var h = (this.autoHeight ? -1 : Math.max(this.domNode.clientHeight - t, 0) || 0); this.views.onEach("setSize", [0, h]); this.views.onEach("resizeHeight"); this.scroller.windowHeight = h; }, render: function () { if (!this.domNode) { return; } this.update = this.defaultUpdate; this.scroller.init(this.rowCount, this.keepRows, this.rowsPerPage); this.prerender(); this.setScrollTop(0); this.postrender(); }, prerender: function () { this.views.render(); this.resize(); }, postrender: function () { this.postresize(); this.focus.initFocusView(); dojo.setSelectable(this.domNode, false); }, postresize: function () { if (this.autoHeight) { this.viewsNode.style.height = this.views.measureContent() + "px"; } }, renderRow: function (_8cf, _8d0) { this.views.renderRow(_8cf, _8d0); }, rowRemoved: function (_8d1) { this.views.rowRemoved(_8d1); }, invalidated: null, updating: false, beginUpdate: function () { this.invalidated = []; this.updating = true; }, endUpdate: function () { this.updating = false; var i = this.invalidated; if (i.all) { this.update(); } else { if (i.rowCount != undefined) { this.updateRowCount(i.rowCount); } else { for (r in i) { this.updateRow(Number(r)); } } } this.invalidated = null; }, defaultUpdate: function () { if (this.updating) { this.invalidated.all = true; return; } this.prerender(); this.scroller.invalidateNodes(); this.setScrollTop(this.scrollTop); this.postrender(); }, update: function () { this.render(); }, updateRow: function (_8d3) { _8d3 = Number(_8d3); if (this.updating) { this.invalidated[_8d3] = true; return; } this.views.updateRow(_8d3, this.rows.getHeight(_8d3)); this.scroller.rowHeightChanged(_8d3); }, updateRowCount: function (_8d4) { if (this.updating) { this.invalidated.rowCount = _8d4; return; } this.rowCount = _8d4; this.scroller.updateRowCount(_8d4); this.setScrollTop(this.scrollTop); this.resize(); }, updateRowStyles: function (_8d5) { this.views.updateRowStyles(_8d5); }, rowHeightChanged: function (_8d6) { this.views.renormalizeRow(_8d6); this.scroller.rowHeightChanged(_8d6); }, fastScroll: true, delayScroll: false, scrollRedrawThreshold: (dojo.isIE ? 100 : 50), scrollTo: function (_8d7) { if (!this.fastScroll) { this.setScrollTop(_8d7); return; } var _8d8 = Math.abs(this.lastScrollTop - _8d7); this.lastScrollTop = _8d7; if (_8d8 > this.scrollRedrawThreshold || this.delayScroll) { this.delayScroll = true; this.scrollTop = _8d7; this.views.setScrollTop(_8d7); dojox.grid.jobs.job("dojoxGrid-scroll", 200, dojo.hitch(this, "finishScrollJob")); } else { this.setScrollTop(_8d7); } }, finishScrollJob: function () { this.delayScroll = false; this.setScrollTop(this.scrollTop); }, setScrollTop: function (_8d9) { this.scrollTop = this.views.setScrollTop(_8d9); this.scroller.scroll(this.scrollTop); }, scrollToRow: function (_8da) { this.setScrollTop(this.scroller.findScrollTop(_8da) + 1); }, styleRowNode: function (_8db, _8dc) { if (_8dc) { this.rows.styleRowNode(_8db, _8dc); } }, getCell: function (_8dd) { return this.layout.cells[_8dd]; }, setCellWidth: function (_8de, _8df) { this.getCell(_8de).unitWidth = _8df; }, getCellName: function (_8e0) { return "Cell " + _8e0.index; }, canSort: function (_8e1) { }, sort: function () { }, getSortAsc: function (_8e2) { _8e2 = _8e2 == undefined ? this.sortInfo : _8e2; return Boolean(_8e2 > 0); }, getSortIndex: function (_8e3) { _8e3 = _8e3 == undefined ? this.sortInfo : _8e3; return Math.abs(_8e3) - 1; }, setSortIndex: function (_8e4, _8e5) { var si = _8e4 + 1; if (_8e5 != undefined) { si *= (_8e5 ? 1 : -1); } else { if (this.getSortIndex() == _8e4) { si = -this.sortInfo; } } this.setSortInfo(si); }, setSortInfo: function (_8e7) { if (this.canSort(_8e7)) { this.sortInfo = _8e7; this.sort(); this.update(); } }, doKeyEvent: function (e) { e.dispatch = "do" + e.type; this.onKeyEvent(e); }, _dispatch: function (m, e) { if (m in this) { return this[m](e); } }, dispatchKeyEvent: function (e) { this._dispatch(e.dispatch, e); }, dispatchContentEvent: function (e) { this.edit.dispatchEvent(e) || e.sourceView.dispatchContentEvent(e) || this._dispatch(e.dispatch, e); }, dispatchHeaderEvent: function (e) { e.sourceView.dispatchHeaderEvent(e) || this._dispatch("doheader" + e.type, e); }, dokeydown: function (e) { this.onKeyDown(e); }, doclick: function (e) { if (e.cellNode) { this.onCellClick(e); } else { this.onRowClick(e); } }, dodblclick: function (e) { if (e.cellNode) { this.onCellDblClick(e); } else { this.onRowDblClick(e); } }, docontextmenu: function (e) { if (e.cellNode) { this.onCellContextMenu(e); } else { this.onRowContextMenu(e); } }, doheaderclick: function (e) { if (e.cellNode) { this.onHeaderCellClick(e); } else { this.onHeaderClick(e); } }, doheaderdblclick: function (e) { if (e.cellNode) { this.onHeaderCellDblClick(e); } else { this.onHeaderDblClick(e); } }, doheadercontextmenu: function (e) { if (e.cellNode) { this.onHeaderCellContextMenu(e); } else { this.onHeaderContextMenu(e); } }, doStartEdit: function (_8f5, _8f6) { this.onStartEdit(_8f5, _8f6); }, doApplyCellEdit: function (_8f7, _8f8, _8f9) { this.onApplyCellEdit(_8f7, _8f8, _8f9); }, doCancelEdit: function (_8fa) { this.onCancelEdit(_8fa); }, doApplyEdit: function (_8fb) { this.onApplyEdit(_8fb); }, addRow: function () { this.updateRowCount(this.rowCount + 1); }, removeSelectedRows: function () { this.updateRowCount(Math.max(0, this.rowCount - this.selection.getSelected().length)); this.selection.clear(); } }); dojo.mixin(dojox.VirtualGrid.prototype, dojox.grid.publicEvents); } if (!dojo._hasResource["dojox.grid._data.fields"]) { dojo._hasResource["dojox.grid._data.fields"] = true; dojo.provide("dojox.grid._data.fields"); dojo.declare("dojox.grid.data.Mixer", null, { constructor: function () { this.defaultValue = {}; this.values = []; }, count: function () { return this.values.length; }, clear: function () { this.values = []; }, build: function (_8fc) { var _8fd = dojo.mixin({ owner: this }, this.defaultValue); _8fd.key = _8fc; this.values[_8fc] = _8fd; return _8fd; }, getDefault: function () { return this.defaultValue; }, setDefault: function (_8fe) { for (var i = 0, a; (a = arguments[i]); i++) { dojo.mixin(this.defaultValue, a); } }, get: function (_901) { return this.values[_901] || this.build(_901); }, _set: function (_902, _903) { var v = this.get(_902); for (var i = 1; i < arguments.length; i++) { dojo.mixin(v, arguments[i]); } this.values[_902] = v; }, set: function () { if (arguments.length < 1) { return; } var a = arguments[0]; if (!dojo.isArray(a)) { this._set.apply(this, arguments); } else { if (a.length && a[0]["default"]) { this.setDefault(a.shift()); } for (var i = 0, l = a.length; i < l; i++) { this._set(i, a[i]); } } }, insert: function (_909, _90a) { if (_909 >= this.values.length) { this.values[_909] = _90a; } else { this.values.splice(_909, 0, _90a); } }, remove: function (_90b) { this.values.splice(_90b, 1); }, swap: function (_90c, _90d) { dojox.grid.arraySwap(this.values, _90c, _90d); }, move: function (_90e, _90f) { dojox.grid.arrayMove(this.values, _90e, _90f); } }); dojox.grid.data.compare = function (a, b) { return (a > b ? 1 : (a == b ? 0 : -1)); }; dojo.declare("dojox.grid.data.Field", null, { constructor: function (_912) { this.name = _912; this.compare = dojox.grid.data.compare; }, na: dojox.grid.na }); dojo.declare("dojox.grid.data.Fields", dojox.grid.data.Mixer, { constructor: function (_913) { var _914 = _913 ? _913 : dojox.grid.data.Field; this.defaultValue = new _914(); }, indexOf: function (_915) { for (var i = 0; i < this.values.length; i++) { var v = this.values[i]; if (v && v.key == _915) { return i; } } return -1; } }); } if (!dojo._hasResource["dojox.grid._data.model"]) { dojo._hasResource["dojox.grid._data.model"] = true; dojo.provide("dojox.grid._data.model"); dojo.declare("dojox.grid.data.Model", null, { constructor: function (_918, _919) { this.observers = []; this.fields = new dojox.grid.data.Fields(); if (_918) { this.fields.set(_918); } this.setData(_919); }, count: 0, updating: 0, observer: function (_91a, _91b) { this.observers.push({ o: _91a, p: _91b || "model" }); }, notObserver: function (_91c) { for (var i = 0, m, o; (o = this.observers[i]); i++) { if (o.o == _91c) { this.observers.splice(i, 1); return; } } }, notify: function (_920, _921) { if (!this.isUpdating()) { var a = _921 || []; for (var i = 0, m, o; (o = this.observers[i]); i++) { m = o.p + _920, o = o.o; (m in o) && (o[m].apply(o, a)); } } }, clear: function () { this.fields.clear(); this.clearData(); }, beginUpdate: function () { this.updating++; }, endUpdate: function () { if (this.updating) { this.updating--; } }, isUpdating: function () { return Boolean(this.updating); }, clearData: function () { this.setData(null); }, change: function () { this.notify("Change", arguments); }, insertion: function () { this.notify("Insertion", arguments); this.notify("Change", arguments); }, removal: function () { this.notify("Removal", arguments); this.notify("Change", arguments); }, insert: function (_926) { if (!this._insert.apply(this, arguments)) { return false; } this.insertion.apply(this, dojo._toArray(arguments, 1)); return true; }, remove: function (_927) { if (!this._remove.apply(this, arguments)) { return false; } this.removal.apply(this, arguments); return true; }, canSort: function () { return this.sort != null; }, makeComparator: function (_928) { var idx, col, _92b, _92c = null; for (var i = _928.length - 1; i >= 0; i--) { idx = _928[i]; col = Math.abs(idx) - 1; if (col >= 0) { _92b = this.fields.get(col); _92c = this.generateComparator(_92b.compare, _92b.key, idx > 0, _92c); } } return _92c; }, sort: null, dummy: 0 }); dojo.declare("dojox.grid.data.Rows", dojox.grid.data.Model, { allChange: function () { this.notify("AllChange", arguments); this.notify("Change", arguments); }, rowChange: function () { this.notify("RowChange", arguments); }, datumChange: function () { this.notify("DatumChange", arguments); }, beginModifyRow: function (_92e) { if (!this.cache[_92e]) { this.cache[_92e] = this.copyRow(_92e); } }, endModifyRow: function (_92f) { var _930 = this.cache[_92f]; if (_930) { var data = this.getRow(_92f); if (!dojox.grid.arrayCompare(_930, data)) { this.update(_930, data, _92f); } delete this.cache[_92f]; } }, cancelModifyRow: function (_932) { var _933 = this.cache[_932]; if (_933) { this.setRow(_933, _932); delete this.cache[_932]; } }, generateComparator: function (_934, _935, _936, _937) { return function (a, b) { var ineq = _934(a[_935], b[_935]); return ineq ? (_936 ? ineq : -ineq) : _937 && _937(a, b); }; } }); dojo.declare("dojox.grid.data.Table", dojox.grid.data.Rows, { constructor: function () { this.cache = []; }, colCount: 0, data: null, cache: null, measure: function () { this.count = this.getRowCount(); this.colCount = this.getColCount(); this.allChange(); }, getRowCount: function () { return (this.data ? this.data.length : 0); }, getColCount: function () { return (this.data && this.data.length ? this.data[0].length : this.fields.count()); }, badIndex: function (_93b, _93c) { console.debug("dojox.grid.data.Table: badIndex"); }, isGoodIndex: function (_93d, _93e) { return (_93d >= 0 && _93d < this.count && (arguments.length < 2 || (_93e >= 0 && _93e < this.colCount))); }, getRow: function (_93f) { return this.data[_93f]; }, copyRow: function (_940) { return this.getRow(_940).slice(0); }, getDatum: function (_941, _942) { return this.data[_941][_942]; }, get: function () { throw ("Plain \"get\" no longer supported. Use \"getRow\" or \"getDatum\"."); }, setData: function (_943) { this.data = (_943 || []); this.allChange(); }, setRow: function (_944, _945) { this.data[_945] = _944; this.rowChange(_944, _945); this.change(); }, setDatum: function (_946, _947, _948) { this.data[_947][_948] = _946; this.datumChange(_946, _947, _948); }, set: function () { throw ("Plain \"set\" no longer supported. Use \"setData\", \"setRow\", or \"setDatum\"."); }, setRows: function (_949, _94a) { for (var i = 0, l = _949.length, r = _94a; i < l; i++, r++) { this.setRow(_949[i], r); } }, update: function (_94e, _94f, _950) { return true; }, _insert: function (_951, _952) { dojox.grid.arrayInsert(this.data, _952, _951); this.count++; return true; }, _remove: function (_953) { for (var i = _953.length - 1; i >= 0; i--) { dojox.grid.arrayRemove(this.data, _953[i]); } this.count -= _953.length; return true; }, sort: function () { this.data.sort(this.makeComparator(arguments)); }, swap: function (_955, _956) { dojox.grid.arraySwap(this.data, _955, _956); this.rowChange(this.getRow(_955), _955); this.rowChange(this.getRow(_956), _956); this.change(); }, dummy: 0 }); dojo.declare("dojox.grid.data.Objects", dojox.grid.data.Table, { constructor: function (_957, _958, _959) { if (!_957) { this.autoAssignFields(); } }, autoAssignFields: function () { var d = this.data[0], i = 0; for (var f in d) { this.fields.get(i++).key = f; } }, getDatum: function (_95d, _95e) { return this.data[_95d][this.fields.get(_95e).key]; } }); dojo.declare("dojox.grid.data.Dynamic", dojox.grid.data.Table, { constructor: function () { this.page = []; this.pages = []; }, page: null, pages: null, rowsPerPage: 100, requests: 0, bop: -1, eop: -1, clearData: function () { this.pages = []; this.bop = this.eop = -1; this.setData([]); }, getRowCount: function () { return this.count; }, getColCount: function () { return this.fields.count(); }, setRowCount: function (_95f) { this.count = _95f; this.change(); }, requestsPending: function (_960) { }, rowToPage: function (_961) { return (this.rowsPerPage ? Math.floor(_961 / this.rowsPerPage) : _961); }, pageToRow: function (_962) { return (this.rowsPerPage ? this.rowsPerPage * _962 : _962); }, requestRows: function (_963, _964) { }, rowsProvided: function (_965, _966) { this.requests--; if (this.requests == 0) { this.requestsPending(false); } }, requestPage: function (_967) { var row = this.pageToRow(_967); var _969 = Math.min(this.rowsPerPage, this.count - row); if (_969 > 0) { this.requests++; this.requestsPending(true); setTimeout(dojo.hitch(this, "requestRows", row, _969), 1); } }, needPage: function (_96a) { if (!this.pages[_96a]) { this.pages[_96a] = true; this.requestPage(_96a); } }, preparePage: function (_96b, _96c) { if (_96b < this.bop || _96b >= this.eop) { var _96d = this.rowToPage(_96b); this.needPage(_96d); this.bop = _96d * this.rowsPerPage; this.eop = this.bop + (this.rowsPerPage || this.count); } }, isRowLoaded: function (_96e) { return Boolean(this.data[_96e]); }, removePages: function (_96f) { for (var i = 0, r; ((r = _96f[i]) != undefined); i++) { this.pages[this.rowToPage(r)] = false; } this.bop = this.eop = -1; }, remove: function (_972) { this.removePages(_972); dojox.grid.data.Table.prototype.remove.apply(this, arguments); }, getRow: function (_973) { var row = this.data[_973]; if (!row) { this.preparePage(_973); } return row; }, getDatum: function (_975, _976) { var row = this.getRow(_975); return (row ? row[_976] : this.fields.get(_976).na); }, setDatum: function (_978, _979, _97a) { var row = this.getRow(_979); if (row) { row[_97a] = _978; this.datumChange(_978, _979, _97a); } else { console.debug("[" + this.declaredClass + "] dojox.grid.data.dynamic.set: cannot set data on an non-loaded row"); } }, canSort: function () { return false; } }); dojox.grid.data.table = dojox.grid.data.Table; dojox.grid.data.dynamic = dojox.grid.data.Dyanamic; dojo.declare("dojox.grid.data.DojoData", dojox.grid.data.Dynamic, { constructor: function (_97c, _97d, args) { this.count = 1; this._rowIdentities = {}; if (args) { dojo.mixin(this, args); } if (this.store) { var f = this.store.getFeatures(); this._canNotify = f["dojo.data.api.Notification"]; this._canWrite = f["dojo.data.api.Write"]; if (this._canNotify) { dojo.connect(this.store, "onSet", this, "_storeDatumChange"); } } }, markupFactory: function (args, node) { return new dojox.grid.data.DojoData(null, null, args); }, query: { name: "*" }, store: null, _canNotify: false, _canWrite: false, _rowIdentities: {}, clientSort: false, setData: function (_982) { this.store = _982; this.data = []; this.allChange(); }, setRowCount: function (_983) { this.count = _983; this.allChange(); }, beginReturn: function (_984) { if (this.count != _984) { this.setRowCount(_984); } }, _setupFields: function (_985) { if (this.fields._nameMaps) { return; } var m = {}; var _987 = dojo.map(this.store.getAttributes(_985), function (item, idx) { m[item] = idx; m[idx + ".idx"] = item; return { name: item, key: item }; }, this); this.fields._nameMaps = m; this.fields.set(_987); this.notify("FieldsChange"); }, _getRowFromItem: function (item) { }, processRows: function (_98b, _98c) { if (!_98b) { return; } this._setupFields(_98b[0]); dojo.forEach(_98b, function (item, idx) { var row = {}; row.__dojo_data_item = item; dojo.forEach(this.fields.values, function (a) { row[a.name] = this.store.getValue(item, a.name) || ""; }, this); this._rowIdentities[this.store.getIdentity(item)] = _98c.start + idx; this.setRow(row, _98c.start + idx); }, this); }, requestRows: function (_991, _992) { var row = _991 || 0; var _994 = { start: row, count: this.rowsPerPage, query: this.query, onBegin: dojo.hitch(this, "beginReturn"), onComplete: dojo.hitch(this, "processRows") }; this.store.fetch(_994); }, getDatum: function (_995, _996) { var row = this.getRow(_995); var _998 = this.fields.values[_996]; return row && _998 ? row[_998.name] : _998 ? _998.na : "?"; }, setDatum: function (_999, _99a, _99b) { var n = this.fields._nameMaps[_99b + ".idx"]; if (n) { this.data[_99a][n] = _999; this.datumChange(_999, _99a, _99b); } }, copyRow: function (_99d) { var row = {}; var _99f = {}; var src = this.getRow(_99d); for (var x in src) { if (src[x] != _99f[x]) { row[x] = src[x]; } } return row; }, _attrCompare: function (_9a2, data) { dojo.forEach(this.fields.values, function (a) { if (_9a2[a.name] != data[a.name]) { return false; } }, this); return true; }, endModifyRow: function (_9a5) { var _9a6 = this.cache[_9a5]; if (_9a6) { var data = this.getRow(_9a5); if (!this._attrCompare(_9a6, data)) { this.update(_9a6, data, _9a5); } delete this.cache[_9a5]; } }, cancelModifyRow: function (_9a8) { var _9a9 = this.cache[_9a8]; if (_9a9) { this.setRow(_9a9, _9a8); delete this.cache[_9a8]; } }, _storeDatumChange: function (item, attr, _9ac, _9ad) { var _9ae = this._rowIdentities[this.store.getIdentity(item)]; var row = this.getRow(_9ae); row[attr] = _9ad; var _9b0 = this.fields._nameMaps[attr]; this.notify("DatumChange", [_9ad, _9ae, _9b0]); }, datumChange: function (_9b1, _9b2, _9b3) { if (this._canWrite) { var row = this.getRow(_9b2); var _9b5 = this.fields._nameMaps[_9b3 + ".idx"]; this.store.setValue(row.__dojo_data_item, _9b5, _9b1); } else { this.notify("DatumChange", arguments); } }, insertion: function () { console.debug("Insertion", arguments); this.notify("Insertion", arguments); this.notify("Change", arguments); }, removal: function () { console.debug("Removal", arguments); this.notify("Removal", arguments); this.notify("Change", arguments); }, canSort: function () { return this.clientSort; } }); } if (!dojo._hasResource["dojox.grid._data.editors"]) { dojo._hasResource["dojox.grid._data.editors"] = true; dojo.provide("dojox.grid._data.editors"); dojo.provide("dojox.grid.editors"); dojo.declare("dojox.grid.editors.Base", null, { constructor: function (_9b6) { this.cell = _9b6; }, _valueProp: "value", _formatPending: false, format: function (_9b7, _9b8) { }, needFormatNode: function (_9b9, _9ba) { this._formatPending = true; dojox.grid.whenIdle(this, "_formatNode", _9b9, _9ba); }, cancelFormatNode: function () { this._formatPending = false; }, _formatNode: function (_9bb, _9bc) { if (this._formatPending) { this._formatPending = false; dojo.setSelectable(this.cell.grid.domNode, true); this.formatNode(this.getNode(_9bc), _9bb, _9bc); } }, getNode: function (_9bd) { return (this.cell.getNode(_9bd) || 0).firstChild || 0; }, formatNode: function (_9be, _9bf, _9c0) { if (dojo.isIE) { dojox.grid.whenIdle(this, "focus", _9c0, _9be); } else { this.focus(_9c0, _9be); } }, dispatchEvent: function (m, e) { if (m in this) { return this[m](e); } }, getValue: function (_9c3) { return this.getNode(_9c3)[this._valueProp]; }, setValue: function (_9c4, _9c5) { var n = this.getNode(_9c4); if (n) { n[this._valueProp] = _9c5; } }, focus: function (_9c7, _9c8) { dojox.grid.focusSelectNode(_9c8 || this.getNode(_9c7)); }, save: function (_9c9) { this.value = this.value || this.getValue(_9c9); }, restore: function (_9ca) { this.setValue(_9ca, this.value); }, _finish: function (_9cb) { dojo.setSelectable(this.cell.grid.domNode, false); this.cancelFormatNode(this.cell); }, apply: function (_9cc) { this.cell.applyEdit(this.getValue(_9cc), _9cc); this._finish(_9cc); }, cancel: function (_9cd) { this.cell.cancelEdit(_9cd); this._finish(_9cd); } }); dojox.grid.editors.base = dojox.grid.editors.Base; dojo.declare("dojox.grid.editors.Input", dojox.grid.editors.Base, { constructor: function (_9ce) { this.keyFilter = this.keyFilter || this.cell.keyFilter; }, keyFilter: null, format: function (_9cf, _9d0) { this.needFormatNode(_9cf, _9d0); return "<input class=\"dojoxGrid-input\" type=\"text\" value=\"" + _9cf + "\">"; }, formatNode: function (_9d1, _9d2, _9d3) { this.inherited(arguments); this.cell.registerOnBlur(_9d1, _9d3); }, doKey: function (e) { if (this.keyFilter) { var key = String.fromCharCode(e.charCode); if (key.search(this.keyFilter) == -1) { dojo.stopEvent(e); } } }, _finish: function (_9d6) { this.inherited(arguments); var n = this.getNode(_9d6); try { dojox.grid.fire(n, "blur"); } catch (e) { } } }); dojox.grid.editors.input = dojox.grid.editors.Input; dojo.declare("dojox.grid.editors.Select", dojox.grid.editors.Input, { constructor: function (_9d8) { this.options = this.options || this.cell.options; this.values = this.values || this.cell.values || this.options; }, format: function (_9d9, _9da) { this.needFormatNode(_9d9, _9da); var h = ["<select class=\"dojoxGrid-select\">"]; for (var i = 0, o, v; (o = this.options[i]) && (v = this.values[i]); i++) { h.push("<option", (_9d9 == o ? " selected" : ""), ">", o, "</option>"); } h.push("</select>"); return h.join(""); }, getValue: function (_9df) { var n = this.getNode(_9df); if (n) { var i = n.selectedIndex, o = n.options[i]; return this.cell.returnIndex ? i : o.value || o.innerHTML; } } }); dojox.grid.editors.select = dojox.grid.editors.Select; dojo.declare("dojox.grid.editors.AlwaysOn", dojox.grid.editors.Input, { alwaysOn: true, _formatNode: function (_9e3, _9e4) { this.formatNode(this.getNode(_9e4), _9e3, _9e4); }, applyStaticValue: function (_9e5) { var e = this.cell.grid.edit; e.applyCellEdit(this.getValue(_9e5), this.cell, _9e5); e.start(this.cell, _9e5, true); } }); dojox.grid.editors.alwaysOn = dojox.grid.editors.AlwaysOn; dojo.declare("dojox.grid.editors.Bool", dojox.grid.editors.AlwaysOn, { _valueProp: "checked", format: function (_9e7, _9e8) { return "<input class=\"dojoxGrid-input\" type=\"checkbox\"" + (_9e7 ? " checked=\"checked\"" : "") + " style=\"width: auto\" />"; }, doclick: function (e) { if (e.target.tagName == "INPUT") { this.applyStaticValue(e.rowIndex); } } }); dojox.grid.editors.bool = dojox.grid.editors.Bool; } if (!dojo._hasResource["dojox.grid.Grid"]) { dojo._hasResource["dojox.grid.Grid"] = true; dojo.provide("dojox.grid.Grid"); dojo.declare("dojox.Grid", dojox.VirtualGrid, { model: "dojox.grid.data.Table", postCreate: function () { if (this.model) { var m = this.model; if (dojo.isString(m)) { m = dojo.getObject(m); } this.model = (dojo.isFunction(m)) ? new m() : m; this._setModel(this.model); } this.inherited(arguments); }, destroy: function () { this.setModel(null); this.inherited(arguments); }, _structureChanged: function () { this.indexCellFields(); this.inherited(arguments); }, _setModel: function (_9eb) { this.model = _9eb; if (this.model) { this.model.observer(this); this.model.measure(); this.indexCellFields(); } }, setModel: function (_9ec) { if (this.model) { this.model.notObserver(this); } this._setModel(_9ec); }, get: function (_9ed) { return this.grid.model.getDatum(_9ed, this.fieldIndex); }, modelAllChange: function () { this.rowCount = (this.model ? this.model.getRowCount() : 0); this.updateRowCount(this.rowCount); }, modelRowChange: function (_9ee, _9ef) { this.updateRow(_9ef); }, modelDatumChange: function (_9f0, _9f1, _9f2) { this.updateRow(_9f1); }, modelFieldsChange: function () { this.indexCellFields(); this.render(); }, modelInsertion: function (_9f3) { this.updateRowCount(this.model.getRowCount()); }, modelRemoval: function (_9f4) { this.updateRowCount(this.model.getRowCount()); }, getCellName: function (_9f5) { var v = this.model.fields.values, i = _9f5.fieldIndex; return i >= 0 && i < v.length && v[i].name || this.inherited(arguments); }, indexCellFields: function () { var _9f8 = this.layout.cells; for (var i = 0, c; _9f8 && (c = _9f8[i]); i++) { if (dojo.isString(c.field)) { c.fieldIndex = this.model.fields.indexOf(c.field); } } }, refresh: function () { this.edit.cancel(); this.model.measure(); }, canSort: function (_9fb) { var f = this.getSortField(_9fb); return f && this.model.canSort(f); }, getSortField: function (_9fd) { var c = this.getCell(this.getSortIndex(_9fd)); return (c.fieldIndex + 1) * (this.sortInfo > 0 ? 1 : -1); }, sort: function () { this.edit.apply(); this.model.sort(this.getSortField()); }, addRow: function (_9ff, _a00) { this.edit.apply(); var i = _a00 || -1; if (i < 0) { i = this.selection.getFirstSelected() || 0; } if (i < 0) { i = 0; } this.model.insert(_9ff, i); this.model.beginModifyRow(i); for (var j = 0, c; ((c = this.getCell(j)) && !c.editor); j++) { } if (c && c.editor) { this.edit.setEditCell(c, i); } }, removeSelectedRows: function () { this.edit.apply(); var s = this.selection.getSelected(); if (s.length) { this.model.remove(s); this.selection.clear(); } }, canEdit: function (_a05, _a06) { return (this.model.canModify ? this.model.canModify(_a06) : true); }, doStartEdit: function (_a07, _a08) { var edit = this.canEdit(_a07, _a08); if (edit) { this.model.beginModifyRow(_a08); this.onStartEdit(_a07, _a08); } return edit; }, doApplyCellEdit: function (_a0a, _a0b, _a0c) { this.model.setDatum(_a0a, _a0b, _a0c); this.onApplyCellEdit(_a0a, _a0b, _a0c); }, doCancelEdit: function (_a0d) { this.model.cancelModifyRow(_a0d); this.onCancelEdit.apply(this, arguments); }, doApplyEdit: function (_a0e) { this.model.endModifyRow(_a0e); this.onApplyEdit(_a0e); }, styleRowState: function (_a0f) { if (this.model.getState) { var _a10 = this.model.getState(_a0f.index), c = ""; for (var i = 0, ss = ["inflight", "error", "inserting"], s; s = ss[i]; i++) { if (_a10[s]) { c = " dojoxGrid-row-" + s; break; } } _a0f.customClasses += c; } }, onStyleRow: function (_a15) { this.styleRowState(_a15); this.inherited(arguments); }, junk: 0 }); }

